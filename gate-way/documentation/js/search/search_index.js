var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.696,1,2.65]],["body/modules/AppModule.html",[0,2.859,1,5.501,2,2.342,3,2.49,4,2.859,5,2.859,6,2.49,7,4.123,8,2.859,9,3.796,10,3.796,11,3.796,12,4.636,13,0.018,14,4.636,15,4.636,16,4.636,17,4.314,18,4.314,19,2.639,20,4.636,21,3.713,22,2.859,23,2.49,24,0.178,25,0.156,26,0.156,27,4.403,28,3.713,29,0.313,30,1.296,31,4.403,32,4.929,33,0.785,34,4.403,35,4.403,36,3.396,37,4.403,38,3.796,39,2.21,40,4.403,41,3.796,42,3.796,43,4.403,44,4.403,45,1.983,46,4.403,47,5.718,48,2.661,49,3.234,50,4.403,51,2.575,52,1.884,53,3.796,54,4.403,55,3.396,56,4.403,57,4.403,58,4.403,59,4.403,60,3.796,61,3.097,62,4.403,63,4.403,64,4.403,65,0.178,66,0.328,67,0.013,68,0.013]],["title/modules/AuthModule.html",[0,1.696,12,2.446]],["body/modules/AuthModule.html",[0,2.97,2,2.539,3,2.7,4,3.1,5,3.1,6,2.7,7,4.283,8,4.283,12,5.02,13,0.018,19,2.696,21,3.91,22,3.1,23,2.7,24,0.193,25,0.169,26,0.169,28,3.91,29,0.303,30,1.405,38,5.191,39,2.396,45,2.15,52,2.042,65,0.193,66,0.356,67,0.013,68,0.013,69,4.116,70,4.116,71,4.116,72,4.863,73,3.878,74,3.878,75,3.463,76,4.774,77,2.885,78,4.774,79,4.774,80,2.885,81,6.021,82,4.039,83,4.116,84,2.396,85,4.774,86,4.774,87,2.7,88,4.774,89,4.774,90,1.943,91,2.885,92,3.1,93,4.774,94,4.116,95,4.774,96,4.116]],["title/classes/AuthResolver.html",[66,0.281,72,2.446]],["body/classes/AuthResolver.html",[13,0.018,24,0.149,25,0.131,26,0.131,29,0.281,30,1.085,65,0.149,66,0.275,67,0.011,68,0.011,72,3.297,75,2.971,77,2.228,83,3.178,90,3.109,97,0.511,98,3.178,99,0.484,100,1.969,101,5.848,102,5.395,103,4.479,104,3.221,105,5.658,106,5.807,107,0.908,108,3.687,109,0.43,110,3.687,111,1.526,112,0.476,113,0.361,114,1.33,115,5.077,116,3.178,117,3.712,118,1.826,119,6.257,120,3.687,121,3.14,122,2.63,123,3.608,124,5.077,125,1.193,126,3.687,127,3.178,128,3.297,129,3.687,130,3.539,131,3.178,132,3.965,133,3.029,134,3.687,135,2.914,136,3.178,137,3.687,138,3.687,139,2.411,140,3.687,141,5.007,142,5.658,143,3.771,144,4.377,145,0.757,146,3.178,147,3.178,148,1.961,149,2.7,150,2.7,151,2.228,152,0.757,153,0.868,154,2.228,155,1.826,156,1.563,157,1.142,158,3.221,159,2.902,160,3.687,161,1.826,162,1.301,163,3.687,164,3.687,165,0.742,166,3.687,167,3.687,168,3.687,169,3.687,170,3.687,171,4.377,172,3.687,173,3.687,174,3.687]],["title/classes/BaseQuery.html",[66,0.281,175,2.276]],["body/classes/BaseQuery.html",[13,0.018,24,0.192,25,0.167,26,0.167,29,0.266,33,0.844,65,0.242,66,0.447,67,0.013,68,0.013,97,0.656,99,0.621,109,0.406,112,0.463,113,0.335,118,1.768,125,0.971,145,0.971,152,0.971,153,1.113,156,2.274,157,1.637,175,3.617,176,3.648,177,1.409,178,5.01,179,5.01,180,5.01,181,1.902,182,2.318,183,2.079,184,2.318,185,4.73,186,4.73,187,4.73,188,2.096,189,3.574,190,3.296,191,4.078,192,3.648,193,4.078,194,4.078,195,1.392,196,4.078,197,4.078,198,4.078,199,4.078,200,3.071,201,0.971,202,4.617,203,4.078,204,4.078,205,4.078,206,4.078]],["title/classes/Counter.html",[66,0.281,200,2.446]],["body/classes/Counter.html",[13,0.018,24,0.202,25,0.176,26,0.176,29,0.272,33,0.887,65,0.25,66,0.461,67,0.014,68,0.014,97,0.69,99,0.653,109,0.308,112,0.456,113,0.254,118,1.339,125,1.022,145,1.022,152,1.022,153,1.171,156,2.225,157,1.512,175,3.007,176,3.838,177,1.455,178,4.347,179,4.347,180,4.347,181,1.861,182,1.756,183,2.034,184,1.756,188,2.127,189,3.628,190,3.373,191,4.29,192,3.838,193,4.29,194,4.29,195,1.464,196,4.29,197,4.29,198,4.29,199,4.29,200,4.013,201,1.269,202,5.576,203,4.29,204,4.29,205,4.29,206,4.29,207,4.976]],["title/classes/CreateUserDto.html",[66,0.281,208,1.789]],["body/classes/CreateUserDto.html",[13,0.018,24,0.138,25,0.12,26,0.12,29,0.245,33,0.606,65,0.268,66,0.507,67,0.011,68,0.011,97,0.471,99,0.446,109,0.394,112,0.47,113,0.325,118,1.715,125,1.358,145,0.698,152,0.698,153,0.8,155,1.78,156,2.337,157,1.702,161,1.78,162,1.693,165,1.144,177,1.129,183,2.129,184,2.132,188,2.105,201,0.985,208,2.279,209,1.923,210,2.869,211,3.025,212,2.035,213,2.869,214,1.702,215,4.482,216,2.931,217,3.4,218,2.931,219,3.4,220,3.701,221,3.4,222,2.931,223,1.702,224,3.4,225,3.4,226,2.552,227,3.517,228,1.808,229,1.706,230,3.06,231,2.054,232,2.9,233,1.923,234,3.032,235,3.025,236,1.808,237,1.808,238,1.808,239,1.808,240,1.808,241,1.808,242,1.2,243,1.808,244,1.2,245,1.808,246,2.9,247,1.614,248,0.698,249,2.054,250,1.235,251,1.808,252,1.808,253,2.279,254,1.808,255,1.923,256,2.053,257,1.614,258,3.74,259,3.36,260,2.054,261,2.054,262,1.614,263,2.9,264,2.552,265,1.614,266,1.808,267,1.614,268,1.614,269,1.808,270,1.808,271,2.714,272,2.054,273,1.774,274,2.054]],["title/injectables/CustomLogger.html",[17,2.276,275,0.97]],["body/injectables/CustomLogger.html",[13,0.018,17,2.936,24,0.14,25,0.123,26,0.123,29,0.26,30,1.019,51,2.529,52,1.481,65,0.197,66,0.363,67,0.011,68,0.011,99,0.454,100,1.884,109,0.412,111,1.37,112,0.377,113,0.339,114,1.194,122,2.361,133,3.266,143,3.156,165,1.139,177,1.144,201,0.711,223,1.848,248,0.998,273,2.251,275,1.446,276,1.559,277,2.67,278,4.841,279,5.53,280,4.841,281,4.859,282,2.818,283,4.859,284,4.859,285,4.19,286,3.461,287,2.361,288,4.697,289,4.19,290,5.888,291,3.461,292,4.19,293,3.461,294,4.19,295,3.461,296,2.307,297,2.079,298,3.461,299,3.461,300,4.19,301,4.19,302,2.67,303,2.984,304,2.984,305,2.67,306,2.984,307,2.67,308,3.156,309,2.435,310,2.984,311,2.984,312,2.984,313,2.984,314,2.984,315,4.678,316,4.19,317,2.286,318,2.984,319,2.984,320,2.984,321,2.984,322,2.984,323,4.331,324,2.67,325,2.435,326,2.984,327,2.984,328,2.984,329,2.984,330,2.984,331,2.984,332,2.402,333,2.984,334,2.67,335,2.984,336,4.19,337,4.841,338,4.19,339,2.585,340,4.19,341,2.984,342,2.984,343,2.984,344,2.67,345,2.984,346,2.984,347,2.984,348,2.984,349,2.984,350,2.984,351,4.19,352,4.19,353,4.19,354,2.984,355,2.248,356,1.958,357,2.188,358,1.737,359,2.984,360,2.984,361,2.67,362,2.585,363,2.435,364,4.19,365,2.984,366,4.19,367,3.419,368,2.984,369,2.984,370,1.958,371,2.984,372,2.984,373,2.984,374,2.984]],["title/classes/DeleteUserDto.html",[66,0.281,257,1.789]],["body/classes/DeleteUserDto.html",[13,0.018,24,0.151,25,0.132,26,0.132,29,0.255,33,0.665,65,0.276,66,0.52,67,0.011,68,0.011,97,0.517,99,0.489,109,0.231,112,0.467,113,0.19,118,1.003,125,1.398,145,0.765,152,0.765,153,0.877,155,1.832,156,2.325,157,1.691,161,1.832,162,1.805,165,1.137,177,1.204,182,1.315,183,2.115,184,1.315,188,2.144,201,1.051,208,1.77,209,2.108,210,2.303,211,2.429,212,1.798,213,2.303,214,1.504,223,1.696,226,2.721,227,3.62,228,1.982,229,1.87,230,3.138,231,2.252,232,3.091,233,2.108,234,3.155,235,3.128,236,1.982,237,1.982,238,1.982,239,1.982,240,1.982,241,1.982,242,1.315,243,1.982,244,1.315,245,1.982,246,3.091,247,1.77,248,0.765,249,2.252,250,1.317,251,1.982,252,1.982,253,2.429,254,1.982,255,2.108,256,2.188,257,2.429,258,4.074,259,3.529,260,2.252,261,2.252,262,1.77,263,3.091,264,2.721,265,1.77,266,1.982,267,1.77,268,1.77,269,1.982,270,1.982,271,2.894,272,2.252,273,1.891,274,2.252,375,3.727]],["title/classes/ForgotPasswordDto.html",[66,0.281,117,2.131]],["body/classes/ForgotPasswordDto.html",[13,0.018,24,0.189,25,0.165,26,0.165,29,0.264,33,0.832,65,0.264,66,0.487,67,0.013,68,0.013,97,0.647,99,0.612,104,2.215,109,0.367,112,0.461,113,0.303,117,3.356,118,1.597,125,1.456,132,2.819,139,2.215,145,0.958,152,0.958,153,1.098,155,1.756,161,1.756,165,1.121,177,1.397,182,2.094,183,2.04,184,2.094,188,2.167,212,2.295,214,1.896,230,2.938,242,2.094,244,2.094,250,1.528,268,2.215,296,2.818,297,2.538,376,3.282,377,4.665,378,4.665,379,2.481,380,3.598,381,3.029]],["title/classes/ForgotPasswordModel.html",[66,0.281,121,1.891]],["body/classes/ForgotPasswordModel.html",[13,0.018,24,0.161,25,0.141,26,0.141,29,0.245,33,0.711,65,0.273,66,0.503,67,0.012,68,0.012,97,0.552,99,0.523,104,1.892,109,0.247,112,0.475,113,0.203,118,1.072,121,2.686,125,1.456,135,2,139,1.892,145,0.818,149,2.119,150,2.119,152,0.818,153,0.938,155,1.627,156,2.291,157,0.896,161,1.627,162,1.889,165,1.139,177,1.26,181,1.378,182,1.406,183,2.145,184,1.406,188,2.243,189,3.033,190,3.383,201,1.516,212,1.86,214,1.856,242,1.889,244,1.406,250,1.378,296,1.892,297,1.704,379,2.119,382,2.408,383,3.984,384,2.587,385,3.234,386,2.587,387,2.587,388,2.587,389,3.234,390,2.587,391,3.234,392,2.587,393,3.234,394,2.587,395,3.234,396,2.587,397,1.704,398,2.408,399,3.234,400,2.587,401,3.234,402,2.587]],["title/guards/GqlAuthGuard.html",[148,2.004,403,2.906]],["body/guards/GqlAuthGuard.html",[13,0.018,19,2.594,24,0.134,25,0.118,26,0.118,29,0.301,30,0.977,33,0.592,39,1.666,45,1.494,48,2.005,49,1.877,51,3.105,52,1.42,65,0.266,66,0.446,67,0.01,68,0.01,73,1.765,74,1.765,75,2.24,77,2.005,80,2.005,82,4.025,84,1.666,87,3.901,90,2.57,91,2.005,92,2.155,99,0.436,100,1.829,107,1.351,109,0.292,111,1.061,112,0.292,113,0.24,114,0.925,122,1.287,123,1.765,125,0.682,128,3.063,130,2.668,133,3.044,145,0.682,148,2.509,151,2.005,152,0.682,153,0.781,154,2.005,157,0.747,158,3.379,159,2.018,201,1.227,214,0.854,248,0.969,250,0.854,273,1.227,275,1.625,282,1.666,317,1.92,332,3.08,356,2.668,357,2.954,358,1.666,362,3.732,370,3.38,397,2.018,404,2.56,405,2.005,406,4.441,407,3.319,408,3.319,409,3.861,410,4.441,411,3.319,412,2.005,413,3.319,414,2.335,415,3.319,416,2.155,417,2.335,418,3.861,419,2.155,420,1.388,421,2.005,422,2.005,423,1.576,424,2.005,425,2.335,426,2.335,427,1.59,428,3.319,429,3.319,430,3.104,431,3.319,432,2.335,433,3.319,434,2.335,435,2.335,436,2.335,437,2.335,438,2.335,439,2.335,440,2.335,441,2.85,442,2.668,443,2.335,444,3.319,445,3.319,446,2.005,447,2.155,448,2.155,449,2.005,450,2.335,451,2.155,452,2.005,453,2.005,454,2.335,455,2.005,456,2.335,457,3.861,458,2.335,459,3.319,460,3.861,461,2.335,462,2.85,463,2.005,464,2.155,465,2.005,466,2.005,467,2.005,468,2.335,469,2.335,470,2.335,471,2.85,472,2.335,473,2.155,474,2.155,475,1.877,476,3.063]],["title/injectables/GraphQLLoggingMiddleware.html",[275,0.97,355,2.446]],["body/injectables/GraphQLLoggingMiddleware.html",[13,0.018,17,2.294,24,0.154,25,0.134,26,0.134,29,0.269,30,1.117,51,3.082,52,1.624,65,0.21,66,0.386,67,0.012,68,0.012,99,0.498,109,0.365,113,0.264,133,3.183,143,3.364,165,1.087,177,1.219,201,0.78,223,1.762,248,0.78,273,2.342,275,1.518,276,1.71,277,2.928,278,4.466,279,5.084,280,3.273,282,1.905,285,3.273,289,3.273,290,5.716,292,3.273,294,3.273,296,2.8,297,2.523,300,4.466,301,4.466,302,2.928,303,3.273,304,3.273,305,2.928,306,3.273,307,2.928,308,3.364,309,2.671,310,3.273,311,3.273,312,3.273,313,3.273,314,3.273,315,4.814,316,4.466,317,2.699,318,3.273,319,3.273,320,3.273,321,3.273,322,3.273,323,4.548,324,2.928,325,2.671,326,3.273,327,3.273,328,3.273,329,3.273,330,3.273,331,3.273,332,2.523,333,3.273,334,2.928,335,3.273,336,4.466,337,5.084,338,4.466,339,2.755,340,4.466,341,3.273,342,3.273,343,3.273,344,2.928,345,3.273,346,3.273,347,3.273,348,3.273,349,3.273,350,3.273,351,4.466,352,4.466,353,4.466,354,3.273,355,3.364,356,2.147,357,3.082,358,2.959,359,5.084,360,4.466,361,4.548,362,2.755,363,2.671,364,4.466,365,3.273,366,4.466,367,3.644,368,3.273,369,3.273,370,2.147,371,3.273,372,3.273,373,3.273,374,3.273,477,3.796,478,3.796,479,3.796]],["title/classes/GraphQlBadGatewayException.html",[66,0.281,480,1.393]],["body/classes/GraphQlBadGatewayException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.711,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,488,3.231,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315]],["title/classes/GraphQlBadRequestException.html",[66,0.281,494,1.269]],["body/classes/GraphQlBadRequestException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.56,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,516,3.231]],["title/classes/GraphQlConflictException.html",[66,0.281,503,1.393]],["body/classes/GraphQlConflictException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.711,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,517,3.231]],["title/classes/GraphQlForbiddenException.html",[66,0.281,489,1.393]],["body/classes/GraphQlForbiddenException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.711,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,518,3.231]],["title/classes/GraphQlInternalServerErrorException.html",[66,0.281,509,1.393]],["body/classes/GraphQlInternalServerErrorException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.711,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,519,3.231]],["title/classes/GraphQlMethodNotAllowedException.html",[66,0.281,513,1.393]],["body/classes/GraphQlMethodNotAllowedException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.711,514,1.315,515,1.315,520,3.231]],["title/classes/GraphQlNotAcceptableException.html",[66,0.281,499,1.393]],["body/classes/GraphQlNotAcceptableException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.711,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,521,3.231]],["title/classes/GraphQlNotFoundException.html",[66,0.281,497,1.329]],["body/classes/GraphQlNotFoundException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.633,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,522,3.231]],["title/classes/GraphQlNotImplementedException.html",[66,0.281,511,1.393]],["body/classes/GraphQlNotImplementedException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.711,512,1.315,513,1.195,514,1.315,515,1.315,523,3.231]],["title/classes/GraphQlPayloadTooLargeException.html",[66,0.281,505,1.393]],["body/classes/GraphQlPayloadTooLargeException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.711,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,524,3.231]],["title/classes/GraphQlRequestTimeoutException.html",[66,0.281,501,1.393]],["body/classes/GraphQlRequestTimeoutException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.711,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,525,3.231]],["title/classes/GraphQlUnauthorizedException.html",[66,0.281,420,1.109]],["body/classes/GraphQlUnauthorizedException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,1.362,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.195,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,526,3.231]],["title/classes/GraphQlUnsupportedMediaTypeException.html",[66,0.281,507,1.393]],["body/classes/GraphQlUnsupportedMediaTypeException.html",[13,0.018,24,0.131,25,0.114,26,0.114,29,0.131,65,0.296,66,0.544,67,0.01,68,0.01,97,0.448,107,1.81,109,0.2,111,0.727,112,0.2,113,0.165,114,0.633,165,1.081,181,1.905,195,0.951,223,1.986,248,1.51,287,1.253,420,0.951,427,2.459,480,1.195,481,1.794,482,1.253,483,3.012,484,1.315,485,3.199,486,2.869,487,3.03,489,1.195,490,2.97,491,2.97,492,2.97,493,1.315,494,1.089,495,1.315,496,1.253,497,1.14,498,1.315,499,1.195,500,1.315,501,1.195,502,1.315,503,1.195,504,1.315,505,1.195,506,1.315,507,1.711,508,1.315,509,1.195,510,1.315,511,1.195,512,1.315,513,1.195,514,1.315,515,1.315,527,3.231]],["title/modules/GraphqlModule.html",[0,1.696,14,2.446]],["body/modules/GraphqlModule.html",[0,2.837,2,2.731,13,0.018,14,4.426,24,0.208,25,0.182,26,0.182,28,3.334,29,0.295,30,1.511,53,4.426,61,3.612,65,0.208,66,0.383,67,0.014,68,0.014,100,1.991,109,0.318,111,1.155,112,0.318,113,0.262,114,1.007,122,1.991,133,2.196,145,1.054,157,1.418,201,1.525,288,3.96,308,3.334,309,3.612,355,3.334,361,3.96,362,3.351,363,4.432,528,5.134,529,5.134,530,6.3,531,7.108,532,5.134,533,4.426,534,5.134,535,6.3,536,4.426,537,6.3,538,5.134,539,5.134,540,5.134,541,5.134,542,5.134,543,5.134,544,5.134,545,5.134,546,5.134,547,5.134,548,5.134,549,4.426,550,5.134,551,5.134]],["title/injectables/JWTRefreshTokenStrategy.html",[73,2.004,275,0.97]],["body/injectables/JWTRefreshTokenStrategy.html",[13,0.018,19,2.337,24,0.135,25,0.118,26,0.118,29,0.301,30,0.98,33,0.594,39,1.671,45,1.499,48,2.012,49,1.883,51,2.846,52,1.424,65,0.266,66,0.447,67,0.011,68,0.011,73,2.515,74,1.771,75,2.245,77,2.012,80,2.012,82,3.972,84,1.671,87,3.972,90,2.238,91,2.012,92,2.162,99,0.437,100,1.833,107,1.353,109,0.293,111,1.064,112,0.293,113,0.241,114,0.927,122,1.291,125,0.684,128,3.07,130,2.674,133,3.112,145,0.684,148,1.771,151,2.012,152,0.684,153,0.784,154,2.012,157,0.749,158,3.381,159,2.023,201,1.229,214,0.857,248,1.129,250,0.857,273,1.231,275,1.627,276,1.499,282,1.671,317,1.924,332,3.082,356,2.674,357,2.957,358,1.671,362,3.735,370,3.385,397,2.023,405,2.012,406,3.868,409,3.326,410,3.868,412,2.012,413,3.868,414,2.342,415,3.868,416,2.162,417,2.342,418,3.868,419,2.162,420,1.391,421,2.012,422,2.012,423,1.581,424,2.012,425,2.342,426,3.326,427,1.593,428,3.326,429,3.326,430,3.11,431,3.326,432,2.342,433,3.326,434,2.342,435,2.342,436,2.342,437,3.326,438,2.342,439,2.342,440,3.326,441,3.617,442,2.674,443,2.342,444,3.326,445,3.326,446,2.012,447,2.162,448,2.162,449,2.012,450,2.342,451,2.162,452,2.012,453,2.012,454,2.342,455,2.012,456,2.342,457,3.868,458,2.342,459,3.326,460,3.868,461,2.342,462,2.857,463,2.012,464,2.162,465,2.012,466,2.012,467,2.012,468,2.342,469,2.342,470,2.342,471,2.857,472,2.342,473,2.162,474,2.162,475,1.883,476,3.07,552,4.076,553,3.33,554,3.33]],["title/injectables/JWTStrategy.html",[74,2.004,275,0.97]],["body/injectables/JWTStrategy.html",[13,0.018,19,2.34,24,0.135,25,0.118,26,0.118,29,0.301,30,0.983,33,0.596,39,1.676,45,1.504,48,2.019,49,1.89,51,2.85,52,1.429,65,0.266,66,0.447,67,0.011,68,0.011,73,1.777,74,2.521,75,2.25,77,2.019,80,2.019,82,3.975,84,1.676,87,3.908,90,2.576,91,2.019,92,2.169,99,0.439,100,1.838,107,1.356,109,0.293,111,1.066,112,0.293,113,0.242,114,0.929,122,1.295,123,1.777,125,0.686,128,3.077,130,2.681,133,3.006,145,0.686,148,1.777,151,2.019,152,0.686,153,0.786,154,2.019,157,0.752,158,3.384,159,2.027,201,1.231,214,0.86,248,1.131,250,0.86,273,1.235,275,1.629,276,1.504,282,1.676,317,1.929,332,3.084,356,2.681,357,2.96,358,1.676,362,3.738,370,3.39,397,2.564,405,2.019,406,3.875,409,3.334,410,3.875,412,2.019,413,3.334,414,2.35,415,3.334,416,2.169,417,2.35,418,3.875,419,2.169,420,1.395,421,2.019,422,2.019,423,1.586,424,2.019,425,3.334,426,3.334,427,1.597,428,3.334,429,3.334,430,3.115,431,3.334,432,2.35,433,3.334,434,3.334,435,2.35,436,2.35,437,2.35,438,2.35,439,2.35,440,2.35,441,3.328,442,2.681,443,2.35,444,3.334,445,3.334,446,2.019,447,2.169,448,2.169,449,2.019,450,2.35,451,2.169,452,2.019,453,2.019,454,2.35,455,2.019,456,2.35,457,3.875,458,2.35,459,3.334,460,3.875,461,2.35,462,2.864,463,2.019,464,2.169,465,2.019,466,2.019,467,2.019,468,2.35,469,2.35,470,2.35,471,2.864,472,2.35,473,2.169,474,2.169,475,1.89,476,3.077,552,4.086,555,3.341,556,3.341]],["title/classes/JwtPayLoad.html",[66,0.281,397,1.612]],["body/classes/JwtPayLoad.html",[13,0.018,24,0.161,25,0.141,26,0.141,29,0.244,33,0.708,65,0.273,66,0.502,67,0.012,68,0.012,97,0.55,99,0.521,104,1.885,109,0.373,112,0.473,113,0.308,121,1.992,125,1.515,135,1.992,139,1.885,145,0.815,149,2.111,150,2.111,152,0.815,153,0.934,155,1.624,156,2.29,157,0.893,161,1.624,162,1.884,165,1.141,177,1.257,181,1.374,183,2.134,188,2.241,189,3.027,190,3.379,201,1.515,212,1.857,214,1.824,242,1.884,244,1.4,250,1.374,379,2.111,382,2.398,384,2.577,385,3.226,386,2.577,387,2.577,388,2.577,389,3.226,390,2.577,391,3.226,392,2.577,393,3.226,394,2.577,395,3.226,396,2.577,397,2.284,398,3.645,399,3.226,400,2.577,401,3.226,402,2.577,557,3.969,558,3.969,559,3.969]],["title/injectables/KafkaHumanResourceService.html",[275,0.97,560,2.446]],["body/injectables/KafkaHumanResourceService.html",[13,0.018,24,0.214,25,0.187,26,0.187,29,0.26,30,1.555,65,0.214,66,0.394,67,0.014,68,0.014,96,4.556,99,0.694,100,2.486,107,1.579,109,0.397,111,1.443,112,0.427,113,0.327,114,1.257,122,2.049,250,1.361,275,1.651,276,2.38,288,4.077,357,2.38,358,2.652,441,3.194,560,4.661,561,4.556,562,4.946,563,5.285,564,7.178,565,5.285,566,6.413,567,5.285,568,4.077,569,5.285,570,5.285,571,5.285,572,5.285,573,5.285,574,3.718,575,5.285,576,5.285,577,5.285,578,6.904,579,5.285,580,5.285,581,5.285,582,5.285,583,5.285,584,4.556,585,4.556]],["title/modules/KafkaModule.html",[0,1.696,15,2.446]],["body/modules/KafkaModule.html",[0,3.123,2,2.84,3,3.021,4,3.468,5,3.468,6,3.021,7,4.503,8,3.468,13,0.018,15,4.866,21,4.19,22,3.468,23,3.021,24,0.216,25,0.189,26,0.189,28,3.468,29,0.281,30,1.572,45,2.405,65,0.216,66,0.398,67,0.014,68,0.014,112,0.33,486,2.071,533,4.604,560,4.866,568,4.119,586,4.604,587,4.604,588,5.34,589,5.34,590,6.453,591,5.34,592,5.34,593,5.34,594,5.34,595,5.34,596,5.34,597,5.34,598,5.34,599,5.34,600,5.34]],["title/classes/LoginDto.html",[66,0.281,132,2.276]],["body/classes/LoginDto.html",[13,0.018,24,0.189,25,0.165,26,0.165,29,0.264,33,0.832,65,0.264,66,0.487,67,0.013,68,0.013,97,0.647,99,0.612,104,2.215,109,0.367,112,0.461,113,0.303,117,2.639,118,1.597,125,1.456,132,3.586,139,2.215,145,0.958,152,0.958,153,1.098,155,1.756,161,1.756,165,1.121,177,1.397,182,2.094,183,2.04,184,2.094,188,2.167,212,2.295,214,1.896,230,2.938,242,2.094,244,2.094,250,1.528,268,2.215,296,2.818,297,2.538,376,3.282,379,2.481,380,3.598,381,3.029,601,4.665,602,4.665]],["title/classes/LoginModel.html",[66,0.281,135,1.891]],["body/classes/LoginModel.html",[13,0.018,24,0.158,25,0.138,26,0.138,29,0.242,33,0.694,65,0.271,66,0.499,67,0.012,68,0.012,97,0.54,99,0.511,104,1.849,109,0.326,112,0.476,113,0.269,118,1.418,121,1.954,125,1.448,135,2.645,139,1.849,145,0.8,149,2.071,150,2.071,152,0.8,153,0.916,155,1.608,156,2.282,157,0.876,161,1.608,162,1.859,165,1.139,177,1.24,181,1.357,182,1.859,183,2.147,184,1.859,188,2.236,189,2.998,190,3.357,201,1.509,212,2.122,214,1.846,242,1.859,244,1.374,250,1.357,296,2.502,297,2.254,379,2.071,382,2.352,384,2.528,385,3.184,386,2.528,387,2.528,388,2.528,389,3.184,390,2.528,391,3.184,392,2.528,393,3.184,394,2.528,395,3.184,396,2.528,397,1.665,398,2.352,399,3.184,400,2.528,401,3.184,402,2.528,603,3.893,604,3.893]],["title/classes/LoginResponse.html",[66,0.281,149,2.004]],["body/classes/LoginResponse.html",[13,0.018,24,0.158,25,0.139,26,0.139,29,0.243,33,0.698,65,0.271,66,0.5,67,0.012,68,0.012,97,0.542,99,0.514,104,1.858,109,0.327,112,0.476,113,0.27,118,1.423,121,1.964,125,1.45,135,1.964,139,1.858,145,0.804,149,2.812,150,2.081,152,0.804,153,0.921,155,1.612,156,2.316,157,0.88,161,1.612,162,1.866,165,1.14,177,1.245,181,1.361,182,1.866,183,2.149,184,1.866,188,2.237,189,3.006,190,3.363,201,1.536,212,1.843,214,1.725,242,1.866,244,1.381,250,1.361,379,2.081,382,2.364,384,2.541,385,3.195,386,2.541,387,2.541,388,2.541,389,3.195,390,2.541,391,3.195,392,2.541,393,3.195,394,2.541,395,3.195,396,2.541,397,1.674,398,2.364,399,4.049,400,2.541,401,4.049,402,2.541,605,3.913,606,3.913]],["title/injectables/MailerService.html",[18,2.276,275,0.97]],["body/injectables/MailerService.html",[13,0.018,18,3.788,24,0.206,25,0.18,26,0.18,29,0.254,30,1.498,65,0.206,66,0.38,67,0.014,68,0.014,90,2.764,99,0.669,100,2.43,107,1.672,109,0.42,111,1.146,112,0.315,113,0.26,114,0.998,122,1.974,123,2.708,157,1.146,158,2.418,159,2.178,165,1.116,177,1.475,234,2.555,275,1.614,276,2.293,332,2.178,357,3.058,607,6.11,608,4.39,609,6.791,610,6.268,611,6.268,612,6.268,613,7.087,614,6.11,615,5.092,616,5.404,617,5.092,618,5.092,619,5.092,620,5.092,621,5.092,622,5.092,623,3.927,624,4.39,625,5.404,626,4.39,627,5.092,628,5.092,629,5.092]],["title/classes/ManageAvatarUserDto.html",[66,0.281,270,2.004]],["body/classes/ManageAvatarUserDto.html",[13,0.018,24,0.148,25,0.129,26,0.129,29,0.252,33,0.65,65,0.274,66,0.517,67,0.011,68,0.011,97,0.505,99,0.479,109,0.312,112,0.468,113,0.257,114,0.988,118,1.356,125,1.388,145,0.749,152,0.749,153,0.858,155,1.82,156,2.329,157,1.685,161,1.82,162,1.778,165,1.137,177,1.186,182,1.778,183,2.12,184,1.778,188,2.135,201,1.186,208,1.732,209,2.063,210,2.269,211,2.393,212,1.777,213,2.269,214,1.486,223,1.683,226,2.68,227,3.596,228,1.94,229,1.83,230,3.12,231,2.204,232,3.045,233,2.063,234,3.126,235,3.104,236,1.94,237,1.94,238,1.94,239,1.94,240,1.94,241,1.94,242,1.287,243,1.94,244,1.287,245,1.94,246,3.045,247,1.732,248,0.749,249,2.204,250,1.297,251,1.94,252,1.94,253,2.393,254,1.94,255,2.063,256,2.156,257,1.732,258,3.824,259,3.489,260,2.204,261,2.204,262,1.732,263,3.045,264,2.68,265,1.732,266,1.94,267,1.732,268,1.732,269,1.94,270,2.68,271,3.698,272,2.204,273,2.417,274,2.204,630,3.647,631,3.647]],["title/classes/MenuStructureModel.html",[66,0.281,150,2.004]],["body/classes/MenuStructureModel.html",[13,0.018,24,0.135,25,0.118,26,0.118,29,0.223,33,0.593,65,0.256,66,0.471,67,0.01,68,0.01,97,0.461,99,0.437,104,1.579,109,0.434,112,0.48,113,0.358,114,1.479,118,1.89,121,1.669,125,1.479,135,1.669,139,1.579,145,0.683,149,1.769,150,2.513,152,0.683,153,0.783,155,1.479,156,2.339,157,1.063,161,1.479,162,1.939,165,1.13,177,1.112,181,1.54,182,2.477,183,2.163,184,2.383,188,2.187,189,2.757,190,3.171,201,1.549,212,1.691,214,1.627,242,1.667,244,1.174,250,1.627,296,2.609,297,2.35,379,1.769,382,2.01,384,2.16,385,3.818,386,2.16,387,2.16,388,2.16,389,3.818,390,2.16,391,3.818,392,2.16,393,3.818,394,2.16,395,3.818,396,2.16,397,1.423,398,2.01,399,2.855,400,2.16,401,2.855,402,2.16,632,3.326,633,3.326,634,3.326,635,3.326,636,3.326,637,3.326,638,3.326,639,3.326,640,3.326]],["title/injectables/PrismaAuthService.html",[75,1.789,275,0.97]],["body/injectables/PrismaAuthService.html",[13,0.018,19,2.121,24,0.094,25,0.082,26,0.082,29,0.273,30,0.681,33,0.413,39,1.161,45,1.041,51,2.698,52,0.989,60,1.994,61,1.627,65,0.094,66,0.173,67,0.008,68,0.008,75,1.711,82,3.389,84,1.161,87,1.308,90,2.962,91,3.02,94,3.107,99,0.304,100,1.397,101,4.309,102,4.309,103,3.414,104,1.711,105,3.816,107,0.887,109,0.383,111,1.348,112,0.371,113,0.305,114,1.175,116,1.994,117,2.827,121,2.222,122,2.323,123,2.881,125,0.909,127,3.107,130,3.81,131,3.107,133,2.455,135,2.718,136,3.107,139,1.098,146,1.994,151,1.398,152,0.475,153,0.544,155,1.613,157,1.219,158,3.023,159,3.142,161,1.613,162,1.562,201,1.112,210,1.041,212,0.712,213,1.041,214,1.287,250,1.595,255,2.504,268,1.098,273,2.121,275,0.928,276,1.041,282,2.508,296,1.098,297,0.989,315,1.627,317,2.741,323,3.414,324,3.414,325,1.627,332,1.894,339,1.23,357,1.993,358,1.808,362,1.916,363,1.627,370,1.308,397,1.541,398,1.398,399,3.467,401,3.467,412,1.398,419,1.502,420,1.06,421,1.398,422,1.398,423,1.098,424,1.398,430,1.308,441,1.398,442,3.505,446,3.62,447,1.502,448,1.502,449,3.02,451,2.34,452,3.02,453,1.398,455,1.398,463,1.398,464,1.502,465,1.398,466,2.177,467,1.398,494,1.825,497,1.271,574,1.627,623,1.784,626,3.107,641,1.994,642,3.603,643,3.603,644,1.784,645,2.313,646,2.313,647,2.535,648,3.603,649,2.313,650,2.313,651,2.313,652,2.313,653,2.313,654,3.603,655,2.313,656,5.488,657,2.313,658,1.784,659,2.313,660,2.313,661,3.107,662,2.313,663,2.313,664,2.313,665,4.998,666,2.779,667,2.313,668,2.313,669,5.991,670,4.427,671,4.309,672,4.215,673,4.427,674,3.603,675,6.196,676,3.603,677,3.603,678,2.313,679,2.313,680,4.178,681,4.178,682,2.313,683,3.603,684,3.603,685,4.309,686,3.603,687,2.313,688,3.603,689,2.313,690,3.603,691,3.603,692,3.603,693,3.603,694,2.313,695,3.603,696,2.313,697,2.313,698,2.313,699,2.313,700,2.313,701,2.313,702,2.313,703,3.603,704,3.603,705,4.67,706,2.313,707,3.107,708,3.603,709,3.603,710,3.816,711,3.603,712,2.313,713,2.313,714,2.313,715,2.313,716,2.313,717,1.994,718,1.994,719,1.994,720,2.313,721,2.313,722,3.816,723,1.994,724,2.313,725,2.313,726,1.994,727,3.603,728,2.313,729,3.603,730,2.313,731,2.313,732,2.313,733,4.427,734,2.313,735,2.313,736,2.313,737,2.313,738,2.313,739,2.313,740,2.313,741,2.313,742,2.313,743,2.313,744,2.313]],["title/classes/PrismaQuery.html",[66,0.281,745,2.276]],["body/classes/PrismaQuery.html",[13,0.018,24,0.153,25,0.134,26,0.134,29,0.256,33,0.673,65,0.283,66,0.385,67,0.011,68,0.011,97,0.523,99,0.495,109,0.433,112,0.409,113,0.356,118,1.882,145,0.775,156,2.329,177,1.214,181,1.627,188,1.11,189,3.32,195,1.11,201,1.554,215,4.919,230,2.647,235,3.38,297,3.296,317,2.693,332,2.83,745,3.117,746,2.654,747,4.874,748,4.874,749,4.874,750,4.874,751,5.068,752,4.534,753,4.874,754,4.135,755,3.773,756,5.491,757,4.135,758,3.773,759,4.874,760,4.135,761,3.773,762,5.103,763,4.135,764,3.773,765,3.773,766,3.773,767,5.103,768,4.445,769,3.773,770,2.91,771,3.253,772,3.253,773,5.269,774,2.28,775,5.103,776,5.103]],["title/injectables/PrismaService.html",[19,1.393,275,0.97]],["body/injectables/PrismaService.html",[13,0.017,19,2.464,24,0.228,25,0.2,26,0.2,29,0.27,30,1.658,32,6.118,33,1.005,65,0.228,66,0.42,67,0.015,68,0.015,90,2.888,99,0.74,100,2.584,109,0.349,122,2.185,159,2.411,248,1.369,275,1.716,276,2.538,356,3.188,777,5.745,778,4.859,779,7.587,780,5.635,781,5.635]],["title/classes/PrismaSingleQuery.html",[66,0.281,774,2.276]],["body/classes/PrismaSingleQuery.html",[13,0.018,24,0.171,25,0.149,26,0.149,29,0.268,33,0.753,65,0.291,66,0.415,67,0.012,68,0.012,97,0.585,99,0.554,109,0.261,112,0.425,113,0.215,118,1.136,145,0.867,156,2.274,177,1.309,181,1.432,188,1.242,189,3.122,195,1.242,201,1.517,215,2.969,230,2.801,235,3.467,297,3.332,317,2.797,332,2.94,745,2.55,746,2.969,747,4.29,748,4.29,749,4.29,750,4.29,751,3.639,752,3.256,753,4.798,754,3.913,756,5.443,757,3.913,759,4.798,760,3.913,762,5.1,763,3.913,767,5.3,768,4.652,770,3.256,771,3.639,772,3.639,773,5.443,774,3.361,775,5.3,776,5.3,782,4.221]],["title/injectables/PrismaUsersService.html",[275,0.97,783,2.276]],["body/injectables/PrismaUsersService.html",[13,0.018,19,2.204,24,0.157,25,0.09,26,0.09,29,0.282,30,0.749,33,0.454,45,1.145,51,2.791,52,1.088,65,0.103,66,0.19,67,0.009,68,0.009,84,1.276,90,3.127,99,0.334,100,1.503,107,0.955,109,0.431,111,1.568,112,0.431,113,0.355,114,1.366,122,2.67,123,3.399,125,0.965,133,2.55,143,1.652,152,0.522,153,0.599,155,1.854,157,0.572,158,3.27,159,2.857,161,1.854,178,1.789,179,1.789,180,1.789,195,0.749,201,0.796,208,2.495,210,1.145,211,1.208,213,1.145,214,0.655,234,2.839,247,2.686,250,1.719,253,1.841,257,3.172,262,2.495,265,2.495,273,1.737,275,0.998,276,1.145,282,1.276,305,1.962,307,1.962,308,1.652,309,2.728,317,2.665,332,1.088,344,1.962,357,1.746,358,1.276,412,1.537,421,1.537,422,1.537,423,1.208,424,1.537,446,2.839,449,1.537,452,1.537,453,1.537,455,1.537,463,1.537,465,1.537,466,2.343,467,1.537,474,1.652,494,1.583,562,3.624,644,1.962,647,4.496,656,3.343,661,2.193,671,3.343,672,4.361,681,4.598,726,2.193,745,3.175,774,3.175,783,2.343,784,2.193,785,4.699,786,4.051,787,4.051,788,3.343,789,4.051,790,3.343,791,3.343,792,4.051,793,4.051,794,4.051,795,4.051,796,2.544,797,3.877,798,2.544,799,2.193,800,3.877,801,2.544,802,3.877,803,2.544,804,2.544,805,3.343,806,2.544,807,3.343,808,2.544,809,3.877,810,2.544,811,4.051,812,3.343,813,2.544,814,3.877,815,4.877,816,2.544,817,3.877,818,2.544,819,3.877,820,2.544,821,3.877,822,2.544,823,3.877,824,2.544,825,2.544,826,2.193,827,2.544,828,1.962,829,1.962,830,2.544,831,1.537,832,2.193,833,2.193,834,1.789,835,2.544,836,2.544,837,2.544,838,2.193,839,2.544,840,2.544,841,2.544,842,2.544,843,2.544,844,2.544,845,2.544,846,2.544,847,2.544,848,2.544,849,1.652,850,2.544,851,3.877,852,2.544,853,2.544,854,2.544,855,2.544,856,5.255,857,2.193,858,2.544,859,2.544,860,2.544,861,5.255,862,2.518,863,1.789,864,1.789,865,2.544,866,1.652,867,2.544,868,2.544,869,2.544,870,2.544,871,2.544,872,2.544,873,2.544,874,2.544,875,2.544,876,2.544,877,4.699,878,2.544,879,3.877,880,2.544,881,2.544,882,2.544,883,2.193,884,2.544,885,2.544,886,2.544,887,2.544,888,2.544,889,1.962,890,1.962,891,1.962,892,1.962]],["title/guards/RolesGuard.html",[49,2.131,403,2.906]],["body/guards/RolesGuard.html",[13,0.018,19,2.594,24,0.134,25,0.118,26,0.118,29,0.301,30,0.977,33,0.592,39,1.666,45,1.494,48,2.005,49,2.668,51,3.16,52,1.42,65,0.266,66,0.446,67,0.01,68,0.01,73,1.765,74,1.765,75,2.24,77,2.005,80,2.005,82,3.711,84,1.666,87,3.901,90,2.57,91,2.005,92,2.155,99,0.436,100,1.829,107,1.351,109,0.292,111,1.061,112,0.292,113,0.24,114,0.925,122,1.287,123,1.765,125,0.682,128,3.063,130,2.668,133,3.044,145,0.682,148,1.765,151,2.005,152,0.682,153,0.781,154,2.005,157,0.747,158,3.379,159,2.018,201,1.227,214,0.854,248,0.969,250,0.854,273,1.227,275,1.625,282,1.666,317,1.92,332,3.08,356,2.668,357,2.954,358,1.666,362,3.732,370,3.38,397,2.018,404,2.56,405,2.005,406,4.441,409,3.861,410,4.441,412,2.005,413,3.319,414,2.335,415,3.319,416,2.155,417,2.335,418,4.615,419,2.155,420,1.388,421,2.005,422,2.005,423,1.576,424,2.005,425,2.335,426,2.335,427,1.59,428,3.319,429,3.319,430,3.104,431,3.319,432,2.335,433,3.319,434,2.335,435,2.335,436,2.335,437,2.335,438,2.335,439,2.335,440,2.335,441,2.85,442,2.668,443,2.335,444,3.319,445,3.319,446,2.005,447,2.155,448,2.155,449,2.005,450,2.335,451,2.155,452,2.005,453,2.005,454,2.335,455,2.005,456,2.335,457,3.861,458,2.335,459,3.319,460,3.861,461,2.335,462,2.85,463,2.005,464,2.155,465,2.005,466,2.005,467,2.005,468,2.335,469,2.335,470,2.335,471,2.85,472,2.335,473,2.155,474,2.155,475,1.877,476,3.063,893,3.319,894,3.319,895,3.319]],["title/injectables/TasksService.html",[20,2.446,275,0.97]],["body/injectables/TasksService.html",[13,0.018,18,3.615,19,2.427,20,3.068,24,0.135,25,0.118,26,0.118,29,0.273,30,0.979,33,0.593,36,2.565,45,1.498,55,2.565,65,0.135,66,0.248,67,0.01,68,0.01,84,1.669,90,2.96,99,0.437,100,1.832,107,1.163,109,0.391,111,0.748,112,0.391,113,0.17,114,0.652,118,1.272,122,2.319,125,1.348,152,0.97,155,1.479,157,1.477,159,2.703,161,1.479,183,1.33,201,0.683,210,2.127,211,1.579,212,1.024,213,1.498,214,0.856,233,1.881,256,1.423,267,2.841,275,1.216,276,1.498,317,1.923,339,1.769,357,2.127,385,3.615,389,3.615,391,3.615,393,3.615,395,3.615,423,2.243,430,2.672,442,1.881,574,4.208,624,2.867,625,2.867,644,2.565,666,2.565,672,3.865,680,4.238,681,3.644,685,2.867,707,2.867,710,2.867,723,2.867,838,2.867,849,2.16,857,4.073,862,2.16,866,2.16,889,4.614,890,4.614,891,4.614,892,4.614,896,2.867,897,5.982,898,5.982,899,5.982,900,5.982,901,5.494,902,3.326,903,3.326,904,5.982,905,3.326,906,3.326,907,3.326,908,3.326,909,3.326,910,3.326,911,3.326,912,3.326,913,3.326,914,4.724,915,3.326,916,2.867,917,4.724,918,3.326,919,3.326,920,3.326,921,3.326,922,3.326,923,3.326,924,3.326,925,3.326,926,3.326,927,3.326,928,3.326,929,3.326,930,3.326,931,3.326,932,3.326,933,3.326,934,3.326,935,3.326,936,3.326,937,3.326,938,3.326,939,4.737,940,4.737,941,4.737,942,4.737,943,3.326,944,3.326,945,3.326,946,3.326,947,3.326,948,3.326,949,3.326,950,3.326,951,3.326,952,3.326,953,3.326,954,3.326,955,3.326,956,3.326,957,3.326,958,3.326,959,3.326,960,3.326,961,3.326,962,3.326,963,3.326,964,3.326,965,3.326,966,3.326,967,3.326,968,3.326,969,3.326,970,3.326,971,3.326,972,3.326,973,4.724,974,3.326,975,3.326,976,3.326,977,3.326,978,3.326,979,3.326,980,3.326,981,3.326,982,3.326,983,3.326,984,3.326,985,3.326,986,3.326,987,3.326,988,3.326,989,4.737,990,2.867,991,2.867,992,3.326,993,3.326,994,3.326,995,3.326,996,3.326]],["title/classes/ToggleActiveUserDto.html",[66,0.281,262,1.789]],["body/classes/ToggleActiveUserDto.html",[13,0.018,24,0.148,25,0.129,26,0.129,29,0.252,33,0.652,65,0.274,66,0.517,67,0.011,68,0.011,97,0.507,99,0.48,109,0.312,112,0.468,113,0.257,118,1.359,125,1.389,145,0.751,152,0.751,153,0.861,155,1.821,156,2.33,157,1.703,161,1.821,162,2.04,165,1.135,177,1.188,182,1.781,183,2.109,184,1.29,188,2.136,201,1.037,208,1.736,209,2.068,210,2.273,211,2.397,212,1.78,213,2.273,214,1.488,223,1.684,226,2.685,227,3.598,228,1.944,229,1.835,230,3.122,231,2.209,232,3.05,233,2.068,234,3.129,235,3.107,236,1.944,237,1.944,238,1.944,239,1.944,240,1.944,241,1.944,242,1.29,243,1.944,244,1.29,245,1.944,246,3.05,247,1.736,248,0.751,249,2.209,250,1.299,251,1.944,252,1.944,253,2.397,254,1.944,255,2.068,256,2.159,257,1.736,258,4.057,259,3.494,260,2.209,261,2.209,262,2.397,263,3.954,264,3.075,265,1.736,266,1.944,267,1.736,268,1.736,269,1.944,270,1.944,271,2.855,272,2.209,273,1.866,274,2.209,997,3.656,998,3.656]],["title/classes/UpdatePageRolesDto.html",[66,0.281,381,2.446]],["body/classes/UpdatePageRolesDto.html",[13,0.018,24,0.191,25,0.167,26,0.167,29,0.266,33,0.842,65,0.266,66,0.49,67,0.013,68,0.013,97,0.654,99,0.62,104,2.242,109,0.37,112,0.462,113,0.305,117,2.671,118,1.61,125,1.549,132,2.853,139,2.242,145,0.97,152,0.97,153,1.112,155,1.767,161,1.767,165,1.117,177,1.408,182,2.11,183,1.942,188,2.173,212,2.191,214,1.776,230,2.955,242,2.11,244,2.11,250,1.832,268,2.242,296,2.242,297,2.02,376,3.322,379,2.512,380,3.642,381,3.883,999,4.722,1000,4.722]],["title/classes/UpdateRolesToUserDto.html",[66,0.281,265,1.789]],["body/classes/UpdateRolesToUserDto.html",[13,0.018,24,0.148,25,0.129,26,0.129,29,0.252,33,0.65,65,0.274,66,0.517,67,0.011,68,0.011,97,0.505,99,0.479,109,0.312,112,0.468,113,0.257,118,1.356,125,1.49,145,0.749,152,0.749,153,0.858,155,1.82,156,2.329,157,1.695,161,1.82,162,1.778,165,1.135,177,1.186,182,1.778,183,2.12,184,2.038,188,2.135,201,1.035,208,1.732,209,2.063,210,2.269,211,2.393,212,1.777,213,2.269,214,1.486,223,1.683,226,2.68,227,3.596,228,1.94,229,1.83,230,3.12,231,2.204,232,3.045,233,2.063,234,3.126,235,3.104,236,1.94,237,1.94,238,1.94,239,1.94,240,1.94,241,1.94,242,1.287,243,1.94,244,1.287,245,1.94,246,3.045,247,1.732,248,0.749,249,2.204,250,1.297,251,1.94,252,1.94,253,2.393,254,1.94,255,2.063,256,2.156,257,1.732,258,4.055,259,3.489,260,2.204,261,2.204,262,1.732,263,3.045,264,3.071,265,2.393,266,1.94,267,1.732,268,1.732,269,1.94,270,1.94,271,2.851,272,2.204,273,1.863,274,2.204,1001,3.647,1002,3.647]],["title/classes/UpdateUserDto.html",[66,0.281,247,1.789]],["body/classes/UpdateUserDto.html",[13,0.018,24,0.148,25,0.129,26,0.129,29,0.252,33,0.651,65,0.274,66,0.517,67,0.011,68,0.011,97,0.506,99,0.479,109,0.312,112,0.468,113,0.257,118,1.358,125,1.389,145,0.75,152,0.75,153,0.859,155,1.82,156,2.33,157,1.686,161,1.82,162,1.78,165,1.137,177,1.187,182,1.78,183,2.12,184,1.78,188,2.136,201,1.187,208,1.734,209,2.065,210,2.271,211,2.395,212,1.778,213,2.271,214,1.487,220,2.816,223,1.684,226,2.683,227,3.597,228,1.942,229,1.833,230,3.121,231,2.206,232,3.048,233,2.065,234,3.127,235,3.105,236,1.942,237,1.942,238,1.942,239,1.942,240,1.942,241,1.942,242,1.288,243,1.942,244,1.288,245,1.942,246,3.048,247,2.395,248,0.75,249,2.206,250,1.684,251,1.942,252,1.942,253,3.105,254,1.942,255,2.065,256,2.158,257,1.734,258,3.825,259,3.492,260,2.206,261,2.206,262,1.734,263,3.048,264,2.683,265,1.734,266,1.942,267,1.734,268,1.734,269,1.942,270,1.942,271,2.853,272,2.206,273,1.865,274,2.206,1003,3.651,1004,3.651]],["title/modules/UserModule.html",[0,1.696,16,2.446]],["body/modules/UserModule.html",[0,3.088,2,2.768,3,2.944,4,3.379,5,3.379,6,2.944,7,4.453,8,4.453,13,0.018,16,4.98,19,2.754,21,4.125,22,3.379,23,2.944,24,0.211,25,0.184,26,0.184,28,3.379,29,0.302,30,1.532,39,2.612,45,2.343,51,2.861,52,2.226,65,0.211,66,0.388,67,0.014,68,0.014,82,3.593,84,2.612,783,4.501,1005,4.487,1006,4.487,1007,4.487,1008,4.943,1009,5.204,1010,4.487,1011,5.204]],["title/classes/UserOutput.html",[66,0.281,831,2.276]],["body/classes/UserOutput.html",[13,0.018,24,0.157,25,0.137,26,0.137,29,0.27,33,0.691,65,0.213,66,0.445,67,0.012,68,0.012,97,0.537,99,0.509,109,0.24,112,0.472,113,0.197,118,1.043,125,1.371,145,0.795,152,0.795,153,0.912,155,1.043,156,2.347,157,1.584,161,1.043,162,2.254,165,1.134,175,3.173,177,1.236,182,1.367,183,2.126,188,2.18,190,2.99,201,1.491,210,2.365,211,2.494,212,1.616,213,2.365,214,1.352,223,1.772,226,2.793,227,3.662,228,2.06,229,1.944,235,3.17,236,2.06,237,2.06,238,2.06,239,2.06,240,2.06,241,2.06,242,1.367,243,2.06,244,1.367,245,2.06,248,0.795,250,1.352,251,2.06,252,2.06,253,2.494,254,2.06,256,2.856,264,2.06,266,2.06,267,1.839,269,2.793,339,2.06,831,3.173,834,4.697,849,3.41,862,3.41,863,3.694,864,3.694,866,3.41,1012,2.988,1013,3.873,1014,2.988,1015,4.528,1016,3.339,1017,3.339,1018,3.339,1019,3.339,1020,3.339,1021,3.339,1022,3.339,1023,3.339]],["title/classes/Users.html",[66,0.281,256,1.612]],["body/classes/Users.html",[13,0.018,24,0.12,25,0.105,26,0.105,29,0.245,33,0.53,65,0.176,66,0.385,67,0.01,68,0.01,97,0.412,99,0.39,109,0.449,112,0.476,113,0.37,114,1.313,118,1.951,125,1.403,145,0.611,152,0.611,153,0.7,155,0.8,156,2.367,157,1.631,161,0.8,162,2.229,165,1.139,175,2.633,177,1.026,182,2.41,183,2.16,184,2.558,188,2.071,190,2.589,201,1.5,210,2.723,211,2.871,212,1.861,213,2.723,214,1.556,215,4.254,216,2.564,218,2.564,220,3.978,222,2.564,223,1.723,226,2.318,227,3.36,228,1.582,229,1.492,235,2.871,236,1.582,237,1.582,238,1.582,239,1.582,240,1.582,241,1.582,242,1.049,243,1.582,244,1.049,245,1.582,248,0.611,250,1.556,251,1.582,252,1.582,253,2.871,254,1.582,256,2.587,264,2.318,266,1.582,267,1.412,269,3.216,339,2.318,831,1.797,834,3.066,849,3.926,862,3.926,863,4.254,864,4.254,866,3.926,1012,2.294,1014,2.294,1015,3.757,1016,2.564,1017,2.564,1018,2.564,1019,2.564,1020,2.564,1021,2.564,1022,2.564,1023,2.564,1024,2.974,1025,2.974,1026,2.974,1027,2.974,1028,2.974,1029,2.974,1030,2.974,1031,2.974,1032,2.974,1033,2.974,1034,2.974,1035,2.974,1036,2.974,1037,2.974,1038,2.974]],["title/classes/UsersResolver.html",[66,0.281,1008,2.446]],["body/classes/UsersResolver.html",[13,0.018,24,0.145,25,0.081,26,0.081,29,0.263,30,0.675,33,0.409,65,0.093,66,0.171,67,0.008,68,0.008,90,3.098,97,0.318,99,0.301,100,1.387,107,0.564,109,0.422,111,1.533,112,0.477,113,0.374,114,1.336,118,1.809,122,2.606,123,3.286,125,0.471,133,2.716,141,5.473,142,5.473,143,4.122,144,3.794,145,0.471,147,1.976,148,1.219,154,1.385,155,1.809,156,1.998,157,1.39,158,3.191,159,2.875,161,1.809,162,0.809,165,0.523,171,1.976,184,2.686,195,1.053,200,3.712,201,0.735,208,2.561,234,1.15,247,2.561,256,2.445,257,3.235,262,2.561,265,2.561,267,1.699,475,3.233,562,4.409,647,4.346,745,3.259,774,3.259,783,3.005,786,1.976,787,4.928,788,4.288,789,4.288,790,3.085,791,4.928,792,4.288,793,4.288,794,4.928,795,4.928,799,3.085,805,1.976,807,1.976,811,3.085,812,1.976,815,5.326,826,1.976,828,1.768,829,1.768,831,2.162,832,1.976,833,1.976,889,5.008,890,5.008,891,5.008,892,4.16,939,4.65,940,3.085,941,4.65,942,3.085,1008,2.323,1010,1.976,1014,1.768,1039,1.976,1040,5.716,1041,4.401,1042,2.292,1043,2.292,1044,3.578,1045,2.292,1046,6.492,1047,6.178,1048,2.292,1049,4.401,1050,2.292,1051,2.292,1052,5.716,1053,3.578,1054,2.292,1055,3.578,1056,2.292,1057,2.292,1058,3.578,1059,2.292,1060,2.292,1061,3.578,1062,2.292,1063,5.716,1064,4.401,1065,2.292,1066,2.292,1067,2.292,1068,2.292,1069,3.578,1070,2.292,1071,2.292,1072,2.292,1073,2.292,1074,2.292,1075,2.292,1076,2.292,1077,2.292,1078,1.976,1079,2.292,1080,2.292,1081,2.292,1082,2.292,1083,2.292,1084,2.292,1085,2.292,1086,2.292,1087,2.292,1088,4.401,1089,2.292,1090,5.394,1091,2.292,1092,2.292,1093,2.292,1094,2.292,1095,2.292,1096,2.292,1097,2.292,1098,2.292,1099,2.292,1100,2.292,1101,2.292,1102,3.578,1103,2.292]],["title/coverage.html",[1104,3.975]],["body/coverage.html",[6,1.996,13,0.018,17,2.133,18,2.133,19,1.305,20,2.292,26,0.125,49,1.996,66,0.586,67,0.011,68,0.011,72,2.292,73,1.877,74,1.877,75,1.676,98,3.043,113,0.18,117,1.996,121,1.771,132,2.133,135,1.771,148,1.877,149,1.877,150,1.877,152,0.725,175,2.133,176,3.8,200,2.292,208,1.676,209,3.785,247,1.676,256,1.51,257,1.676,262,1.676,265,1.676,270,1.877,275,1.855,277,3.8,317,1.437,355,2.292,376,3.992,381,2.292,382,3.903,397,1.51,403,3.8,405,4.043,420,1.039,423,1.676,462,2.133,475,1.996,480,1.305,481,2.871,482,2.871,489,1.305,494,1.189,497,1.245,499,1.305,501,1.305,503,1.305,505,1.305,507,1.305,509,1.305,511,1.305,513,1.305,560,2.292,561,3.043,574,5.608,607,3.043,608,3.043,641,3.043,658,2.722,745,2.133,746,4.831,754,2.483,757,2.483,760,2.483,763,2.483,768,2.483,774,2.133,777,3.043,778,3.043,783,2.133,784,3.043,831,2.133,896,3.043,1008,2.292,1012,3.8,1039,3.043,1078,3.043,1104,2.722,1105,3.043,1106,3.529,1107,3.529,1108,4.926,1109,7.626,1110,7.208,1111,7.285,1112,6.141,1113,7.454,1114,3.043,1115,3.529,1116,3.529,1117,4.926,1118,4.926,1119,3.529,1120,3.043,1121,3.043,1122,3.043,1123,3.529,1124,3.043,1125,3.529,1126,3.529]],["title/dependencies.html",[3,2.565,1127,2.707]],["body/dependencies.html",[3,2.87,13,0.018,30,1.493,33,0.905,36,3.914,39,2.547,41,4.375,42,4.375,48,3.066,52,2.171,66,0.467,67,0.014,68,0.014,80,3.066,87,2.87,113,0.259,145,1.042,195,2.14,229,2.547,302,4.825,416,4.403,423,2.41,536,4.375,568,3.914,616,4.375,828,5.231,829,3.914,1128,5.075,1129,5.075,1130,6.255,1131,6.781,1132,5.075,1133,5.075,1134,5.075,1135,5.075,1136,5.075,1137,5.075,1138,5.075,1139,5.075,1140,5.075,1141,6.255,1142,5.075,1143,5.075,1144,5.075,1145,5.075,1146,5.075,1147,5.075,1148,5.075,1149,5.075,1150,5.075,1151,5.075,1152,5.075,1153,5.075,1154,5.075,1155,5.075,1156,4.375,1157,5.075,1158,5.075,1159,5.075,1160,5.075,1161,5.075,1162,5.075,1163,5.075,1164,5.075,1165,5.075,1166,5.075,1167,5.075]],["title/miscellaneous/functions.html",[1168,2.209,1169,3.909]],["body/miscellaneous/functions.html",[6,4.145,13,0.015,67,0.015,68,0.015,99,0.8,1114,5.255,1168,4.288,1169,5.255,1170,6.096]],["title/index.html",[99,0.412,1171,3.14,1172,3.14]],["body/index.html",[13,0.017,23,3.978,25,0.148,55,3.216,61,3.881,67,0.012,68,0.012,183,1.173,192,3.216,308,2.707,325,4.35,471,2.519,549,4.756,584,6.278,585,3.594,752,3.216,916,4.756,1104,3.216,1105,4.756,1173,4.169,1174,4.169,1175,6.183,1176,5.517,1177,4.169,1178,4.169,1179,4.169,1180,5.517,1181,6.183,1182,4.169,1183,4.169,1184,6.58,1185,4.169,1186,6.58,1187,7.282,1188,4.169,1189,7.173,1190,4.169,1191,4.169,1192,4.169,1193,4.169,1194,4.169,1195,6.183,1196,4.169,1197,5.517,1198,4.169,1199,4.169,1200,4.169,1201,4.169,1202,4.169,1203,6.58,1204,7.032,1205,3.594,1206,5.517,1207,4.169,1208,4.169,1209,4.169,1210,4.169,1211,7.032,1212,6.58,1213,4.169,1214,5.517,1215,4.169,1216,4.169,1217,4.756,1218,7.032,1219,6.58,1220,4.169,1221,5.517,1222,4.169,1223,4.169,1224,4.169,1225,4.169,1226,6.58,1227,4.169,1228,4.169,1229,4.169,1230,4.169,1231,5.517,1232,4.169,1233,4.169,1234,4.169,1235,4.169,1236,4.169,1237,5.517,1238,4.169,1239,4.169,1240,4.169,1241,5.517,1242,4.169,1243,4.169,1244,5.673,1245,5.517,1246,4.169,1247,4.169,1248,4.169,1249,4.169,1250,4.169,1251,4.169,1252,4.169,1253,4.169,1254,5.517,1255,4.169,1256,3.594,1257,4.169,1258,4.169,1259,4.169,1260,4.169,1261,4.169,1262,4.169,1263,4.169,1264,5.517,1265,4.169,1266,4.169,1267,4.169,1268,4.169,1269,5.517,1270,4.169,1271,4.169,1272,4.169,1273,5.517,1274,5.517,1275,4.169,1276,4.169,1277,4.169,1278,4.169,1279,4.169,1280,4.169,1281,4.169,1282,4.169,1283,4.169,1284,4.169,1285,3.594,1286,4.169,1287,4.169,1288,4.169,1289,4.169,1290,4.169,1291,4.169,1292,3.594]],["title/modules.html",[2,2.741]],["body/modules.html",[1,4.148,2,3.136,12,3.829,13,0.015,14,3.829,15,3.829,16,3.829,67,0.015,68,0.015,1244,6.415,1256,5.083,1293,7.44,1294,7.44,1295,7.572,1296,5.896]],["title/overview.html",[1297,4.443]],["body/overview.html",[0,2.205,1,5.531,2,2.604,3,2.769,4,3.179,5,3.179,6,2.769,7,3.179,8,3.179,9,4.221,10,4.221,11,4.221,12,5.016,13,0.017,14,4.333,15,4.672,16,4.887,17,4.032,18,4.032,19,2.66,20,4.333,21,3.973,22,3.179,23,2.769,67,0.014,68,0.014,69,4.221,70,4.221,71,4.221,72,4.539,73,3.549,74,3.549,75,3.169,97,0.679,276,2.205,339,2.604,404,3.776,560,4.333,586,4.221,587,4.221,783,4.032,1005,4.221,1006,4.221,1007,4.221,1008,4.539,1297,4.221,1298,4.896,1299,4.896,1300,4.896]],["title/properties.html",[177,1.067,1127,2.707]],["body/properties.html",[13,0.017,67,0.015,68,0.015,177,1.421,183,1.699,770,4.656,1156,5.204,1285,5.204,1292,5.204,1301,6.036,1302,6.036,1303,6.036]],["title/miscellaneous/variables.html",[367,3.19,1168,2.209]],["body/miscellaneous/variables.html",[13,0.018,19,1.27,23,1.943,51,1.547,67,0.008,68,0.008,90,2.142,99,0.286,103,1.679,112,0.346,113,0.268,125,0.447,130,1.231,133,0.931,152,0.706,155,0.586,158,3.359,159,2.251,161,0.586,165,0.983,178,1.531,179,1.531,180,1.531,181,0.56,202,1.679,212,1.488,253,1.033,258,1.231,271,1.231,273,1.787,282,1.724,296,3.037,297,3.195,315,3.401,317,2.774,332,2.068,334,1.679,339,1.157,367,1.531,405,1.315,423,1.631,430,1.943,442,1.231,462,2.076,471,1.315,473,2.764,475,1.943,476,2.231,496,0.844,614,4.167,623,2.65,647,1.531,658,2.65,666,1.679,672,1.531,680,1.679,705,1.876,717,1.876,718,1.876,719,1.876,722,3.669,746,1.531,747,1.679,748,1.679,749,1.679,750,2.65,753,2.65,754,2.417,756,3.728,757,2.417,759,2.65,760,2.417,762,3.283,763,2.417,767,2.65,768,2.417,773,4.059,775,4.059,776,4.059,834,1.531,849,1.413,862,1.413,863,1.531,864,1.531,866,1.413,883,1.876,989,4.537,990,2.962,991,4.537,1120,1.876,1121,1.876,1122,2.962,1124,1.876,1168,1.531,1205,4.167,1217,4.537,1304,2.176,1305,2.176,1306,3.435,1307,5.262,1308,2.176,1309,4.834,1310,2.176,1311,2.176,1312,2.176,1313,2.176,1314,2.176,1315,2.176,1316,2.176,1317,2.176,1318,2.176,1319,2.176,1320,2.176,1321,2.176,1322,2.176,1323,2.176,1324,2.176,1325,2.176,1326,2.176,1327,2.176,1328,2.176,1329,2.176,1330,2.176,1331,2.176,1332,2.176,1333,2.176,1334,2.176,1335,2.176,1336,2.176,1337,2.176,1338,2.176,1339,2.176,1340,2.176,1341,2.176,1342,2.176,1343,2.176,1344,2.176,1345,2.176,1346,2.176,1347,2.176,1348,2.176,1349,2.176,1350,2.176,1351,2.176,1352,2.176,1353,2.176,1354,2.176,1355,2.176,1356,5.593,1357,3.435,1358,3.435,1359,3.435,1360,3.435,1361,2.176,1362,2.176,1363,2.176,1364,5.262,1365,2.176,1366,2.176,1367,2.176,1368,2.176,1369,2.176,1370,2.176,1371,2.176,1372,2.176,1373,3.435,1374,2.176,1375,2.176,1376,2.176,1377,2.176,1378,4.256,1379,4.834,1380,3.435,1381,3.435,1382,3.435,1383,3.435,1384,3.435,1385,2.176,1386,2.176,1387,3.435,1388,2.176,1389,4.256,1390,2.176,1391,2.176,1392,3.435,1393,2.176,1394,2.176,1395,2.176,1396,2.176,1397,2.176,1398,2.176,1399,2.176,1400,2.176,1401,2.176,1402,2.176,1403,2.176,1404,4.256,1405,2.176,1406,2.176,1407,2.176,1408,2.176,1409,2.176,1410,2.176,1411,2.176,1412,2.176,1413,2.176,1414,3.435,1415,3.435,1416,2.176,1417,2.176,1418,2.176,1419,2.176,1420,2.176,1421,2.176,1422,2.176,1423,2.176,1424,2.176,1425,3.435,1426,2.176,1427,4.256,1428,3.435,1429,2.176,1430,2.176,1431,2.176,1432,2.176,1433,2.176,1434,2.176,1435,2.176,1436,2.176,1437,2.176,1438,2.176,1439,2.176,1440,2.176,1441,2.176,1442,3.435,1443,2.176,1444,2.176,1445,3.435,1446,3.435,1447,2.176,1448,2.176,1449,3.435,1450,2.176,1451,2.176,1452,2.176,1453,2.176,1454,2.176]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":574,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1302,"title":{},"body":{"properties.html":{}}}],["0.1.6",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":680,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1299,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["10.4.9",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["1000000",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.2.2",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["16.9.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["17.0.0",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":339,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.1.2",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["256",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":666,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["3.3.0",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35",{"_index":1300,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["4.11.2",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["4.21.2",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1298,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":622,"title":{},"body":{"injectables/MailerService.html":{}}}],["6.10.0",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":353,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["9.0.9",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":334,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"miscellaneous/variables.html":{}}}],["__dirname.charat(0).touppercase",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":399,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{}}}],["accesstoken",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activationusers",{"_index":799,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["activationusers.ids",{"_index":868,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["activationusers.state",{"_index":867,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["activationusersids",{"_index":1049,"title":{},"body":{"classes/UsersResolver.html":{}}}],["active",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["admin",{"_index":857,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["algorithm",{"_index":692,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["allowing",{"_index":1232,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1279,"title":{},"body":{"index.html":{}}}],["apollo/server",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":535,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["apollodriverconfig",{"_index":534,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["app_guard",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["appendfilesync",{"_index":303,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["appendfilesync(filename",{"_index":354,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["application",{"_index":1204,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1180,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["args('queries",{"_index":1082,"title":{},"body":{"classes/UsersResolver.html":{}}}],["args('query",{"_index":1084,"title":{},"body":{"classes/UsersResolver.html":{}}}],["async",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":624,"title":{},"body":{"injectables/MailerService.html":{},"injectables/TasksService.html":{}}}],["auth.controller",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.model",{"_index":151,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["auth.model.dto",{"_index":146,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["auth.prisma.service",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["auth/jwt.strategy",{"_index":1077,"title":{},"body":{"classes/UsersResolver.html":{}}}],["authentication",{"_index":1080,"title":{},"body":{"classes/UsersResolver.html":{}}}],["authmodule",{"_index":12,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1285,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1081,"title":{},"body":{"classes/UsersResolver.html":{}}}],["authresolver",{"_index":72,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{},"overview.html":{}}}],["authservice",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{}}}],["autoschemafile",{"_index":540,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["available",{"_index":1296,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["avatarimage",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["avatarpath",{"_index":883,"title":{},"body":{"injectables/PrismaUsersService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":159,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1221,"title":{},"body":{"index.html":{}}}],["b",{"_index":743,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["backers",{"_index":1280,"title":{},"body":{"index.html":{}}}],["bad_gateway",{"_index":515,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["bad_request",{"_index":495,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["badgatewaymessage",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestmessage",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base/base",{"_index":1014,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["base/prismaquery",{"_index":833,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["base/services/error",{"_index":421,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["base/services/kafka.hr",{"_index":591,"title":{},"body":{"modules/KafkaModule.html":{}}}],["base/services/prisma",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{}}}],["based",{"_index":1216,"title":{},"body":{"index.html":{}}}],["basequery",{"_index":175,"title":{"classes/BaseQuery.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"coverage.html":{}}}],["bases/modules/graphql",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["bases/modules/kafka",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["bases/services/prisma",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["bcript.comparesync(password",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcript.gensalt(10",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcript.hash(password",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["bigint(1",{"_index":714,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["board",{"_index":1272,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":162,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brokers",{"_index":597,"title":{},"body":{"modules/KafkaModule.html":{}}}],["browse",{"_index":1295,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1293,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.concat",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":1176,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":406,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":409,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":452,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["cbc",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changeactivation",{"_index":1040,"title":{},"body":{"classes/UsersResolver.html":{}}}],["changeactivation(activationusersids",{"_index":1045,"title":{},"body":{"classes/UsersResolver.html":{}}}],["changeactivationusers",{"_index":785,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["changeactivationusers(activationusers",{"_index":797,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["channel",{"_index":1247,"title":{},"body":{"index.html":{}}}],["check",{"_index":1211,"title":{},"body":{"index.html":{}}}],["cipher",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cipher.final('hex",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cipher.update(text",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":66,"title":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":97,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"overview.html":{}}}],["clicks",{"_index":1231,"title":{},"body":{"index.html":{}}}],["client",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"modules/KafkaModule.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{}}}],["client.ts",{"_index":778,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["client.ts:6",{"_index":780,"title":{},"body":{"injectables/PrismaService.html":{}}}],["clientid",{"_index":595,"title":{},"body":{"modules/KafkaModule.html":{}}}],["clientkafka",{"_index":564,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["clientsmodule",{"_index":589,"title":{},"body":{"modules/KafkaModule.html":{}}}],["clientsmodule.register",{"_index":592,"title":{},"body":{"modules/KafkaModule.html":{}}}],["cloud",{"_index":1215,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_kafkamodule",{"_index":586,"title":{},"body":{"modules/KafkaModule.html":{},"overview.html":{}}}],["cluster_kafkamodule_providers",{"_index":587,"title":{},"body":{"modules/KafkaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1005,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1006,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1007,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cmd",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":492,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["come",{"_index":1238,"title":{},"body":{"index.html":{}}}],["command",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comparehash",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{}}}],["configservice.get('expire_time",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_refreshtoken_secret",{"_index":438,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["configservice.get('jwt_secret",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["configure",{"_index":529,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["configure(consumer",{"_index":530,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["conflict",{"_index":504,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["conflictmessage",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consolelogger",{"_index":278,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["const",{"_index":332,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["constructor(authservice",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(configservice",{"_index":426,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["constructor(jwtservice",{"_index":407,"title":{},"body":{"guards/GqlAuthGuard.html":{}}}],["constructor(kafkahumanresourceservice",{"_index":563,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["constructor(message",{"_index":484,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["constructor(prismarequestservice",{"_index":1042,"title":{},"body":{"classes/UsersResolver.html":{}}}],["constructor(prismaservice",{"_index":644,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":154,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{}}}],["constructor(reflector",{"_index":893,"title":{},"body":{"guards/RolesGuard.html":{}}}],["consts",{"_index":152,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consts.accesstoken",{"_index":400,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.avatarimage",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["consts.avatarpath",{"_index":1021,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.count",{"_index":203,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["consts.createdate",{"_index":1018,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.deletedate",{"_index":1019,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.duplicated",{"_index":844,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["consts.emailrequiredmessage",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.freediskspace",{"_index":995,"title":{},"body":{"injectables/TasksService.html":{}}}],["consts.ids",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["consts.isactive",{"_index":1022,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.isdeleted",{"_index":1023,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.limitationdiskspacewarning",{"_index":996,"title":{},"body":{"injectables/TasksService.html":{}}}],["consts.lockdownuser",{"_index":676,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.loginparamsisnotvalid",{"_index":682,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.menudescription",{"_index":388,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menulink",{"_index":386,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuname",{"_index":387,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuparentid",{"_index":394,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menupersianname",{"_index":390,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuroles",{"_index":396,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuselfid",{"_index":392,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.minlengthofpassword",{"_index":1017,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.pagenumber",{"_index":206,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["consts.pagesize",{"_index":205,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["consts.passwordrequiredmessage",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.phonerequiredmessage",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.refreshtoken",{"_index":402,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.revertdate",{"_index":1020,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.roles",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.successfullylogout",{"_index":168,"title":{},"body":{"classes/AuthResolver.html":{}}}],["consts.totalcount",{"_index":204,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["consts.unauthorized",{"_index":447,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["consts.updatedate",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.userid",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["consts.useridisrequired",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.usernamerequiredmessage",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.usernotexist",{"_index":663,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.wrongincomingparameters",{"_index":734,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.youcannotremoveadminusers",{"_index":859,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["consts.yournationalcode",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.yourpassword",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.yourrealemail",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.yourrealphone",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.youruseridentifier",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.yourusername",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consumer",{"_index":533,"title":{},"body":{"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{}}}],["consumer.apply(graphqlloggingmiddleware).forroutes('/graphql",{"_index":551,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["context",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":459,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["context.req",{"_index":872,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["context.req.cookies",{"_index":873,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["context.req.cookies['jwt",{"_index":874,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["context.req.cookies['jwt'].trim",{"_index":888,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["cookie",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["copyofuser",{"_index":669,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["copyofuser.id",{"_index":670,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["count",{"_index":202,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"miscellaneous/variables.html":{}}}],["counter",{"_index":200,"title":{"classes/Counter.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["courses",{"_index":1253,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1104,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["create_personnel",{"_index":571,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["createcipheriv('aes",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdate",{"_index":849,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["createdecipheriv('aes",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createmany",{"_index":920,"title":{},"body":{"injectables/TasksService.html":{}}}],["createpagesforinitialdeployment",{"_index":897,"title":{},"body":{"injectables/TasksService.html":{}}}],["createuser",{"_index":562,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["createuser(payload",{"_index":566,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["createuser(user",{"_index":800,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["createuser(usermodel",{"_index":1050,"title":{},"body":{"classes/UsersResolver.html":{}}}],["createuserdto",{"_index":208,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["createwritestream",{"_index":827,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["cron",{"_index":908,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_day_at_1am",{"_index":904,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":909,"title":{},"body":{"injectables/TasksService.html":{}}}],["csrfprevention",{"_index":545,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["ctr",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext",{"_index":445,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["ctx.req",{"_index":717,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.cookies",{"_index":718,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.cookies['jwt",{"_index":719,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.cookies['jwt'].length",{"_index":720,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["ctx.res.clearcookie('jwt",{"_index":725,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["cursor",{"_index":747,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":193,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["customlogger",{"_index":17,"title":{"injectables/CustomLogger.html":{}},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger('graphql",{"_index":360,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["d",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["daily",{"_index":983,"title":{},"body":{"injectables/TasksService.html":{}}}],["dailylogincounter",{"_index":707,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["darwin",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":672,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["datanotfound",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":315,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":681,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["date().tolocalestring('fa",{"_index":318,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["date(date",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setdate(newdate.getdate",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setfullyear(newdate.getfullyear",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).sethours(newdate.gethours",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setminutes(newdate.getminutes",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setmonth(newdate.getmonth",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date_1).getutcminutes",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date_2).getutcminutes",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":366,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["date_1",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date_2",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dateitem_1",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dateitem_2",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestyle",{"_index":326,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["datetime",{"_index":658,"title":{},"body":{"injectables/PrismaAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datetime.getdifftime(new",{"_index":667,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["day",{"_index":347,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["debug",{"_index":281,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":285,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["decipher",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decipher.final",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decipher.update(buffer.from(text",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoratornotroles",{"_index":460,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["decoratornotroles.some((y",{"_index":472,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["decoratorroles",{"_index":457,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["decorators",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["decript",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decryptedtext",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decryptedtext.tostring",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeper",{"_index":1249,"title":{},"body":{"index.html":{}}}],["default",{"_index":296,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{},"miscellaneous/variables.html":{}}}],["defaultargs",{"_index":771,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["defaultstrategy",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["defaultvalue",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["defined",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["delete",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["deletedate",{"_index":863,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["deletedusers",{"_index":1063,"title":{},"body":{"classes/UsersResolver.html":{}}}],["deleteuserdto",{"_index":257,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["deleteuserpermanently",{"_index":1061,"title":{},"body":{"classes/UsersResolver.html":{}}}],["deleteusers",{"_index":811,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["deleteusers.ids",{"_index":856,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["deleteusersids",{"_index":1088,"title":{},"body":{"classes/UsersResolver.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1203,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1220,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":916,"title":{},"body":{"injectables/TasksService.html":{},"index.html":{}}}],["deploywith",{"_index":1230,"title":{},"body":{"index.html":{}}}],["description",{"_index":183,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1190,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1259,"title":{},"body":{"index.html":{}}}],["devtoolsmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["devtoolsmodule.register",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["df",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["digit",{"_index":340,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["discord",{"_index":1246,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":748,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["dive",{"_index":1248,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1105,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driveletter",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["driver",{"_index":539,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["duplicated",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1198,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1177,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1209,"title":{},"body":{"index.html":{}}}],["email",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["emailrequiredmessage",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encoding",{"_index":351,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["encript",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encrypted",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endregion",{"_index":161,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["ensure",{"_index":1207,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1263,"title":{},"body":{"index.html":{}}}],["enum",{"_index":194,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["enumroles",{"_index":199,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["equal",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equals",{"_index":705,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":282,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":289,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["example",{"_index":1186,"title":{},"body":{"index.html":{}}}],["example/blob/master/src/app.controller.ts",{"_index":582,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["exec(cmd",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":410,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["existdata",{"_index":973,"title":{},"body":{"injectables/TasksService.html":{}}}],["existpages",{"_index":917,"title":{},"body":{"injectables/TasksService.html":{}}}],["existssync",{"_index":304,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["existssync(filename",{"_index":349,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["existssync(pathname",{"_index":342,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["existuser",{"_index":656,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["existuser.id",{"_index":675,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.lockdowndate",{"_index":668,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.password",{"_index":679,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.roles",{"_index":687,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.username",{"_index":686,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.wrongpasswordcounter",{"_index":665,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuserauth",{"_index":722,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["existuserauth.id",{"_index":724,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuserauth.refreshtoken",{"_index":731,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuserauth.userid",{"_index":732,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["experience",{"_index":1251,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PrismaAuthService.html":{}}}],["export",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":302,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["extensions",{"_index":491,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["extractjwt",{"_index":414,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["extractjwt.fromextractors",{"_index":429,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["extrainfo",{"_index":981,"title":{},"body":{"injectables/TasksService.html":{}}}],["false",{"_index":157,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["family",{"_index":575,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["fast",{"_index":1224,"title":{},"body":{"index.html":{}}}],["features",{"_index":1234,"title":{},"body":{"index.html":{}}}],["few",{"_index":1226,"title":{},"body":{"index.html":{}}}],["field",{"_index":188,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["field((type",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["field(type",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/Users.html":{}}}],["field(undefined",{"_index":182,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["file",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["filename",{"_index":345,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["fileupload",{"_index":815,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["fileupload.createreadstream().pipe(createwritestream(localpath",{"_index":882,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["findadminfromids",{"_index":854,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["findadminfromids.length",{"_index":858,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["first",{"_index":197,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["focus",{"_index":1233,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1267,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":493,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["forbiddenmessage",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forgot",{"_index":379,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/UpdatePageRolesDto.html":{}}}],["forgotmodel",{"_index":169,"title":{},"body":{"classes/AuthResolver.html":{}}}],["forgotpassword",{"_index":101,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["forgotpassword(forgotpasswordmodel",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["forgotpassworddto",{"_index":117,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["forgotpasswordmodel",{"_index":121,"title":{"classes/ForgotPasswordModel.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["forgotpasswordmodel.username",{"_index":733,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["framework",{"_index":1175,"title":{},"body":{"index.html":{}}}],["free",{"_index":989,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["freediskspace",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs",{"_index":307,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{}}}],["full",{"_index":1262,"title":{},"body":{"index.html":{}}}],["function",{"_index":1078,"title":{},"body":{"classes/UsersResolver.html":{},"coverage.html":{}}}],["functions",{"_index":1169,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1229,"title":{},"body":{"index.html":{}}}],["gateway/src/app.controller.ts",{"_index":580,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["getallusersbyquery",{"_index":786,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getallusersbyquery(queries",{"_index":802,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["getalluserswithquery",{"_index":1058,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getdifftime",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdrivesize",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getnumberfromstring",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getpages",{"_index":642,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["getpages(context",{"_index":648,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["getroles",{"_index":102,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["getting",{"_index":1171,"title":{"index.html":{}},"body":{}}],["getuserbyquery",{"_index":787,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserbyquery(query",{"_index":805,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserinfo",{"_index":788,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserinfo(@context",{"_index":1099,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getuserinfo(context",{"_index":807,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserinfofromcontext",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusersbyquery",{"_index":1041,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getusersbyquery(query",{"_index":1057,"title":{},"body":{"classes/UsersResolver.html":{}}}],["gqlauthguard",{"_index":148,"title":{"guards/GqlAuthGuard.html":{}},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":417,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":444,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["graph",{"_index":1256,"title":{},"body":{"index.html":{},"modules.html":{}}}],["graphql",{"_index":195,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["graphqlbadgatewayexception",{"_index":480,"title":{"classes/GraphQlBadGatewayException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlbadrequestexception",{"_index":494,"title":{"classes/GraphQlBadRequestException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"coverage.html":{}}}],["graphqlconflictexception",{"_index":503,"title":{"classes/GraphQlConflictException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlerror",{"_index":483,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["graphqlerroroptions",{"_index":487,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["graphqlforbiddenexception",{"_index":489,"title":{"classes/GraphQlForbiddenException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlinternalservererrorexception",{"_index":509,"title":{"classes/GraphQlInternalServerErrorException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlloggingmiddleware",{"_index":355,"title":{"injectables/GraphQLLoggingMiddleware.html":{}},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"coverage.html":{}}}],["graphqlmethodnotallowedexception",{"_index":513,"title":{"classes/GraphQlMethodNotAllowedException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":14,"title":{"modules/GraphqlModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"modules.html":{},"overview.html":{}}}],["graphqlmodule.forroot",{"_index":538,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["graphqlnotacceptableexception",{"_index":499,"title":{"classes/GraphQlNotAcceptableException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlnotfoundexception",{"_index":497,"title":{"classes/GraphQlNotFoundException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["graphqlnotimplementedexception",{"_index":511,"title":{"classes/GraphQlNotImplementedException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlpayloadtoolargeexception",{"_index":505,"title":{"classes/GraphQlPayloadTooLargeException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlrequesttimeoutexception",{"_index":501,"title":{"classes/GraphQlRequestTimeoutException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlscalartype",{"_index":773,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["graphqlschemabuildermodule",{"_index":537,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["graphqlunauthorizedexception",{"_index":420,"title":{"classes/GraphQlUnauthorizedException.html":{}},"body":{"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["graphqlunsupportedmediatypeexception",{"_index":507,"title":{"classes/GraphQlUnsupportedMediaTypeException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["groupid",{"_index":599,"title":{},"body":{"modules/KafkaModule.html":{}}}],["grow",{"_index":1276,"title":{},"body":{"index.html":{}}}],["guard",{"_index":403,"title":{"guards/GqlAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":404,"title":{},"body":{"guards/GqlAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["h",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":422,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["handler.ts",{"_index":482,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["handler.ts:101",{"_index":524,"title":{},"body":{"classes/GraphQlPayloadTooLargeException.html":{}}}],["handler.ts:115",{"_index":527,"title":{},"body":{"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["handler.ts:129",{"_index":519,"title":{},"body":{"classes/GraphQlInternalServerErrorException.html":{}}}],["handler.ts:143",{"_index":523,"title":{},"body":{"classes/GraphQlNotImplementedException.html":{}}}],["handler.ts:157",{"_index":520,"title":{},"body":{"classes/GraphQlMethodNotAllowedException.html":{}}}],["handler.ts:17",{"_index":516,"title":{},"body":{"classes/GraphQlBadRequestException.html":{}}}],["handler.ts:171",{"_index":488,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{}}}],["handler.ts:3",{"_index":518,"title":{},"body":{"classes/GraphQlForbiddenException.html":{}}}],["handler.ts:31",{"_index":526,"title":{},"body":{"classes/GraphQlUnauthorizedException.html":{}}}],["handler.ts:45",{"_index":522,"title":{},"body":{"classes/GraphQlNotFoundException.html":{}}}],["handler.ts:59",{"_index":521,"title":{},"body":{"classes/GraphQlNotAcceptableException.html":{}}}],["handler.ts:73",{"_index":525,"title":{},"body":{"classes/GraphQlRequestTimeoutException.html":{}}}],["handler.ts:87",{"_index":517,"title":{},"body":{"classes/GraphQlConflictException.html":{}}}],["hands",{"_index":1250,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1239,"title":{},"body":{"index.html":{}}}],["harddeleteusers",{"_index":789,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["harddeleteusers(deletedusers",{"_index":1060,"title":{},"body":{"classes/UsersResolver.html":{}}}],["harddeleteusers(deleteusers",{"_index":809,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["hash",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasnotroles",{"_index":462,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["haspermission",{"_index":1064,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasroles",{"_index":475,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hasroles(['undefined",{"_index":1046,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasroles([roles.demo",{"_index":1090,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasuseractionpermission",{"_index":790,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["hasuseractionpermission(@context",{"_index":1101,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasuseractionpermission(context",{"_index":812,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["headerinfo",{"_index":463,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["headerinfo.sub",{"_index":467,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["help",{"_index":1254,"title":{},"body":{"index.html":{}}}],["here",{"_index":1283,"title":{},"body":{"index.html":{}}}],["hex",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hideschemadetailsfromclienterrors",{"_index":546,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["home",{"_index":921,"title":{},"body":{"injectables/TasksService.html":{}}}],["host",{"_index":619,"title":{},"body":{"injectables/MailerService.html":{}}}],["hr",{"_index":596,"title":{},"body":{"modules/KafkaModule.html":{}}}],["hr_consumer",{"_index":600,"title":{},"body":{"modules/KafkaModule.html":{}}}],["hr_service",{"_index":593,"title":{},"body":{"modules/KafkaModule.html":{}}}],["hs512",{"_index":693,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["http",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["httponly",{"_index":697,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["https://blog.logrocket.com/microservices",{"_index":583,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["https://github.com/israelio/nestjs",{"_index":581,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["https://github.com/tkssharma/nestjs",{"_index":577,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["https://nestjs.com",{"_index":1289,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":412,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["httpstatus.bad_request",{"_index":683,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["httpstatus.conflict",{"_index":845,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["httpstatus.forbidden",{"_index":860,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["httpstatus.not_found",{"_index":664,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["httpstatus.too_many_requests",{"_index":677,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["httpstatus.unauthorized",{"_index":448,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["id",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["identifier",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":432,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["images/users/avatars",{"_index":879,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["implements",{"_index":356,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{}}}],["includestacktraceinerrorresponses",{"_index":547,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["incrementdecrement",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":99,"title":{"index.html":{}},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["inform",{"_index":988,"title":{},"body":{"injectables/TasksService.html":{}}}],["information",{"_index":1213,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1236,"title":{},"body":{"index.html":{}}}],["initial",{"_index":915,"title":{},"body":{"injectables/TasksService.html":{}}}],["inject",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"injectables/KafkaHumanResourceService.html":{}}}],["inject('hr_service",{"_index":569,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["injectable",{"_index":275,"title":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":276,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["inputtype",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["install",{"_index":1228,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1188,"title":{},"body":{"index.html":{}}}],["int",{"_index":189,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["integration",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["interact",{"_index":1257,"title":{},"body":{"index.html":{}}}],["internal_server_error",{"_index":510,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["internalservermessage",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["introspection",{"_index":548,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["ir",{"_index":319,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["isactive",{"_index":866,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["isauth",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["isauthenticated",{"_index":103,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["isauthenticated(@context",{"_index":163,"title":{},"body":{"classes/AuthResolver.html":{}}}],["isauthenticated(ctx",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["isauthenticated(ctx.getcontext",{"_index":456,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["isdeleted",{"_index":862,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["islogin",{"_index":710,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["isnotempty",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["isphonenumber",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["isphonenumber('ir",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["isreadonly",{"_index":395,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["isstrongpassword",{"_index":1015,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["issuer",{"_index":690,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["item.email",{"_index":994,"title":{},"body":{"injectables/TasksService.html":{}}}],["item1",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item1.some((x",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item1.tolowercase",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item2",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item2.some((y",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item2.tolowercase",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["items",{"_index":834,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["iv",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iv.tostring('hex",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1269,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1271,"title":{},"body":{"index.html":{}}}],["join",{"_index":308,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaUsersService.html":{},"index.html":{}}}],["join(pathname",{"_index":346,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["join(process.cwd",{"_index":541,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["json",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["json.parse(json.stringify(user",{"_index":852,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["json.stringify",{"_index":572,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["json.stringify(context",{"_index":330,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["jwt",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["jwtfromrequest",{"_index":428,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["jwtmodule",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":397,"title":{"classes/JwtPayLoad.html":{}},"body":{"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":73,"title":{"injectables/JWTRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["jwtservice.decode(ctx.req.cookies['jwt']).sub",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtstrategy",{"_index":74,"title":{"injectables/JWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kafka",{"_index":578,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["kafkahumanresourceservice",{"_index":560,"title":{"injectables/KafkaHumanResourceService.html":{}},"body":{"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"coverage.html":{},"overview.html":{}}}],["kafkajs",{"_index":1156,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["kafkamodule",{"_index":15,"title":{"modules/KafkaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaModule.html":{},"modules.html":{},"overview.html":{}}}],["kamil",{"_index":1286,"title":{},"body":{"index.html":{}}}],["key",{"_index":1205,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["latn",{"_index":322,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["learn",{"_index":1242,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":1292,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1274,"title":{},"body":{"index.html":{}}}],["limitationdiskspacewarning",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["link",{"_index":385,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["linkedin",{"_index":1268,"title":{},"body":{"index.html":{}}}],["linux",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["localhost:9092",{"_index":598,"title":{},"body":{"modules/KafkaModule.html":{}}}],["localpath",{"_index":877,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["localpath.concat(`/${userid",{"_index":881,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["lockdowndate",{"_index":674,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["lockdownuser",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":279,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["loges/error/${date",{"_index":341,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["loges/log/${date",{"_index":335,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["logger",{"_index":359,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["login",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{}}}],["login(loginmodel",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["logindto",{"_index":132,"title":{"classes/LoginDto.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["loginmodel",{"_index":135,"title":{"classes/LoginModel.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["loginmodel.username",{"_index":662,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["loginparamsisnotvalid",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loginresponse",{"_index":149,"title":{"classes/LoginResponse.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"coverage.html":{}}}],["logintime",{"_index":709,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["logout",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["logout(@context",{"_index":166,"title":{},"body":{"classes/AuthResolver.html":{}}}],["logout(ctx",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["logouttime",{"_index":723,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["looking",{"_index":1214,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1265,"title":{},"body":{"index.html":{}}}],["mail",{"_index":910,"title":{},"body":{"injectables/TasksService.html":{}}}],["mailerservice",{"_index":18,"title":{"injectables/MailerService.html":{}},"body":{"modules/AppModule.html":{},"injectables/MailerService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["mailoptions",{"_index":628,"title":{},"body":{"injectables/MailerService.html":{}}}],["mailservice",{"_index":901,"title":{},"body":{"injectables/TasksService.html":{}}}],["makes",{"_index":1222,"title":{},"body":{"index.html":{}}}],["manage",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["manageavataruserdto",{"_index":270,"title":{"classes/ManageAvatarUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["managejwttoken",{"_index":643,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["managejwttoken(existuser",{"_index":654,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["managers",{"_index":987,"title":{},"body":{"injectables/TasksService.html":{}}}],["manageuseravatar",{"_index":791,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["manageuseravatar(context",{"_index":1066,"title":{},"body":{"classes/UsersResolver.html":{}}}],["manageuseravatar(fileupload",{"_index":814,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["managing",{"_index":1235,"title":{},"body":{"index.html":{}}}],["mangeuseravatar",{"_index":1097,"title":{},"body":{"classes/UsersResolver.html":{}}}],["matching",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchs",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.abs(dateitem_2",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.ceil((number(output[9",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.ceil(number(output[9",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mau",{"_index":1218,"title":{},"body":{"index.html":{}}}],["maxage",{"_index":701,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["medium",{"_index":329,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["menu",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{}}}],["menubar",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{}}}],["menubar(@context",{"_index":172,"title":{},"body":{"classes/AuthResolver.html":{}}}],["menubar(context",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{}}}],["menuchildren",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menudescription",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menulink",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuname",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuparent",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuparentid",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menupersianname",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuroles",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuselfid",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustructuremodel",{"_index":150,"title":{"classes/MenuStructureModel.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"coverage.html":{}}}],["message",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["metadata",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["method_not_allowed",{"_index":514,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["methodnotallowedmessage",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":100,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["mi",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":531,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["minlength",{"_index":1016,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{}}}],["minlengthofpassword",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1168,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1273,"title":{},"body":{"index.html":{}}}],["mkdirsync",{"_index":305,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{}}}],["mkdirsync(join(__dirname",{"_index":880,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["mkdirsync(pathname",{"_index":343,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["mo",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":549,"title":{},"body":{"modules/GraphqlModule.html":{},"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/jwt.strategy",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["monorepo/blob/develop/apps/api",{"_index":579,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["month",{"_index":338,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["more",{"_index":1212,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["mutation(undefined",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{}}}],["myśliwiec",{"_index":1287,"title":{},"body":{"index.html":{}}}],["n\\n",{"_index":331,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["name",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["nationalcode",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["need",{"_index":1260,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1181,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1291,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":584,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"index.html":{}}}],["nestjs/apollo",{"_index":536,"title":{},"body":{"modules/GraphqlModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/devtools",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":145,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":568,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":300,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["new",{"_index":317,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newdate",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":364,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["nextfunction",{"_index":301,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["node.js",{"_index":1174,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":616,"title":{},"body":{"injectables/MailerService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":618,"title":{},"body":{"injectables/MailerService.html":{}}}],["normal",{"_index":913,"title":{},"body":{"injectables/TasksService.html":{}}}],["not_acceptable",{"_index":500,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["not_found",{"_index":498,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["not_implemented",{"_index":512,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["notacceptablemessage",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":830,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["notfoundexception(consts.usernotexist",{"_index":876,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["notimplementedexception",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":365,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["now}ms",{"_index":374,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["npm",{"_index":1187,"title":{},"body":{"index.html":{}}}],["nu",{"_index":321,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["null",{"_index":430,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":156,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["num",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":181,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordModel.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["number(data[1",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(data[3",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(output[8",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numeric",{"_index":337,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["object",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(options",{"_index":490,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["object.keys(roles",{"_index":744,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["object.values(roles).filter",{"_index":470,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["objecttype",{"_index":190,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["offer",{"_index":1270,"title":{},"body":{"index.html":{}}}],["official",{"_index":1219,"title":{},"body":{"index.html":{}}}],["omittype",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["omittype(createuserdto",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["onmoduleinit",{"_index":779,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1275,"title":{},"body":{"index.html":{}}}],["option",{"_index":316,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["optional",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["options",{"_index":486,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/KafkaModule.html":{}}}],["orderby",{"_index":749,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["os.platform",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":550,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["out",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["output",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1297,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1127,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page.roles.some((v",{"_index":741,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["pagenumber",{"_index":178,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"injectables/PrismaUsersService.html":{},"miscellaneous/variables.html":{}}}],["pages",{"_index":380,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/UpdatePageRolesDto.html":{}}}],["pagesize",{"_index":179,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"injectables/PrismaUsersService.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["parentid",{"_index":393,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["parser",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["parsevalue",{"_index":776,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["part",{"_index":1261,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["pass",{"_index":626,"title":{},"body":{"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{}}}],["passport",{"_index":416,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":413,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["passportstrategy(strategy",{"_index":425,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["passreqtocallback",{"_index":439,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["password",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["passwordchangelastdate",{"_index":736,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["passwordisnotstrongmessage",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordrequiredmessage",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":309,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaUsersService.html":{}}}],["path.dirname(join(__dirname",{"_index":878,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["pathname",{"_index":333,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["payload",{"_index":441,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["payload.sub",{"_index":435,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["payload.username",{"_index":436,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["payload_too_large",{"_index":506,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["payloadtoolargemessage",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":886,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["persianname",{"_index":389,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["phone",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["phonerequiredmessage",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":1217,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["playground",{"_index":544,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["please",{"_index":1245,"title":{},"body":{"index.html":{}}}],["port",{"_index":621,"title":{},"body":{"injectables/MailerService.html":{}}}],["possible",{"_index":1210,"title":{},"body":{"index.html":{}}}],["powershell",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma",{"_index":770,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"properties.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":759,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userscalarfieldenum",{"_index":756,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userselect",{"_index":762,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userwhereinput",{"_index":767,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userwhereuniqueinput",{"_index":753,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":772,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["prismaauthservice",{"_index":75,"title":{"injectables/PrismaAuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["prismaclient",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["prismaquery",{"_index":745,"title":{"classes/PrismaQuery.html":{}},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["prismarequestservice",{"_index":1044,"title":{},"body":{"classes/UsersResolver.html":{}}}],["prismaservice",{"_index":19,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["prismaservice.auth.findfirst",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismasinglequery",{"_index":774,"title":{"classes/PrismaSingleQuery.html":{}},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["prismauserorderbywithrelationinput",{"_index":760,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismauserscalarfieldenum",{"_index":757,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismauserselect",{"_index":763,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismausersservice",{"_index":783,"title":{"injectables/PrismaUsersService.html":{}},"body":{"injectables/PrismaUsersService.html":{},"modules/UserModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"overview.html":{}}}],["prismauserwhereinput",{"_index":768,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismauserwhereuniqueinput",{"_index":754,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":357,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["process.env.node_env",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaAuthService.html":{}}}],["process.env['admin_email",{"_index":625,"title":{},"body":{"injectables/MailerService.html":{},"injectables/TasksService.html":{}}}],["process.env['admin_email_password",{"_index":627,"title":{},"body":{"injectables/MailerService.html":{}}}],["process.env['admin_nationalcode",{"_index":975,"title":{},"body":{"injectables/TasksService.html":{}}}],["process.env['admin_phone",{"_index":976,"title":{},"body":{"injectables/TasksService.html":{}}}],["process.env['admin_username",{"_index":978,"title":{},"body":{"injectables/TasksService.html":{}}}],["process.env['http_only",{"_index":698,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["process.env['max_age",{"_index":702,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["process.env['same_site",{"_index":700,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["production",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaAuthService.html":{},"index.html":{}}}],["progressive",{"_index":1173,"title":{},"body":{"index.html":{}}}],["project",{"_index":1184,"title":{},"body":{"index.html":{}}}],["promise",{"_index":647,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promisify(scrypt)(password",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":177,"title":{"properties.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"properties.html":{}}}],["provide",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["psdrive",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries",{"_index":804,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["queries.skip",{"_index":836,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["queries.take",{"_index":837,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["query",{"_index":143,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["query(undefined",{"_index":1055,"title":{},"body":{"classes/UsersResolver.html":{}}}],["questions",{"_index":1243,"title":{},"body":{"index.html":{}}}],["randombytes(16",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1282,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":358,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["ready",{"_index":1202,"title":{},"body":{"index.html":{}}}],["real",{"_index":1258,"title":{},"body":{"index.html":{}}}],["record",{"_index":324,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{}}}],["recursive",{"_index":344,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{}}}],["reflect",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":418,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["reflector.createdecorator",{"_index":476,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["refresh",{"_index":437,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["refresh_token",{"_index":401,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{}}}],["refreshtoken",{"_index":442,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["region",{"_index":155,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":196,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["registerenumtype",{"_index":191,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["registerenumtype(roles",{"_index":198,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{}}}],["reject",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject(error",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":1183,"title":{},"body":{"index.html":{}}}],["req",{"_index":362,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["req.body",{"_index":368,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["req.cookies",{"_index":431,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["req.cookies['jwt",{"_index":370,"title":{},"body":{"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["req.cookies['jwt'].trim",{"_index":443,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["request_timeout",{"_index":502,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["requesttimeoutmessage",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiring",{"_index":1225,"title":{},"body":{"index.html":{}}}],["res",{"_index":363,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaAuthService.html":{}}}],["res.cookie('jwt",{"_index":696,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["res.on('finish",{"_index":369,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["reset",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":144,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["resources",{"_index":1237,"title":{},"body":{"index.html":{}}}],["result",{"_index":323,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{}}}],["result.filter((page",{"_index":739,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["results",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":158,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["reuslt",{"_index":1102,"title":{},"body":{"classes/UsersResolver.html":{}}}],["revertdate",{"_index":864,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["revertdeletedusers",{"_index":792,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["revertdeletedusers(deletedusers",{"_index":1068,"title":{},"body":{"classes/UsersResolver.html":{}}}],["revertdeletedusers(deleteusers",{"_index":817,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["revertusers",{"_index":1069,"title":{},"body":{"classes/UsersResolver.html":{}}}],["reza",{"_index":573,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["roles",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["roles.accounting_management_junior",{"_index":923,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_management_mid",{"_index":924,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_management_sinior",{"_index":925,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_management_viewer",{"_index":926,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_user_junior",{"_index":927,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_user_mid",{"_index":928,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_user_sinior",{"_index":929,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.accounting_user_viewer",{"_index":930,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.admin",{"_index":889,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.demo",{"_index":892,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.demo_viewer",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["roles.hr_management_junior",{"_index":931,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_management_mid",{"_index":932,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_management_sinior",{"_index":933,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_management_viewer",{"_index":934,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_user_junior",{"_index":935,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_user_mid",{"_index":936,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_user_sinior",{"_index":937,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.hr_user_viewer",{"_index":938,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.inspector",{"_index":939,"title":{},"body":{"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.inspector_viewer",{"_index":940,"title":{},"body":{"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.logestic_management_junior",{"_index":943,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_management_mid",{"_index":944,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_management_sinior",{"_index":945,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_management_viewer",{"_index":946,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_user_junior",{"_index":947,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_user_mid",{"_index":948,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_user_sinior",{"_index":949,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.logestic_user_viewer",{"_index":950,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.security",{"_index":941,"title":{},"body":{"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.security_viewer",{"_index":942,"title":{},"body":{"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.timeattandance_management_junior",{"_index":951,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_management_mid",{"_index":952,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_management_sinior",{"_index":953,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_management_viewer",{"_index":954,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_user_junior",{"_index":955,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_user_mid",{"_index":956,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_user_sinior",{"_index":957,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.timeattandance_user_viewer",{"_index":958,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.user_global",{"_index":891,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.user_management",{"_index":890,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["roles.wages_management_junior",{"_index":959,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_management_mid",{"_index":960,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_management_sinior",{"_index":961,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_management_viewer",{"_index":962,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_user_junior",{"_index":963,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_user_mid",{"_index":964,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_user_sinior",{"_index":965,"title":{},"body":{"injectables/TasksService.html":{}}}],["roles.wages_user_viewer",{"_index":966,"title":{},"body":{"injectables/TasksService.html":{}}}],["rolesguard",{"_index":49,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["run",{"_index":1189,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1208,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["salmani",{"_index":576,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["salt",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["samesite",{"_index":699,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["savetofile",{"_index":280,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["scalable",{"_index":1178,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":979,"title":{},"body":{"injectables/TasksService.html":{}}}],["schedulemodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["secretorkey",{"_index":433,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["secure",{"_index":623,"title":{},"body":{"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":750,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["selfid",{"_index":391,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["send",{"_index":986,"title":{},"body":{"injectables/TasksService.html":{}}}],["sendlimitationspacediskfromadmintomanagersandusers",{"_index":898,"title":{},"body":{"injectables/TasksService.html":{}}}],["sendmail",{"_index":610,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendmail(to",{"_index":612,"title":{},"body":{"injectables/MailerService.html":{}}}],["serialize",{"_index":775,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["server.ts",{"_index":608,"title":{},"body":{"injectables/MailerService.html":{},"coverage.html":{}}}],["server.ts:18",{"_index":615,"title":{},"body":{"injectables/MailerService.html":{}}}],["server.ts:5",{"_index":611,"title":{},"body":{"injectables/MailerService.html":{}}}],["set",{"_index":980,"title":{},"body":{"injectables/TasksService.html":{}}}],["setadminforinitialdeployment",{"_index":899,"title":{},"body":{"injectables/TasksService.html":{}}}],["setasdefaultauthtable",{"_index":900,"title":{},"body":{"injectables/TasksService.html":{}}}],["setup",{"_index":1185,"title":{},"body":{"index.html":{}}}],["shell",{"_index":922,"title":{},"body":{"injectables/TasksService.html":{}}}],["shell/usersmanagement",{"_index":968,"title":{},"body":{"injectables/TasksService.html":{}}}],["shell/usersmanagement/userclassification",{"_index":972,"title":{},"body":{"injectables/TasksService.html":{}}}],["shell/usersmanagement/userslist",{"_index":970,"title":{},"body":{"injectables/TasksService.html":{}}}],["short",{"_index":327,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["side",{"_index":1179,"title":{},"body":{"index.html":{}}}],["sign",{"_index":660,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["signoptions",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1227,"title":{},"body":{"index.html":{}}}],["skip",{"_index":751,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["smtp.gmail.com",{"_index":620,"title":{},"body":{"injectables/MailerService.html":{}}}],["softdeleteusers",{"_index":793,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["softdeleteusers(deletedusers",{"_index":1071,"title":{},"body":{"classes/UsersResolver.html":{}}}],["softdeleteusers(deleteusers",{"_index":819,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["sortschema",{"_index":543,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["source",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"index.html":{}}}],["space",{"_index":990,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1278,"title":{},"body":{"index.html":{}}}],["src/.../consts.ts",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../date",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prismaquery.ts",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tools.ts",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["src/bases/base.ts",{"_index":176,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"coverage.html":{}}}],["src/bases/base.ts:17",{"_index":207,"title":{},"body":{"classes/Counter.html":{}}}],["src/bases/base.ts:26",{"_index":187,"title":{},"body":{"classes/BaseQuery.html":{}}}],["src/bases/base.ts:33",{"_index":186,"title":{},"body":{"classes/BaseQuery.html":{}}}],["src/bases/base.ts:40",{"_index":185,"title":{},"body":{"classes/BaseQuery.html":{}}}],["src/bases/modules/graphql.ts",{"_index":528,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/bases/modules/graphql.ts:24",{"_index":532,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/bases/modules/kafka.ts",{"_index":588,"title":{},"body":{"modules/KafkaModule.html":{}}}],["src/bases/prismaquery.ts",{"_index":746,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bases/prismaquery.ts:11",{"_index":765,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:13",{"_index":755,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:15",{"_index":758,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:17",{"_index":761,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:19",{"_index":764,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:21",{"_index":769,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:27",{"_index":782,"title":{},"body":{"classes/PrismaSingleQuery.html":{}}}],["src/bases/prismaquery.ts:9",{"_index":766,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/services/error",{"_index":481,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["src/bases/services/kafka.hr.ts",{"_index":561,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"coverage.html":{}}}],["src/bases/services/kafka.hr.ts:10",{"_index":567,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["src/bases/services/kafka.hr.ts:5",{"_index":565,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["src/bases/services/prisma",{"_index":777,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":98,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:13",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:18",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:29",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:36",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:44",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:59",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:67",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.model.dto.ts",{"_index":376,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["src/modules/auth/auth.model.dto.ts:12",{"_index":601,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:21",{"_index":378,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:23",{"_index":377,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:30",{"_index":999,"title":{},"body":{"classes/UpdatePageRolesDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:32",{"_index":1000,"title":{},"body":{"classes/UpdatePageRolesDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:9",{"_index":602,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":382,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"coverage.html":{}}}],["src/modules/auth/auth.model.ts:105",{"_index":605,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/modules/auth/auth.model.ts:111",{"_index":606,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/modules/auth/auth.model.ts:12",{"_index":603,"title":{},"body":{"classes/LoginModel.html":{}}}],["src/modules/auth/auth.model.ts:21",{"_index":383,"title":{},"body":{"classes/ForgotPasswordModel.html":{}}}],["src/modules/auth/auth.model.ts:33",{"_index":633,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:40",{"_index":635,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:47",{"_index":636,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:54",{"_index":632,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:61",{"_index":638,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:68",{"_index":640,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:75",{"_index":637,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:81",{"_index":634,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:88",{"_index":639,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:9",{"_index":604,"title":{},"body":{"classes/LoginModel.html":{}}}],["src/modules/auth/auth.model.ts:93",{"_index":559,"title":{},"body":{"classes/JwtPayLoad.html":{}}}],["src/modules/auth/auth.model.ts:94",{"_index":558,"title":{},"body":{"classes/JwtPayLoad.html":{}}}],["src/modules/auth/auth.model.ts:95",{"_index":557,"title":{},"body":{"classes/JwtPayLoad.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.prisma.service.ts",{"_index":641,"title":{},"body":{"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.prisma.service.ts:157",{"_index":653,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:187",{"_index":651,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:19",{"_index":645,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:230",{"_index":646,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:266",{"_index":649,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:27",{"_index":652,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:285",{"_index":650,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:90",{"_index":655,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":405,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/jwt.strategy.ts:105",{"_index":894,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/jwt.strategy.ts:111",{"_index":895,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/jwt.strategy.ts:23",{"_index":555,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:38",{"_index":556,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:47",{"_index":553,"title":{},"body":{"injectables/JWTRefreshTokenStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:62",{"_index":554,"title":{},"body":{"injectables/JWTRefreshTokenStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:74",{"_index":408,"title":{},"body":{"guards/GqlAuthGuard.html":{}}}],["src/modules/auth/jwt.strategy.ts:80",{"_index":411,"title":{},"body":{"guards/GqlAuthGuard.html":{}}}],["src/modules/users/users.graphql.controller.ts",{"_index":1039,"title":{},"body":{"classes/UsersResolver.html":{},"coverage.html":{}}}],["src/modules/users/users.graphql.controller.ts:114",{"_index":1072,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:129",{"_index":1070,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:144",{"_index":1062,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:159",{"_index":1048,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:176",{"_index":1076,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:191",{"_index":1067,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:205",{"_index":1056,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:212",{"_index":1065,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:23",{"_index":1043,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:39",{"_index":1059,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:60",{"_index":1054,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:78",{"_index":1051,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:96",{"_index":1074,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.model.dto.ts",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/users.model.dto.ts:108",{"_index":1001,"title":{},"body":{"classes/UpdateRolesToUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:116",{"_index":1002,"title":{},"body":{"classes/UpdateRolesToUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:128",{"_index":630,"title":{},"body":{"classes/ManageAvatarUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:135",{"_index":631,"title":{},"body":{"classes/ManageAvatarUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:15",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:24",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:32",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:40",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:48",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:63",{"_index":1003,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:70",{"_index":1004,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:82",{"_index":375,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:94",{"_index":997,"title":{},"body":{"classes/ToggleActiveUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:96",{"_index":998,"title":{},"body":{"classes/ToggleActiveUserDto.html":{}}}],["src/modules/users/users.model.ts",{"_index":1012,"title":{},"body":{"classes/UserOutput.html":{},"classes/Users.html":{},"coverage.html":{}}}],["src/modules/users/users.model.ts:105",{"_index":1029,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:112",{"_index":1030,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:120",{"_index":1036,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:130",{"_index":1013,"title":{},"body":{"classes/UserOutput.html":{}}}],["src/modules/users/users.model.ts:21",{"_index":1031,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:30",{"_index":1027,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:38",{"_index":1034,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:46",{"_index":1038,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:55",{"_index":1033,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:63",{"_index":1028,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:70",{"_index":1025,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:77",{"_index":1037,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:84",{"_index":1026,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:91",{"_index":1035,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:98",{"_index":1024,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.module.ts",{"_index":1009,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/users/users.prisma.service.ts",{"_index":784,"title":{},"body":{"injectables/PrismaUsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.prisma.service.ts:101",{"_index":818,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:110",{"_index":810,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:118",{"_index":798,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:130",{"_index":824,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:142",{"_index":816,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:169",{"_index":808,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:183",{"_index":813,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:22",{"_index":796,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:29",{"_index":803,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:40",{"_index":806,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:46",{"_index":801,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:72",{"_index":822,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:83",{"_index":820,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/schema.gql",{"_index":542,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/utils/consts.ts",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/date",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger.ts",{"_index":277,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"coverage.html":{}}}],["src/utils/logger.ts:13",{"_index":291,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:17",{"_index":295,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:21",{"_index":286,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:25",{"_index":293,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:28",{"_index":299,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:58",{"_index":478,"title":{},"body":{"injectables/GraphQLLoggingMiddleware.html":{}}}],["src/utils/logger.ts:59",{"_index":477,"title":{},"body":{"injectables/GraphQLLoggingMiddleware.html":{}}}],["src/utils/logger.ts:60",{"_index":479,"title":{},"body":{"injectables/GraphQLLoggingMiddleware.html":{}}}],["src/utils/logger.ts:9",{"_index":298,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/mail",{"_index":607,"title":{},"body":{"injectables/MailerService.html":{},"coverage.html":{}}}],["src/utils/tasks.ts",{"_index":896,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/utils/tasks.ts:10",{"_index":902,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:147",{"_index":906,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:172",{"_index":907,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:188",{"_index":905,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:21",{"_index":903,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tools.ts",{"_index":1124,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1191,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1193,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1194,"title":{},"body":{"index.html":{}}}],["started",{"_index":1172,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1182,"title":{},"body":{"index.html":{}}}],["state",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["statements",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":485,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["stay",{"_index":1264,"title":{},"body":{"index.html":{}}}],["stdout",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stdout.trim().split(/\\s",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steps",{"_index":1206,"title":{},"body":{"index.html":{}}}],["str",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["str.replace(/[^\\d]/g",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":1223,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":415,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["string",{"_index":165,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":384,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["sub",{"_index":398,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{}}}],["subject",{"_index":613,"title":{},"body":{"injectables/MailerService.html":{}}}],["successfullylogout",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":427,"title":{},"body":{"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["super.debug(message",{"_index":313,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["super.verbose(message",{"_index":314,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["super.warn(message",{"_index":312,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["support",{"_index":1244,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1294,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1126,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["tail",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["take",{"_index":752,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"index.html":{}}}],["tasks",{"_index":914,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasksservice",{"_index":20,"title":{"injectables/TasksService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1197,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1200,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1199,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1195,"title":{},"body":{"index.html":{}}}],["text",{"_index":614,"title":{},"body":{"injectables/MailerService.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":1277,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":781,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.forgotpassword(forgotpasswordmodel",{"_index":170,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.getpages(context",{"_index":173,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.getroles",{"_index":174,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.isauthenticated(ctx",{"_index":164,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.login(loginmodel",{"_index":160,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.logout(ctx",{"_index":167,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.configservice",{"_index":454,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.configservice.get('expire_time",{"_index":689,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('expire_time_refresh_token",{"_index":694,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('issuer",{"_index":691,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('jwt_refreshtoken_secret",{"_index":695,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":451,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["this.createpagesforinitialdeployment",{"_index":912,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.jwtservice",{"_index":455,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["this.jwtservice.decode",{"_index":887,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.jwtservice.decode(context.req.cookies['jwt']).sub",{"_index":875,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.jwtservice.decode(ctx.req.cookies['jwt']).sub",{"_index":721,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.decode(req.cookies['jwt'].trim",{"_index":464,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["this.jwtservice.decode(req.cookies['jwt'].trim()).sub",{"_index":371,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.jwtservice.signasync(payload",{"_index":688,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.verifyasync",{"_index":730,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.verifyasync(existuserauth.token",{"_index":728,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.verifyasync(req.cookies['jwt",{"_index":450,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.kafkahumanresourceservice.emit",{"_index":570,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["this.logger.log(`request",{"_index":372,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.mailservice.sendmail",{"_index":993,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.managejwttoken(existuser",{"_index":684,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismarequestservice.changeactivationusers",{"_index":1094,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.createuser(usermodel",{"_index":1086,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.getallusersbyquery(query",{"_index":1083,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.getuserbyquery(query",{"_index":1085,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.getuserinfo(context",{"_index":1100,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.harddeleteusers(deletedusers",{"_index":1092,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.hasuseractionpermission(context",{"_index":1103,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.manageuseravatar",{"_index":1098,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.revertdeletedusers(deletedusers",{"_index":1091,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.softdeleteusers(deletedusers",{"_index":1089,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.updateuser(usermodel",{"_index":1087,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.updateuserroles(activationusers",{"_index":1096,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismaservice",{"_index":453,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["this.prismaservice.auth",{"_index":984,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.auth.create",{"_index":706,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.auth.findfirst",{"_index":704,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.auth.update",{"_index":711,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.page",{"_index":919,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.page.count",{"_index":918,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.page.findmany",{"_index":737,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.user",{"_index":974,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.user.count",{"_index":838,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["this.prismaservice.user.create",{"_index":848,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.deletemany",{"_index":865,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findfirst",{"_index":466,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["this.prismaservice.user.findfirst(query",{"_index":839,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":855,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findmany(queries",{"_index":835,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":661,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.update",{"_index":671,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":861,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.reflector.get",{"_index":461,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.reflector.get(hasroles",{"_index":458,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.savetofile('error",{"_index":311,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.savetofile('log",{"_index":310,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.setadminforinitialdeployment",{"_index":911,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.transporter",{"_index":617,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.transporter.sendmail(mailoptions",{"_index":629,"title":{},"body":{"injectables/MailerService.html":{}}}],["throw",{"_index":446,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["time",{"_index":325,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{},"index.html":{}}}],["time.ts",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["timestyle",{"_index":328,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["todefault",{"_index":982,"title":{},"body":{"injectables/TasksService.html":{}}}],["toggle",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["toggleactiveuser",{"_index":1093,"title":{},"body":{"classes/UsersResolver.html":{}}}],["toggleactiveuserdto",{"_index":262,"title":{"classes/ToggleActiveUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["token",{"_index":685,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["tokenexpired",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["took",{"_index":373,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["tools",{"_index":423,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["tools.comparehash(loginmodel.password",{"_index":678,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["tools.getdrivesize",{"_index":992,"title":{},"body":{"injectables/TasksService.html":{}}}],["tools.getuserinfofromcontext",{"_index":726,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["tools.hash(forgotpasswordmodel.password",{"_index":735,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["tools.hash(process.env['admin_password_system",{"_index":977,"title":{},"body":{"injectables/TasksService.html":{}}}],["tools.hash(user.password",{"_index":847,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["tools.matchs",{"_index":468,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["tools.matchs(userroles.roles",{"_index":474,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["total",{"_index":991,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["totalcount",{"_index":180,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"injectables/PrismaUsersService.html":{},"miscellaneous/variables.html":{}}}],["totallogincounter",{"_index":708,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["touch",{"_index":1284,"title":{},"body":{"index.html":{}}}],["trace",{"_index":290,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["transformer",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":590,"title":{},"body":{"modules/KafkaModule.html":{}}}],["transport.kafka",{"_index":594,"title":{},"body":{"modules/KafkaModule.html":{}}}],["transporter",{"_index":609,"title":{},"body":{"injectables/MailerService.html":{}}}],["trim().split(/\\s+/).map(number",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":201,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["try",{"_index":449,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["ts",{"_index":829,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["twitter",{"_index":1290,"title":{},"body":{"index.html":{}}}],["txt",{"_index":348,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["type",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/graphql",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":585,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"index.html":{}}}],["u",{"_index":320,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["unauthorized",{"_index":496,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":657,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["unauthorizedexception(consts.unauthorized",{"_index":738,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["undefined",{"_index":184,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["undefined'])@mutation(undefined",{"_index":1047,"title":{},"body":{"classes/UsersResolver.html":{}}}],["undefined'])@query(undefined",{"_index":1053,"title":{},"body":{"classes/UsersResolver.html":{}}}],["undefined})@isemail()@isnotempty({message",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isnotempty",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isnotempty({message",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isphonenumber('ir",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isstrongpassword({minlength",{"_index":1032,"title":{},"body":{"classes/Users.html":{}}}],["unit",{"_index":1196,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{}}}],["unlicensed",{"_index":1303,"title":{},"body":{"properties.html":{}}}],["unsupported_media_type",{"_index":508,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["unsupportedmediatypemessage",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["updatedate",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["updatemany",{"_index":985,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatemodel",{"_index":825,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updatemodel.ids",{"_index":870,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updatemodel.roles",{"_index":869,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updatepagerolesdto",{"_index":381,"title":{"classes/UpdatePageRolesDto.html":{}},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["updaterolestouser",{"_index":1095,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updaterolestouserdto",{"_index":265,"title":{"classes/UpdateRolesToUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["updates",{"_index":1266,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":794,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["updateuser(user",{"_index":821,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updateuser(usermodel",{"_index":1073,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuserdto",{"_index":247,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["updateuserroles",{"_index":795,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["updateuserroles(activationusers",{"_index":1075,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuserroles(updatemodel",{"_index":823,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["upload",{"_index":828,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["use",{"_index":361,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{}}}],["useclass",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["used,free,usedcapacity,freecapacity",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":147,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards(gqlauthguard",{"_index":171,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards(gqlauthguard)@query(undefined",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{}}}],["user",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{}}}],["user.email",{"_index":841,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.id",{"_index":853,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.nationalcode",{"_index":843,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.password",{"_index":846,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.phone",{"_index":842,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.updatedate",{"_index":850,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.username",{"_index":840,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userauth",{"_index":884,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userauth.userid",{"_index":885,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userauthinfo",{"_index":703,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.dailylogincounter",{"_index":712,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.id",{"_index":716,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.refreshtoken",{"_index":715,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.totallogincounter",{"_index":713,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["useravatarmanager",{"_index":871,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userclassification",{"_index":971,"title":{},"body":{"injectables/TasksService.html":{}}}],["userid",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["useridisrequired",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usermodel",{"_index":1052,"title":{},"body":{"classes/UsersResolver.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["usernamerequiredmessage",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usernotexist",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useroutput",{"_index":831,"title":{"classes/UserOutput.html":{}},"body":{"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["userresult",{"_index":851,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userroles",{"_index":465,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["userroles.roles",{"_index":469,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["userroles.roles.some((b",{"_index":740,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["users",{"_index":256,"title":{"classes/Users.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["users.graphql.controller",{"_index":1011,"title":{},"body":{"modules/UserModule.html":{}}}],["users.model",{"_index":832,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["users.model.dto",{"_index":826,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["users.prisma.service",{"_index":1010,"title":{},"body":{"modules/UserModule.html":{},"classes/UsersResolver.html":{}}}],["userslist",{"_index":969,"title":{},"body":{"injectables/TasksService.html":{}}}],["usersmanagement",{"_index":967,"title":{},"body":{"injectables/TasksService.html":{}}}],["usersresolver",{"_index":1008,"title":{"classes/UsersResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":192,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"index.html":{}}}],["utf",{"_index":352,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["utf8",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/consts",{"_index":153,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["utils/date",{"_index":659,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["utils/logger",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{}}}],["utils/mail",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/tasks",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/tools",{"_index":424,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["v",{"_index":742,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["validate",{"_index":552,"title":{},"body":{"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{}}}],["validate(context",{"_index":440,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["validate(payload",{"_index":434,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["validator",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"dependencies.html":{}}}],["value",{"_index":297,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/UpdatePageRolesDto.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":367,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":283,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":292,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["verify",{"_index":727,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["verifyrefreshtoken",{"_index":729,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["version",{"_index":1301,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1252,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1241,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1255,"title":{},"body":{"index.html":{}}}],["vm",{"_index":419,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["void",{"_index":288,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/GraphqlModule.html":{},"injectables/KafkaHumanResourceService.html":{}}}],["warn",{"_index":284,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warn(message",{"_index":294,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["watch",{"_index":1192,"title":{},"body":{"index.html":{}}}],["website",{"_index":1288,"title":{},"body":{"index.html":{}}}],["win32",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["work",{"_index":1079,"title":{},"body":{"classes/UsersResolver.html":{}}}],["working",{"_index":1240,"title":{},"body":{"index.html":{}}}],["writefilesync",{"_index":306,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["writefilesync(filename",{"_index":350,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["wrongincomingparameters",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrongpasswordcounter",{"_index":673,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["x",{"_index":471,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":473,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["year",{"_index":336,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["yes",{"_index":287,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["you'd",{"_index":1281,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1201,"title":{},"body":{"index.html":{}}}],["youcannotremoveadminusers",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yournationalcode",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourpassword",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourrealemail",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourrealphone",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["youruseridentifier",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourusername",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\nKafkaModule\n\nKafkaModule\n\nAppModule -->\n\nKafkaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nAppModule -->\n\nCustomLogger->AppModule\n\n\n\n\n\nMailerService\n\nMailerService\n\nAppModule -->\n\nMailerService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            MailerService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GraphqlModule\n                        \n                        \n                            KafkaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KafkaModule } from './bases/modules/kafka';\nimport { PrismaClient } from '@prisma/client';\nimport { GraphqlModule } from './bases/modules/Graphql';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TasksService } from './utils/tasks';\nimport { ConfigModule } from '@nestjs/config';\nimport { DevtoolsModule } from '@nestjs/devtools-integration';\nimport { UserModule } from './modules/users/users.module';\nimport { PrismaService } from './bases/services/prisma-client';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './modules/auth/jwt.strategy';\nimport { JwtService } from '@nestjs/jwt';\nimport { CustomLogger } from './utils/logger';\nimport { MailerService } from './utils/mail-server';\n\n@Module({\n  imports: [\n    KafkaModule,\n    GraphqlModule,\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot(),\n    DevtoolsModule.register({\n      http: process.env.NODE_ENV !== 'production',\n    }),\n    UserModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [\n    PrismaClient,\n    PrismaService,\n    TasksService,\n    JwtService,\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    CustomLogger,\n    MailerService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthResolver \n\nAuthResolver \n\n\n\nAuthModule\n\nAuthModule\n\nAuthResolver  -->\n\nAuthModule->AuthResolver \n\n\n\n\n\nJWTRefreshTokenStrategy\n\nJWTRefreshTokenStrategy\n\nAuthModule -->\n\nJWTRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nPrismaAuthService\n\nPrismaAuthService\n\nAuthModule -->\n\nPrismaAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JWTRefreshTokenStrategy\n                        \n                        \n                            JWTStrategy\n                        \n                        \n                            PrismaAuthService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthResolver\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { AuthResolver } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JWTRefreshTokenStrategy, JWTStrategy } from './jwt.strategy';\nimport { PrismaService } from '@base/services/prisma-client';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('EXPIRE_TIME'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [AuthResolver, JwtModule],\n  providers: [\n    PrismaService,\n    ConfigService,\n    PrismaAuthService,\n    JWTStrategy,\n    JWTRefreshTokenStrategy,\n    AuthResolver,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                ForgotPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                GetRoles\n                            \n                            \n                                    \n                                    Async\n                                IsAuthenticated\n                            \n                            \n                                    \n                                    Async\n                                Login\n                            \n                            \n                                    \n                                    Async\n                                Logout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                MenuBar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: PrismaAuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.controller.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        PrismaAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        ForgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    ForgotPassword(forgotPasswordModel: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'forgotPassword'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordModel\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        GetRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetRoles()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Query(undefined, {name: 'roles'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        IsAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    IsAuthenticated(ctx: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'isAuth'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(loginModel: LoginDto, context)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'login'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginModel\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        Logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    Logout(ctx: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'logout'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        MenuBar\n                        \n                    \n                \n            \n            \n                \n                        \n                    MenuBar(context: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Query(undefined, {name: 'menu'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { ForgotPasswordDto, LoginDto } from './auth.model.dto';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from './jwt.strategy';\nimport {\n  ForgotPasswordModel,\n  LoginResponse,\n  MenuStructureModel,\n} from './auth.model';\nimport { Consts } from '@utils/consts';\n@Resolver()\nexport class AuthResolver {\n  constructor(private authService: PrismaAuthService) {}\n\n  //#region-------------- login ---------------------------\n  @Mutation(() => LoginResponse, { name: 'login' })\n  async Login(\n    @Args({ nullable: false, name: 'loginModel', type: () => LoginDto })\n    loginModel: LoginDto,\n    @Context() context,\n  ) {\n    return await this.authService.Login(loginModel, context);\n  }\n  //#endregion\n\n  //#region-------------- IsAuthenticated -----------------\n  @Mutation(() => Boolean, { name: 'isAuth' })\n  async IsAuthenticated(@Context() ctx: any) {\n    return await this.authService.IsAuthenticated(ctx);\n  }\n  //#endregion\n\n  //#region-------------- logout --------------------------\n  @Mutation(() => String, { name: 'logout' })\n  async Logout(@Context() ctx: any) {\n    await this.authService.Logout(ctx);\n    return Consts.successfullyLogOut;\n  }\n  //#endregion\n\n  //#region-------------- forgotPassword ------------------\n  @Mutation(() => ForgotPasswordModel, { name: 'forgotPassword' })\n  async ForgotPassword(\n    @Args({\n      nullable: false,\n      name: 'forgotModel',\n      type: () => ForgotPasswordDto,\n    })\n    forgotPasswordModel: ForgotPasswordDto,\n  ) {\n    return await this.authService.ForgotPassword(forgotPasswordModel);\n  }\n  //#endregion\n\n  //#region-------------- MenuBar -------------------------\n  @UseGuards(GqlAuthGuard)\n  @Query(() => [MenuStructureModel], { name: 'menu' })\n  async MenuBar(@Context() context: any) {\n    return await this.authService.GetPages(context);\n  }\n  //#endregion\n\n  //#region-------------- roles ---------------------------\n  @UseGuards(GqlAuthGuard)\n  @Query(() => [String], { name: 'roles' })\n  async GetRoles() {\n    return await this.authService.GetRoles();\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseQuery.html":{"url":"classes/BaseQuery.html","title":"class - BaseQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                pageNumber\n                            \n                            \n                                    \n                                pageSize\n                            \n                            \n                                    \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pageNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'pageNumber', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'pageSize', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'totalCount', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n/**\n * for using custom enum in graphql we should register it first\n */\nregisterEnumType(Roles, { name: 'EnumRoles' });\n\n@ObjectType()\nexport class Counter {\n  @Field(() => Int, {\n    nullable: true,\n    name: 'count',\n    description: Consts.Count,\n  })\n  count: number;\n}\n@ObjectType()\nexport class BaseQuery {\n  @Field(() => Int, {\n    nullable: false,\n    name: 'totalCount',\n    description: Consts.totalCount,\n  })\n  totalCount: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageSize',\n    description: Consts.pageSize,\n  })\n  pageSize: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageNumber',\n    description: Consts.pageNumber,\n  })\n  pageNumber: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Counter.html":{"url":"classes/Counter.html","title":"class - Counter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'count', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n/**\n * for using custom enum in graphql we should register it first\n */\nregisterEnumType(Roles, { name: 'EnumRoles' });\n\n@ObjectType()\nexport class Counter {\n  @Field(() => Int, {\n    nullable: true,\n    name: 'count',\n    description: Consts.Count,\n  })\n  count: number;\n}\n@ObjectType()\nexport class BaseQuery {\n  @Field(() => Int, {\n    nullable: false,\n    name: 'totalCount',\n    description: Consts.totalCount,\n  })\n  totalCount: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageSize',\n    description: Consts.pageSize,\n  })\n  pageSize: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageNumber',\n    description: Consts.pageNumber,\n  })\n  pageNumber: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                nationalCode\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'email', description: undefined})@IsEmail()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'nationalCode', description: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'password', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'phone', description: undefined})@IsPhoneNumber('IR', {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'userName', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                saveToFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveToFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConsoleLogger, Injectable, NestMiddleware } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { NextFunction } from 'express';\nimport { appendFileSync, existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  log = (message: string, context?: any) => {\n    this.saveToFile('log', message, context);\n  };\n\n  error(message: string, trace: string, context?: string) {\n    this.saveToFile('error', message, context, trace);\n  }\n\n  warn(message: string, context?: string) {\n    super.warn(message, context);\n  }\n\n  debug(message: string, context?: string) {\n    super.debug(message, context);\n  }\n\n  verbose(message: string, context?: string) {\n    super.verbose(message, context);\n  }\n  saveToFile = (\n    type: 'error' | 'log',\n    message: string,\n    context: any,\n    trace: string = '',\n  ) => {\n    let date = (option: any) =>\n      new Date().toLocaleString('fa-IR-u-nu-latn', option);\n    let result = `record date & time => ${date({ dateStyle: 'short', timeStyle: 'medium' })} | message => ${message} | context => ${JSON.stringify(context)} | trace => ${trace} \\n\\n`;\n\n    const pathName = join(\n      __dirname,\n      type === 'log'\n        ? `/loges/log/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`\n        : `/loges/error/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`,\n    );\n    if (!existsSync(pathName)) {\n      mkdirSync(pathName, { recursive: true });\n    }\n    let fileName = join(pathName, `${date({ day: 'numeric' })}.txt`);\n    if (!existsSync(fileName)) {\n      writeFileSync(fileName, result, { encoding: 'utf-8' });\n    } else {\n      appendFileSync(fileName, result, { encoding: 'utf-8' });\n    }\n  };\n}\n\n@Injectable()\nexport class GraphQLLoggingMiddleware implements NestMiddleware {\n  private readonly logger = new CustomLogger('GraphQL');\n  private jwtService = new JwtService();\n  use = (req: any, res: any, next: NextFunction) => {\n    const now = Date.now();\n    const { query, variables } = req.body;\n    res.on('finish', () => {\n      let userId = '';\n      if (req && req.cookies['jwt']) {\n        userId = this.jwtService.decode(req.cookies['jwt'].trim()).sub;\n      }\n      this.logger.log(`Request took ${Date.now() - now}ms`, {\n        query,\n        variables,\n        userId: userId,\n      });\n    });\n    next();\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'ids', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:82\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'password', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@InputType()\nexport class LoginDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@InputType()\nexport class ForgotPasswordDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region manage pages in menu\nexport class UpdatePageRolesDto {\n  @Field(() => String, { name: 'id' })\n  id: string = '';\n  @Field(() => [Roles], { name: 'roles' })\n  roles: Roles[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordModel.html":{"url":"classes/ForgotPasswordModel.html","title":"class - ForgotPasswordModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GqlAuthGuard.html":{"url":"guards/GqlAuthGuard.html","title":"guard - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/jwt.strategy.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { GraphQlUnauthorizedException } from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GraphQLLoggingMiddleware.html":{"url":"injectables/GraphQLLoggingMiddleware.html","title":"injectable - GraphQLLoggingMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GraphQLLoggingMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtService\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new JwtService()\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new CustomLogger('GraphQL')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:60\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConsoleLogger, Injectable, NestMiddleware } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { NextFunction } from 'express';\nimport { appendFileSync, existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  log = (message: string, context?: any) => {\n    this.saveToFile('log', message, context);\n  };\n\n  error(message: string, trace: string, context?: string) {\n    this.saveToFile('error', message, context, trace);\n  }\n\n  warn(message: string, context?: string) {\n    super.warn(message, context);\n  }\n\n  debug(message: string, context?: string) {\n    super.debug(message, context);\n  }\n\n  verbose(message: string, context?: string) {\n    super.verbose(message, context);\n  }\n  saveToFile = (\n    type: 'error' | 'log',\n    message: string,\n    context: any,\n    trace: string = '',\n  ) => {\n    let date = (option: any) =>\n      new Date().toLocaleString('fa-IR-u-nu-latn', option);\n    let result = `record date & time => ${date({ dateStyle: 'short', timeStyle: 'medium' })} | message => ${message} | context => ${JSON.stringify(context)} | trace => ${trace} \\n\\n`;\n\n    const pathName = join(\n      __dirname,\n      type === 'log'\n        ? `/loges/log/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`\n        : `/loges/error/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`,\n    );\n    if (!existsSync(pathName)) {\n      mkdirSync(pathName, { recursive: true });\n    }\n    let fileName = join(pathName, `${date({ day: 'numeric' })}.txt`);\n    if (!existsSync(fileName)) {\n      writeFileSync(fileName, result, { encoding: 'utf-8' });\n    } else {\n      appendFileSync(fileName, result, { encoding: 'utf-8' });\n    }\n  };\n}\n\n@Injectable()\nexport class GraphQLLoggingMiddleware implements NestMiddleware {\n  private readonly logger = new CustomLogger('GraphQL');\n  private jwtService = new JwtService();\n  use = (req: any, res: any, next: NextFunction) => {\n    const now = Date.now();\n    const { query, variables } = req.body;\n    res.on('finish', () => {\n      let userId = '';\n      if (req && req.cookies['jwt']) {\n        userId = this.jwtService.decode(req.cookies['jwt'].trim()).sub;\n      }\n      this.logger.log(`Request took ${Date.now() - now}ms`, {\n        query,\n        variables,\n        userId: userId,\n      });\n    });\n    next();\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlBadGatewayException.html":{"url":"classes/GraphQlBadGatewayException.html","title":"class - GraphQlBadGatewayException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlBadGatewayException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:171\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlBadRequestException.html":{"url":"classes/GraphQlBadRequestException.html","title":"class - GraphQlBadRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlBadRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlConflictException.html":{"url":"classes/GraphQlConflictException.html","title":"class - GraphQlConflictException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlConflictException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlForbiddenException.html":{"url":"classes/GraphQlForbiddenException.html","title":"class - GraphQlForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlInternalServerErrorException.html":{"url":"classes/GraphQlInternalServerErrorException.html","title":"class - GraphQlInternalServerErrorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlInternalServerErrorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:129\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlMethodNotAllowedException.html":{"url":"classes/GraphQlMethodNotAllowedException.html","title":"class - GraphQlMethodNotAllowedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlMethodNotAllowedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:157\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlNotAcceptableException.html":{"url":"classes/GraphQlNotAcceptableException.html","title":"class - GraphQlNotAcceptableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlNotAcceptableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:59\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlNotFoundException.html":{"url":"classes/GraphQlNotFoundException.html","title":"class - GraphQlNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlNotImplementedException.html":{"url":"classes/GraphQlNotImplementedException.html","title":"class - GraphQlNotImplementedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlNotImplementedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:143\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlPayloadTooLargeException.html":{"url":"classes/GraphQlPayloadTooLargeException.html","title":"class - GraphQlPayloadTooLargeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlPayloadTooLargeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:101\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlRequestTimeoutException.html":{"url":"classes/GraphQlRequestTimeoutException.html","title":"class - GraphQlRequestTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlRequestTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlUnauthorizedException.html":{"url":"classes/GraphQlUnauthorizedException.html","title":"class - GraphQlUnauthorizedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlUnauthorizedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlUnsupportedMediaTypeException.html":{"url":"classes/GraphQlUnsupportedMediaTypeException.html","title":"class - GraphQlUnsupportedMediaTypeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlUnsupportedMediaTypeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:115\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GraphqlModule.html":{"url":"modules/GraphqlModule.html","title":"module - GraphqlModule","body":"\n                   \n\n\n\n\n    Modules\n    GraphqlModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bases/modules/Graphql.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bases/modules/Graphql.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ApolloDriverConfig, ApolloDriver } from '@nestjs/apollo';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { GraphQLModule, GraphQLSchemaBuilderModule } from '@nestjs/graphql';\nimport { GraphQLLoggingMiddleware } from '@utils/logger';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    GraphQLSchemaBuilderModule,\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n      sortSchema: true,\n      playground: false,\n      csrfPrevention: true,\n      hideSchemaDetailsFromClientErrors: true,\n      includeStacktraceInErrorResponses: true,\n      introspection: true, // when use production mode it should be true otherwise false\n      context: ({ req, res }) => ({ req, res }),\n    }),\n  ],\n})\nexport class GraphqlModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(GraphQLLoggingMiddleware).forRoutes('/graphql');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTRefreshTokenStrategy.html":{"url":"injectables/JWTRefreshTokenStrategy.html","title":"injectable - JWTRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(context: Context, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        Context\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { GraphQlUnauthorizedException } from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTStrategy.html":{"url":"injectables/JWTStrategy.html","title":"injectable - JWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { GraphQlUnauthorizedException } from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtPayLoad.html":{"url":"classes/JwtPayLoad.html","title":"class - JwtPayLoad","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtPayLoad\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roles\n                            \n                            \n                                sub\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:93\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaHumanResourceService.html":{"url":"injectables/KafkaHumanResourceService.html","title":"injectable - KafkaHumanResourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaHumanResourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/kafka.hr.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                CreateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kafKaHumanResourceService: ClientKafka)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/kafka.hr.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        kafKaHumanResourceService\n                                                  \n                                                        \n                                                                    ClientKafka\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        CreateUser\n                        \n                    \n                \n            \n            \n                \nCreateUser(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bases/services/kafka.hr.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientKafka } from '@nestjs/microservices';\n\n@Injectable()\nexport class KafkaHumanResourceService {\n  constructor(\n    @Inject('hr_service')\n    private readonly kafKaHumanResourceService: ClientKafka,\n  ) {}\n  CreateUser(payload: any) {\n    this.kafKaHumanResourceService.emit(\n      'create_personnel',\n      JSON.stringify({ name: 'reza', id: 0, family: 'salmani' }),\n    );\n  }\n}\n//https://github.com/tkssharma/nestjs-kafka-monorepo/blob/develop/apps/api-gateway/src/app.controller.ts\n//https://github.com/israelio/nestjs-kafka-example/blob/master/src/app.controller.ts\n//https://blog.logrocket.com/microservices-nestjs-kafka-typescript/\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaModule.html":{"url":"modules/KafkaModule.html","title":"module - KafkaModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_KafkaModule\n\n\n\ncluster_KafkaModule_providers\n\n\n\n\nKafkaHumanResourceService\n\nKafkaHumanResourceService\n\n\n\nKafkaModule\n\nKafkaModule\n\nKafkaModule -->\n\nKafkaHumanResourceService->KafkaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bases/modules/kafka.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KafkaHumanResourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { KafkaHumanResourceService } from '@base/services/kafka.hr';\n\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'hr_service',\n        transport: Transport.KAFKA,\n        options: {\n          client: {\n            clientId: 'hr',\n            brokers: ['localhost:9092'],\n          },\n          consumer: {\n            groupId: 'hr_consumer',\n          },\n        },\n      },\n    ]),\n  ],\n  providers: [KafkaHumanResourceService],\n})\nexport class KafkaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'password', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@InputType()\nexport class LoginDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@InputType()\nexport class ForgotPasswordDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region manage pages in menu\nexport class UpdatePageRolesDto {\n  @Field(() => String, { name: 'id' })\n  id: string = '';\n  @Field(() => [Roles], { name: 'roles' })\n  roles: Roles[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginModel.html":{"url":"classes/LoginModel.html","title":"class - LoginModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'password', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'access_token', nullable: true, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'refresh_token', nullable: true, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:111\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailerService.html":{"url":"injectables/MailerService.html","title":"injectable - MailerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mail-server.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/mail-server.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(to: string, subject: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mail-server.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/utils/mail-server.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\n@Injectable()\nexport class MailerService {\n  private transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: process.env['ADMIN_EMAIL'],\n        pass: process.env['ADMIN_EMAIL_PASSWORD'],\n      },\n    });\n  }\n  async sendMail(to: string, subject: string, text: string) {\n    const mailOptions = {\n      from: process.env['ADMIN_EMAIL'],\n      to,\n      subject,\n      text,\n    };\n    return await this.transporter.sendMail(mailOptions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ManageAvatarUserDto.html":{"url":"classes/ManageAvatarUserDto.html","title":"class - ManageAvatarUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ManageAvatarUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatarImage\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatarImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'avatarImage', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'userId', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:135\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MenuStructureModel.html":{"url":"classes/MenuStructureModel.html","title":"class - MenuStructureModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MenuStructureModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    Optional\n                                isReadOnly\n                            \n                            \n                                    \n                                    Optional\n                                link\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                    Optional\n                                persianName\n                            \n                            \n                                    \n                                    Optional\n                                roles\n                            \n                            \n                                    \n                                    Optional\n                                selfId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'description', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isReadOnly\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'isReadOnly', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'link', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'name', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'parentId', nullable: true, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        persianName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'persianName', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'roles', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        selfId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'selfId', nullable: false, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaAuthService.html":{"url":"injectables/PrismaAuthService.html","title":"injectable - PrismaAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.prisma.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ForgotPassword\n                            \n                            \n                                    Async\n                                GetPages\n                            \n                            \n                                    Async\n                                GetRoles\n                            \n                            \n                                    Async\n                                IsAuthenticated\n                            \n                            \n                                    Async\n                                Login\n                            \n                            \n                                    Async\n                                Logout\n                            \n                            \n                                    Async\n                                ManageJWTToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.prisma.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ForgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    ForgotPassword(forgotPasswordModel: ForgotPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordModel\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetPages\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetPages(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetRoles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:285\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        IsAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    IsAuthenticated(ctx: Context)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                        Context\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(loginModel: LoginModel, ctx: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginModel\n                                            \n                                                            LoginModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ctx\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    Logout(ctx: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ManageJWTToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    ManageJWTToken(existUser: any, ctx: any, refreshToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                existUser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { ForgotPasswordDto } from './auth.model.dto';\nimport { LoginModel, JwtPayLoad, ForgotPasswordModel } from './auth.model';\nimport { Context } from 'vm';\nimport { PrismaService } from '@base/services/prisma-client';\nimport {\n  GraphQlNotFoundException,\n  GraphQlBadRequestException,\n  GraphQlUnauthorizedException,\n} from '@base/services/error-handler';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\nimport { DateTime } from '@utils/date-time';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class PrismaAuthService {\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  //#region ------------- Sign In -------------------------\n  async Login(loginModel: LoginModel, ctx: Record) {\n    let existUser = await this.prismaService.user.findUnique({\n      where: { userName: loginModel.userName },\n    });\n    if (!existUser) {\n      throw new GraphQlNotFoundException(\n        Consts.userNotExist,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    if (existUser.wrongPasswordCounter >= 3) {\n      if (DateTime.getDiffTime(new Date(), existUser.lockDownDate) > 3) {\n        let copyOfUser = { ...existUser };\n        delete copyOfUser.id;\n        await this.prismaService.user.update({\n          data: {\n            ...copyOfUser,\n            wrongPasswordCounter: 0,\n            lockDownDate: null,\n          },\n          where: { id: existUser.id },\n        });\n      } else {\n        throw new GraphQlBadRequestException(\n          Consts.LockDownUser,\n          HttpStatus.TOO_MANY_REQUESTS,\n        );\n      }\n    }\n    if (!(await Tools.compareHash(loginModel.password, existUser.password))) {\n      let copyOfUser = { ...existUser };\n      delete copyOfUser.id;\n      await this.prismaService.user.update({\n        data: {\n          ...copyOfUser,\n          wrongPasswordCounter: existUser.wrongPasswordCounter + 1,\n        },\n        where: { id: existUser.id },\n      });\n      if (existUser.wrongPasswordCounter === 2) {\n        await this.prismaService.user.update({\n          data: {\n            ...copyOfUser,\n            lockDownDate: new Date().toISOString(),\n            wrongPasswordCounter: existUser.wrongPasswordCounter + 1,\n          },\n          where: { id: existUser.id },\n        });\n        throw new GraphQlBadRequestException(\n          Consts.LockDownUser,\n          HttpStatus.TOO_MANY_REQUESTS,\n        );\n      }\n      throw new GraphQlBadRequestException(\n        Consts.loginParamsIsNotValid,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return await this.ManageJWTToken(existUser, ctx);\n  }\n  //#endregion\n\n  //#region ------------- Manage Jwt Token ----------------\n  async ManageJWTToken(existUser: any, ctx: any, refreshToken: boolean = true) {\n    let payLoad: JwtPayLoad = {\n      userName: existUser.userName,\n      sub: existUser.id,\n      roles: existUser.roles,\n    };\n    let access_token = await this.jwtService.signAsync(payLoad, {\n      expiresIn: this.configService.get('EXPIRE_TIME'),\n      issuer: this.configService.get('ISSUER'),\n      secret: this.configService.get('JWT_SECRET'),\n      algorithm: 'HS512',\n    });\n    let refresh_token = '';\n    if (refreshToken) {\n      refresh_token = await this.jwtService.signAsync(payLoad, {\n        expiresIn: this.configService.get('EXPIRE_TIME_REFRESH_TOKEN'),\n        issuer: this.configService.get('ISSUER'),\n        secret: this.configService.get('JWT_REFRESHTOKEN_SECRET'),\n        algorithm: 'HS512',\n      });\n    }\n    const { res } = ctx;\n    res.cookie('jwt', access_token, {\n      httpOnly: process.env['HTTP_ONLY'],\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: process.env['SAME_SITE'],\n      maxAge: process.env['MAX_AGE'],\n    });\n    let userAuthInfo = await this.prismaService.auth.findFirst({\n      where: { userId: { equals: existUser.id } },\n    });\n    if (!userAuthInfo) {\n      await this.prismaService.auth.create({\n        data: {\n          userId: existUser.id,\n          token: access_token,\n          dailyloginCounter: 1,\n          totalLoginCounter: 1,\n          loginTime: new Date().toISOString(),\n          isLogin: true,\n          refreshToken: refresh_token,\n        },\n      });\n    } else {\n      await this.prismaService.auth.update({\n        data: {\n          userId: existUser.id,\n          token: access_token,\n          dailyloginCounter: userAuthInfo.dailyloginCounter + 1,\n          totalLoginCounter: userAuthInfo.totalLoginCounter + BigInt(1),\n          loginTime: new Date().toISOString(),\n          isLogin: true,\n          refreshToken: refreshToken\n            ? refresh_token\n            : userAuthInfo.refreshToken,\n        },\n        where: { id: userAuthInfo.id },\n      });\n    }\n    return {\n      access_token: access_token,\n      refresh_token: refresh_token,\n    };\n  }\n  //#endregion\n\n  //#region ------------- Logout --------------------------\n  async Logout(ctx: any) {\n    try {\n      if (\n        ctx.req &&\n        ctx.req.cookies &&\n        ctx.req.cookies['jwt'] &&\n        ctx.req.cookies['jwt'].length\n      ) {\n        let userId = this.jwtService.decode(ctx.req.cookies['jwt']).sub;\n        let existUserAuth = await this.prismaService.auth.findFirst({\n          where: { userId: { equals: userId } },\n        });\n        await this.prismaService.auth.update({\n          data: {\n            isLogin: false,\n            refreshToken: '',\n            token: '',\n            logoutTime: new Date().toISOString(),\n          },\n          where: {\n            id: existUserAuth.id,\n          },\n        });\n        ctx.res.clearCookie('jwt');\n      }\n    } catch (error) {}\n  }\n  //#endregion\n\n  //#region ------------- IsAuthenticated ------------------\n  async IsAuthenticated(ctx: Context) {\n    let existUserAuth = await Tools.GetUserInfoFromContext(\n      ctx,\n      this.jwtService,\n      this.prismaService,\n    );\n    try {\n      if (existUserAuth) {\n        let verify = await this.jwtService.verifyAsync(existUserAuth.token, {\n          secret: this.configService.get('JWT_SECRET'),\n        });\n        if (!verify) return false;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      try {\n        let verifyRefreshToken = await this.jwtService.verifyAsync(\n          existUserAuth.refreshToken,\n          {\n            secret: this.configService.get('JWT_REFRESHTOKEN_SECRET'),\n          },\n        );\n        if (verifyRefreshToken) {\n          let existUser = await this.prismaService.user.findUnique({\n            where: { id: existUserAuth.userId },\n          });\n          await this.ManageJWTToken(existUser, ctx, false);\n        } else {\n          return false;\n        }\n      } catch (error) {\n        throw new GraphQlUnauthorizedException(\n          Consts.unAuthorized,\n          HttpStatus.UNAUTHORIZED,\n        );\n      }\n    }\n    return true;\n  }\n  //#endregion\n\n  //#region ------------- ForgotPassword ------------------\n  async ForgotPassword(\n    forgotPasswordModel: ForgotPasswordDto,\n  ): Promise {\n    try {\n      let existUser = await this.prismaService.user.findFirst({\n        where: {\n          OR: [\n            { userName: { equals: forgotPasswordModel.userName } },\n            { email: { equals: forgotPasswordModel.userName } },\n            { phone: { equals: forgotPasswordModel.userName } },\n          ],\n        },\n      });\n      if (!existUser) {\n        throw new GraphQlBadRequestException(\n          Consts.wrongIncomingParameters,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      let pass = await Tools.hash(forgotPasswordModel.password);\n      let copyOfuser = { ...existUser };\n      delete copyOfuser.id;\n      await this.prismaService.user.update({\n        data: {\n          ...copyOfuser,\n          password: pass,\n          passwordChangeLastDate: new Date().toISOString(),\n        },\n        where: { id: existUser.id },\n      });\n      return { userName: existUser.userName };\n    } catch (error) {}\n  }\n  //#endregion\n\n  //#region-------------- Get Menu ------------------------\n  async GetPages(context: any) {\n    let result = await this.prismaService.page.findMany();\n    const { req } = context;\n    if (req && !req.cookies['jwt']) {\n      throw new UnauthorizedException(Consts.unAuthorized);\n    }\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    result = result.filter((page) =>\n      userRoles.roles.some((b) => page.roles.some((v) => v === b)),\n    );\n    return result;\n  }\n  //#endregion\n\n  //#region ------------- Get Roles -----------------------\n  async GetRoles() {\n    return Object.keys(Roles);\n  }\n\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaQuery.html":{"url":"classes/PrismaQuery.html","title":"class - PrismaQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/PrismaQuery.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                cursor\n                            \n                            \n                                    \n                                distinct\n                            \n                            \n                                    \n                                orderBy\n                            \n                            \n                                    \n                                select\n                            \n                            \n                                    \n                                skip\n                            \n                            \n                                    \n                                take\n                            \n                            \n                                    \n                                where\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cursor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserWhereUniqueInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserWhereUniqueInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        distinct\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserScalarFieldEnum, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserOrderByWithRelationInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserOrderByWithRelationInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserSelect\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserSelect, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        where\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserWhereInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserWhereInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { DefaultArgs } from '@prisma/client/runtime/library';\nimport { GraphQLScalarType } from 'graphql';\n\n@InputType()\nexport class PrismaQuery {\n  @Field((type) => Int, { nullable: true })\n  take: number;\n  @Field((type) => Int, { nullable: true })\n  skip: number;\n  @Field((type) => PrismaUserWhereUniqueInput, { nullable: true })\n  cursor: Prisma.UserWhereUniqueInput;\n  @Field((type) => PrismaUserScalarFieldEnum, { nullable: true })\n  distinct: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];\n  @Field((type) => PrismaUserOrderByWithRelationInput, { nullable: true })\n  orderBy: Prisma.UserOrderByWithRelationInput;\n  @Field((type) => PrismaUserSelect, { nullable: true })\n  select: Prisma.UserSelect;\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\n@InputType()\nexport class PrismaSingleQuery {\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\nexport const PrismaUserWhereUniqueInput = new GraphQLScalarType({\n  name: 'cursor',\n  serialize: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n  parseValue: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n});\n\nexport const PrismaUserScalarFieldEnum = new GraphQLScalarType({\n  name: 'distinct',\n  serialize: (value: Prisma.UserScalarFieldEnum) => value,\n  parseValue: (value: Prisma.UserScalarFieldEnum) => value,\n});\n\nexport const PrismaUserOrderByWithRelationInput = new GraphQLScalarType({\n  name: 'orderBy',\n  serialize: (value: Prisma.UserOrderByWithRelationInput) => value,\n  parseValue: (value: Prisma.UserOrderByWithRelationInput) => value,\n});\n\nexport const PrismaUserSelect = new GraphQLScalarType,\n  Prisma.UserSelect\n>({\n  name: 'select',\n  serialize: (value: Prisma.UserSelect) => value,\n  parseValue: (value: Prisma.UserSelect) => value,\n});\n\nexport const PrismaUserWhereInput = new GraphQLScalarType({\n  name: 'where',\n  serialize: (value: Prisma.UserWhereInput) => value,\n  parseValue: (value: Prisma.UserWhereInput) => value,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/prisma-client.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bases/services/prisma-client.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaSingleQuery.html":{"url":"classes/PrismaSingleQuery.html","title":"class - PrismaSingleQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaSingleQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/PrismaQuery.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                where\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        where\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserWhereInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserWhereInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { DefaultArgs } from '@prisma/client/runtime/library';\nimport { GraphQLScalarType } from 'graphql';\n\n@InputType()\nexport class PrismaQuery {\n  @Field((type) => Int, { nullable: true })\n  take: number;\n  @Field((type) => Int, { nullable: true })\n  skip: number;\n  @Field((type) => PrismaUserWhereUniqueInput, { nullable: true })\n  cursor: Prisma.UserWhereUniqueInput;\n  @Field((type) => PrismaUserScalarFieldEnum, { nullable: true })\n  distinct: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];\n  @Field((type) => PrismaUserOrderByWithRelationInput, { nullable: true })\n  orderBy: Prisma.UserOrderByWithRelationInput;\n  @Field((type) => PrismaUserSelect, { nullable: true })\n  select: Prisma.UserSelect;\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\n@InputType()\nexport class PrismaSingleQuery {\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\nexport const PrismaUserWhereUniqueInput = new GraphQLScalarType({\n  name: 'cursor',\n  serialize: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n  parseValue: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n});\n\nexport const PrismaUserScalarFieldEnum = new GraphQLScalarType({\n  name: 'distinct',\n  serialize: (value: Prisma.UserScalarFieldEnum) => value,\n  parseValue: (value: Prisma.UserScalarFieldEnum) => value,\n});\n\nexport const PrismaUserOrderByWithRelationInput = new GraphQLScalarType({\n  name: 'orderBy',\n  serialize: (value: Prisma.UserOrderByWithRelationInput) => value,\n  parseValue: (value: Prisma.UserOrderByWithRelationInput) => value,\n});\n\nexport const PrismaUserSelect = new GraphQLScalarType,\n  Prisma.UserSelect\n>({\n  name: 'select',\n  serialize: (value: Prisma.UserSelect) => value,\n  parseValue: (value: Prisma.UserSelect) => value,\n});\n\nexport const PrismaUserWhereInput = new GraphQLScalarType({\n  name: 'where',\n  serialize: (value: Prisma.UserWhereInput) => value,\n  parseValue: (value: Prisma.UserWhereInput) => value,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaUsersService.html":{"url":"injectables/PrismaUsersService.html","title":"injectable - PrismaUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.prisma.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ChangeActivationUsers\n                            \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                GetAllUsersByQuery\n                            \n                            \n                                    Async\n                                GetUserByQuery\n                            \n                            \n                                    Async\n                                GetUserInfo\n                            \n                            \n                                    Async\n                                HardDeleteUsers\n                            \n                            \n                                    Async\n                                HasUserActionPermission\n                            \n                            \n                                    Async\n                                ManageUserAvatar\n                            \n                            \n                                    Async\n                                RevertDeletedUsers\n                            \n                            \n                                    Async\n                                SoftDeleteUsers\n                            \n                            \n                                    Async\n                                UpdateUser\n                            \n                            \n                                    Async\n                                UpdateUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.prisma.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ChangeActivationUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    ChangeActivationUsers(activationUsers: ToggleActiveUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                activationUsers\n                                            \n                                                            ToggleActiveUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(user: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetAllUsersByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetAllUsersByQuery(queries: PrismaQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            PrismaQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetUserByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserByQuery(query: PrismaSingleQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PrismaSingleQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserInfo(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        HardDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    HardDeleteUsers(deleteUsers: DeleteUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deleteUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        HasUserActionPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    HasUserActionPermission(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ManageUserAvatar\n                        \n                    \n                \n            \n            \n                \n                        \n                    ManageUserAvatar(fileUpload: FileUpload, context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileUpload\n                                            \n                                                        FileUpload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        RevertDeletedUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    RevertDeletedUsers(deleteUsers: DeleteUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deleteUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        SoftDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    SoftDeleteUsers(deleteUsers: DeleteUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deleteUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        UpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUser(user: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        UpdateUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUserRoles(updateModel: UpdateRolesToUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateModel\n                                            \n                                                            UpdateRolesToUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Roles, User } from '@prisma/client';\nimport {\n  CreateUserDto,\n  UpdateUserDto,\n  DeleteUserDto,\n  ToggleActiveUserDto,\n  UpdateRolesToUserDto,\n} from './users.model.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport path, { join } from 'path';\nimport { createWriteStream, mkdirSync } from 'fs';\nimport { FileUpload } from 'graphql-upload-ts';\nimport { HttpStatus, Injectable, NotFoundException } from '@nestjs/common';\nimport { UserOutput } from './users.model';\nimport { PrismaQuery, PrismaSingleQuery } from '@base/PrismaQuery';\nimport { GraphQlBadRequestException } from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class PrismaUsersService {\n  constructor(\n    private prismaService: PrismaService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  //#region ------------- GetAllUsersByQuery --------------\n  async GetAllUsersByQuery(queries: PrismaQuery): Promise {\n    return {\n      items: await this.prismaService.user.findMany(queries),\n      pageNumber: queries.skip,\n      pageSize: queries.take,\n      totalCount: await this.prismaService.user.count(),\n    };\n  }\n  //#endregion\n\n  //#region ------------- GetUserByQuery ------------------\n  async GetUserByQuery(query: PrismaSingleQuery): Promise {\n    return this.prismaService.user.findFirst(query);\n  }\n  //#endregion\n\n  //#region ------------- CreateUser ----------------------\n  async CreateUser(user: CreateUserDto): Promise {\n    let existUser = await this.prismaService.user.findFirst({\n      where: {\n        OR: [\n          { userName: user.userName },\n          { email: user.email },\n          { phone: user.phone },\n          { nationalCode: user.nationalCode },\n        ],\n      },\n    });\n    if (existUser) {\n      throw new GraphQlBadRequestException(\n        Consts.Duplicated,\n        HttpStatus.CONFLICT,\n      );\n    } else {\n      user.password = await Tools.hash(user.password);\n      return this.prismaService.user.create({\n        data: { ...user, createDate: new Date().toISOString() },\n      });\n    }\n  }\n  //#endregion\n\n  //#region ------------- UpdateUser ----------------------\n  async UpdateUser(user: UpdateUserDto): Promise {\n    user.updateDate = new Date().toISOString();\n    let userResult: UpdateUserDto = JSON.parse(JSON.stringify(user));\n    return await this.prismaService.user.update({\n      data: userResult,\n      where: { id: user.id },\n    });\n  }\n  //#endregion\n\n  //#region ------------- SoftDeleteUsers -----------------\n  async SoftDeleteUsers(deleteUsers: DeleteUserDto) {\n    let FindAdminFromIds = await this.prismaService.user.findMany({\n      where: { AND: { id: { in: deleteUsers.ids }, roles: { has: 'Admin' } } },\n    });\n    if (FindAdminFromIds.length) {\n      throw new GraphQlBadRequestException(\n        Consts.youCanNotRemoveAdminUsers,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return this.prismaService.user.updateMany({\n      data: { isDeleted: true, deleteDate: new Date().toISOString() },\n      where: { id: { in: deleteUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- RevertDeletedUsers --------------\n  async RevertDeletedUsers(deleteUsers: DeleteUserDto) {\n    return this.prismaService.user.updateMany({\n      data: { isDeleted: false, revertDate: new Date().toISOString() },\n      where: { id: { in: deleteUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- HardDeleteUsers -----------------\n  async HardDeleteUsers(deleteUsers: DeleteUserDto) {\n    return this.prismaService.user.deleteMany({\n      where: { id: { in: deleteUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- ChangeActivationUsers -----------\n  async ChangeActivationUsers(activationUsers: ToggleActiveUserDto) {\n    return this.prismaService.user.updateMany({\n      data: {\n        isActive: activationUsers.state,\n        updateDate: new Date().toISOString(),\n      },\n      where: { id: { in: activationUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- UpdateUserRoles -----------------\n  async UpdateUserRoles(updateModel: UpdateRolesToUserDto) {\n    return this.prismaService.user.updateMany({\n      data: {\n        roles: updateModel.Roles,\n        updateDate: new Date().toISOString(),\n      },\n      where: { id: { in: updateModel.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- UserAvatarManager ---------------\n  async ManageUserAvatar(fileUpload: FileUpload, context: any) {\n    try {\n      if (context.req && context.req.cookies && context.req.cookies['jwt']) {\n        let userId = this.jwtService.decode(context.req.cookies['jwt']).sub;\n        if (!userId) {\n          throw new NotFoundException(Consts.userNotExist);\n        }\n        let localPath = path.dirname(join(__dirname, '/images/users/avatars'));\n        if (!localPath) {\n          mkdirSync(join(__dirname, '/images/users/avatars'), {\n            recursive: true,\n          });\n        }\n        localPath.concat(`/${userId}`);\n        fileUpload.createReadStream().pipe(createWriteStream(localPath));\n        return await this.prismaService.user.update({\n          data: {\n            avatarPath: localPath,\n          },\n          where: { id: userId },\n        });\n      }\n    } catch (error) {}\n  }\n  //#endregion\n\n  //#region ------------- User Info -----------------------\n  async GetUserInfo(context: any) {\n    let userAuth = await Tools.GetUserInfoFromContext(\n      context,\n      this.jwtService,\n      this.prismaService,\n    );\n\n    return await this.prismaService.user.findUnique({\n      where: { id: userAuth.userId },\n    });\n  }\n  //#endregion\n\n  //#region ------------- has Permission -----------------------\n  async HasUserActionPermission(context: any) {\n    const headerInfo = this.jwtService.decode(\n      context.req.cookies['jwt'].trim(),\n    );\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    return Tools.matchs(userRoles.roles, [\n      Roles.Admin,\n      Roles.User_Management,\n      Roles.User_Global,\n      Roles.Demo,\n    ]);\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/jwt.strategy.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, jwtService: JwtService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:105\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { GraphQlUnauthorizedException } from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/tasks.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreatePagesForInitialDeployment\n                            \n                            \n                                    \n                                    Async\n                                SendLimitationSpaceDiskFromAdminToManagersAndUsers\n                            \n                            \n                                    Async\n                                SetAdminForInitialDeployment\n                            \n                            \n                                    \n                                    Async\n                                SetAsDefaultAuthTable\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, mailService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/tasks.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CreatePagesForInitialDeployment\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreatePagesForInitialDeployment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/tasks.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        SendLimitationSpaceDiskFromAdminToManagersAndUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    SendLimitationSpaceDiskFromAdminToManagersAndUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_1AM)\n                \n            \n\n                    \n                        \n                            Defined in src/utils/tasks.ts:188\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        SetAdminForInitialDeployment\n                        \n                    \n                \n            \n            \n                \n                        \n                    SetAdminForInitialDeployment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/tasks.ts:147\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        SetAsDefaultAuthTable\n                        \n                    \n                \n            \n            \n                \n                        \n                    SetAsDefaultAuthTable()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_1AM)\n                \n            \n\n                    \n                        \n                            Defined in src/utils/tasks.ts:172\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaService } from '@base/services/prisma-client';\nimport { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { Roles } from '@prisma/client';\nimport { Consts } from './consts';\nimport { MailerService } from './mail-server';\nimport { Tools } from './tools';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    private prismaService: PrismaService,\n    private mailService: MailerService,\n  ) {\n    this.SetAdminForInitialDeployment();\n    this.CreatePagesForInitialDeployment();\n  }\n\n  //======================= Normal Tasks ==========================\n  //#region  Initial Deployment\n  async CreatePagesForInitialDeployment() {\n    let existpages = await this.prismaService.page.count();\n    if (existpages === 0) {\n      this.prismaService.page\n        .createMany({\n          data: [\n            {\n              name: 'Home',\n              persianName: 'خانه',\n              selfId: 0,\n              parentId: null,\n              isReadOnly: false,\n              link: '/Shell',\n              roles: [\n                Roles.Admin,\n                Roles.Demo,\n                Roles.Demo_Viewer,\n                Roles.User_Global,\n                Roles.User_Management,\n                Roles.Accounting_Management_Junior,\n                Roles.Accounting_Management_Mid,\n                Roles.Accounting_Management_Sinior,\n                Roles.Accounting_Management_Viewer,\n                Roles.Accounting_User_Junior,\n                Roles.Accounting_User_Mid,\n                Roles.Accounting_User_Sinior,\n                Roles.Accounting_User_Viewer,\n                Roles.Hr_Management_Junior,\n                Roles.Hr_Management_Mid,\n                Roles.Hr_Management_Sinior,\n                Roles.Hr_Management_Viewer,\n                Roles.Hr_User_Junior,\n                Roles.Hr_User_Mid,\n                Roles.Hr_User_Sinior,\n                Roles.Hr_User_Viewer,\n                Roles.Inspector,\n                Roles.Inspector_Viewer,\n                Roles.Security,\n                Roles.Security_Viewer,\n                Roles.Logestic_Management_Junior,\n                Roles.Logestic_Management_Mid,\n                Roles.Logestic_Management_Sinior,\n                Roles.Logestic_Management_Viewer,\n                Roles.Logestic_User_Junior,\n                Roles.Logestic_User_Mid,\n                Roles.Logestic_User_Sinior,\n                Roles.Logestic_User_Viewer,\n                Roles.TimeAttandance_Management_Junior,\n                Roles.TimeAttandance_Management_Mid,\n                Roles.TimeAttandance_Management_Sinior,\n                Roles.TimeAttandance_Management_Viewer,\n                Roles.TimeAttandance_User_Junior,\n                Roles.TimeAttandance_User_Mid,\n                Roles.TimeAttandance_User_Sinior,\n                Roles.TimeAttandance_User_Viewer,\n                Roles.Wages_Management_Junior,\n                Roles.Wages_Management_Mid,\n                Roles.Wages_Management_Sinior,\n                Roles.Wages_Management_Viewer,\n                Roles.Wages_User_Junior,\n                Roles.Wages_User_Mid,\n                Roles.Wages_User_Sinior,\n                Roles.Wages_User_Viewer,\n              ],\n            },\n            {\n              name: 'UsersManagement',\n              persianName: 'مدیریت کاربران',\n              selfId: 1,\n              parentId: null,\n              isReadOnly: false,\n              link: '/Shell/UsersManagement',\n              roles: [\n                Roles.Admin,\n                Roles.Demo,\n                Roles.Demo_Viewer,\n                Roles.Inspector,\n                Roles.Inspector_Viewer,\n                Roles.Security,\n                Roles.Security_Viewer,\n                Roles.User_Global,\n                Roles.User_Management,\n              ],\n            },\n            {\n              name: 'UsersList',\n              persianName: 'لیست کاربران',\n              selfId: 2,\n              parentId: 1,\n              isReadOnly: false,\n              description: 'لیست کاملی از کاربران را در اختیار شما میگذارد',\n              link: '/Shell/UsersManagement/UsersList',\n              roles: [\n                Roles.Admin,\n                Roles.Demo,\n                Roles.Demo_Viewer,\n                Roles.Inspector,\n                Roles.Inspector_Viewer,\n                Roles.Security,\n                Roles.Security_Viewer,\n                Roles.User_Global,\n                Roles.User_Management,\n              ],\n            },\n            {\n              name: 'UserClassification',\n              persianName: 'مجوز دسترسی کاربران',\n              selfId: 3,\n              parentId: 1,\n              isReadOnly: false,\n              description:\n                'مجوز دسترسی هر فرد به صفحات موجود در نرم افزار را میتوانید در این قسمت مدیریت نمایید',\n              link: '/Shell/UsersManagement/UserClassification',\n              roles: [\n                Roles.Admin,\n                Roles.Demo,\n                Roles.Demo_Viewer,\n                Roles.User_Global,\n                Roles.User_Management,\n              ],\n            },\n          ],\n        })\n        .then();\n    }\n  }\n  async SetAdminForInitialDeployment() {\n    let existData = await this.prismaService.user.count();\n    if (existData === 0) {\n      this.prismaService.user\n        .create({\n          data: {\n            nationalCode: process.env['ADMIN_NATIONALCODE'],\n            email: process.env['ADMIN_EMAIL'],\n            phone: process.env['ADMIN_PHONE'],\n            password: await Tools.hash(process.env['ADMIN_PASSWORD_SYSTEM']),\n            userName: process.env['ADMIN_USERNAME'],\n            createDate: new Date().toISOString(),\n            roles: ['Admin'],\n            isActive: true,\n            isDeleted: false,\n          },\n        })\n        .then();\n    }\n  }\n  //#endregion\n\n  //========================= Scheduled Tasks ==================================\n  //#region ------------- Set Auth ExtraInfo ToDefault Daily\n  @Cron(CronExpression.EVERY_DAY_AT_1AM)\n  async SetAsDefaultAuthTable() {\n    this.prismaService.auth\n      .updateMany({\n        data: {\n          dailyloginCounter: 0,\n          isLogin: false,\n          logoutTime: new Date().toISOString(),\n          refreshToken: '',\n          token: '',\n        },\n      })\n      .then();\n  }\n  //#endregion\n  //#region ------------- send email from admin to managers and users for inform about free space\n  @Cron(CronExpression.EVERY_DAY_AT_1AM)\n  async SendLimitationSpaceDiskFromAdminToManagersAndUsers() {\n    let { total, free } = await Tools.getDriveSize();\n    if (free  {\n          await this.mailService.sendMail(\n            item.email,\n            Consts.freeDiskSpace,\n            Consts.limitationDiskSpaceWarning,\n          );\n        });\n    }\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToggleActiveUserDto.html":{"url":"classes/ToggleActiveUserDto.html","title":"class - ToggleActiveUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToggleActiveUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                ids\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'ids', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'state', nullable: false, defaultValue: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:96\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePageRolesDto.html":{"url":"classes/UpdatePageRolesDto.html","title":"class - UpdatePageRolesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePageRolesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'roles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@InputType()\nexport class LoginDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@InputType()\nexport class ForgotPasswordDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region manage pages in menu\nexport class UpdatePageRolesDto {\n  @Field(() => String, { name: 'id' })\n  id: string = '';\n  @Field(() => [Roles], { name: 'roles' })\n  roles: Roles[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesToUserDto.html":{"url":"classes/UpdateRolesToUserDto.html","title":"class - UpdateRolesToUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesToUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                ids\n                            \n                            \n                                    \n                                Roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'ids', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'Roles', description: undefined, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:116\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'id', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'updateDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUsersResolver \n\nUsersResolver \n\n\n\nUserModule\n\nUserModule\n\nUsersResolver  -->\n\nUserModule->UsersResolver \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nPrismaUsersService\n\nPrismaUsersService\n\nUserModule -->\n\nPrismaUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            PrismaUsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersResolver\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaUsersService } from './users.prisma.service';\nimport { UsersResolver } from './users.graphql.controller';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from '@base/services/prisma-client';\n\n@Module({\n  imports: [],\n  exports: [UsersResolver],\n  providers: [\n    JwtService,\n    PrismaService,\n    ConfigService,\n    PrismaUsersService,\n    UsersResolver,\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOutput.html":{"url":"classes/UserOutput.html","title":"class - UserOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                items\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'items', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:130\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseQuery } from '@base/base';\nimport { ObjectType, Field } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\nimport {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  IsStrongPassword,\n} from 'class-validator';\n\n//#region --------------------- Users ---------------------\n@ObjectType()\nexport class Users {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsStrongPassword({ minLength: 2 }, { message: Consts.minLengthOfPassword })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'createDate',\n    description: Consts.createDate,\n  })\n  createDate: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate?: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'deleteDate',\n    description: Consts.deleteDate,\n  })\n  deleteDate?: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'revertDate',\n    description: Consts.revertDate,\n  })\n  revertDate: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatar',\n    description: Consts.avatarPath,\n  })\n  avatar?: string;\n\n  @Field(() => Boolean, {\n    nullable: true,\n    name: 'isActive',\n    description: Consts.isActive,\n  })\n  isActive: boolean;\n\n  @Field(() => Boolean, {\n    nullable: true,\n    name: 'isDeleted',\n    description: Consts.isDeleted,\n  })\n  isDeleted: boolean;\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  roles?: Roles[];\n}\n//#endregion\n\n@ObjectType()\nexport class UserOutput extends BaseQuery {\n  @Field(() => [Users], {\n    name: 'items',\n    nullable: true,\n  })\n  items: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                    Optional\n                                deleteDate\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                nationalCode\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                revertDate\n                            \n                            \n                                    \n                                    Optional\n                                roles\n                            \n                            \n                                    \n                                    Optional\n                                updateDate\n                            \n                            \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'avatar', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'createDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deleteDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'deleteDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'email', description: undefined})@IsEmail()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'id', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'isActive', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'isDeleted', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'nationalCode', description: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'password', description: undefined})@IsStrongPassword({minLength: 2}, {message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'phone', description: undefined})@IsPhoneNumber('IR', {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revertDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'revertDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'roles', description: undefined, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'updateDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'userName', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseQuery } from '@base/base';\nimport { ObjectType, Field } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\nimport {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  IsStrongPassword,\n} from 'class-validator';\n\n//#region --------------------- Users ---------------------\n@ObjectType()\nexport class Users {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsStrongPassword({ minLength: 2 }, { message: Consts.minLengthOfPassword })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'createDate',\n    description: Consts.createDate,\n  })\n  createDate: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate?: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'deleteDate',\n    description: Consts.deleteDate,\n  })\n  deleteDate?: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'revertDate',\n    description: Consts.revertDate,\n  })\n  revertDate: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatar',\n    description: Consts.avatarPath,\n  })\n  avatar?: string;\n\n  @Field(() => Boolean, {\n    nullable: true,\n    name: 'isActive',\n    description: Consts.isActive,\n  })\n  isActive: boolean;\n\n  @Field(() => Boolean, {\n    nullable: true,\n    name: 'isDeleted',\n    description: Consts.isDeleted,\n  })\n  isDeleted: boolean;\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  roles?: Roles[];\n}\n//#endregion\n\n@ObjectType()\nexport class UserOutput extends BaseQuery {\n  @Field(() => [Users], {\n    name: 'items',\n    nullable: true,\n  })\n  items: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersResolver.html":{"url":"classes/UsersResolver.html","title":"class - UsersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.graphql.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                ChangeActivation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                CreateUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                GetUserByQuery\n                            \n                            \n                                    \n                                    Async\n                                GetUserInfo\n                            \n                            \n                                    \n                                    \n                                    Async\n                                GetUsersByQuery\n                            \n                            \n                                    \n                                    \n                                    Async\n                                HardDeleteUsers\n                            \n                            \n                                    \n                                    Async\n                                HasUserActionPermission\n                            \n                            \n                                    \n                                    \n                                    Async\n                                ManageUserAvatar\n                            \n                            \n                                    \n                                    \n                                    Async\n                                RevertDeletedUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                SoftDeleteUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                UpdateUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                UpdateUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaRequestService: PrismaUsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.graphql.controller.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaRequestService\n                                                  \n                                                        \n                                                                        PrismaUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        ChangeActivation\n                        \n                    \n                \n            \n            \n                \n                        \n                    ChangeActivation(activationUsersIds: ToggleActiveUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'ChangeActivation'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                activationUsersIds\n                                            \n                                                            ToggleActiveUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(userModel: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'CreateUser'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userModel\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        GetUserByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserByQuery(query: PrismaSingleQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Query(undefined, {name: 'getUserByQuery'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PrismaSingleQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        GetUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserInfo(context: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getUserInfo'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        GetUsersByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUsersByQuery(query: PrismaQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Query(undefined, {name: 'GetAllUsersWithQuery'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PrismaQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        HardDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    HardDeleteUsers(deletedUsers: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'DeleteUserPermanently'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deletedUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        HasUserActionPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    HasUserActionPermission(context: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'hasPermission'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        ManageUserAvatar\n                        \n                    \n                \n            \n            \n                \n                        \n                    ManageUserAvatar(context: any, fileUpload: FileUpload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'manageUserAvatar'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileUpload\n                                            \n                                                        FileUpload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        RevertDeletedUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    RevertDeletedUsers(deletedUsers: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'RevertUsers'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deletedUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        SoftDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    SoftDeleteUsers(deletedUsers: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'DeleteUsers'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deletedUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        UpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUser(userModel: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'UpdateUser'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userModel\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        UpdateUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUserRoles(activationUsers: UpdateRolesToUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'UpdateUserRoles'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                activationUsers\n                                            \n                                                            UpdateRolesToUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport {\n  CreateUserDto,\n  DeleteUserDto,\n  ToggleActiveUserDto,\n  UpdateRolesToUserDto,\n  UpdateUserDto,\n} from './users.model.dto';\nimport { PrismaUsersService } from './users.prisma.service';\nimport { UseGuards } from '@nestjs/common';\nimport { UserOutput, Users } from './users.model';\nimport { FileUpload } from 'graphql-upload-ts';\nimport { Roles } from '@prisma/client';\nimport { Counter } from '@base/base';\nimport { PrismaQuery, PrismaSingleQuery } from '@base/PrismaQuery';\nimport { GqlAuthGuard, HasRoles } from '@auth/jwt.strategy';\n\n@UseGuards(GqlAuthGuard)\n@Resolver(() => [Users])\n/**\n * this is graphql resolver. it has some function for work with authentication and authorization\n */\nexport class UsersResolver {\n  constructor(private prismaRequestService: PrismaUsersService) {}\n\n  //#region ------------- GetAllUsersByQuery --------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Demo_Viewer,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Inspector_Viewer,\n    Roles.Security,\n    Roles.Security_Viewer,\n  ])\n  @Query(() => UserOutput, { name: 'GetAllUsersWithQuery' })\n  async GetUsersByQuery(\n    @Args('queries', { nullable: true, type: () => PrismaQuery })\n    query: PrismaQuery,\n  ): Promise {\n    return await this.prismaRequestService.GetAllUsersByQuery(query);\n  }\n  //#endregion\n\n  //#region ------------- GetUserByQuery ------------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Demo_Viewer,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Inspector_Viewer,\n    Roles.Security,\n    Roles.Security_Viewer,\n  ])\n  @Query(() => Users, { name: 'getUserByQuery' })\n  async GetUserByQuery(\n    @Args('query', { nullable: true, type: () => PrismaSingleQuery })\n    query: PrismaSingleQuery,\n  ): Promise {\n    return await this.prismaRequestService.GetUserByQuery(query);\n  }\n  //#endregion\n\n  //#region ------------- CreateUser ----------------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Security,\n  ])\n  @Mutation(() => Users, { name: 'CreateUser' })\n  async CreateUser(\n    @Args({ nullable: false, name: 'userModel', type: () => CreateUserDto })\n    userModel: CreateUserDto,\n  ): Promise {\n    return await this.prismaRequestService.CreateUser(userModel);\n  }\n  //#endregion\n\n  //#region ------------- UpdateUser ----------------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Security,\n  ])\n  @Mutation(() => Users, { name: 'UpdateUser' })\n  async UpdateUser(\n    @Args({ nullable: false, name: 'userModel', type: () => UpdateUserDto })\n    userModel: UpdateUserDto,\n  ): Promise {\n    return await this.prismaRequestService.UpdateUser(userModel);\n  }\n  //#endregion\n\n  //#region ------------- SoftDeleteUsers -----------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Security,\n  ])\n  @Mutation(() => Counter, { name: 'DeleteUsers' })\n  async SoftDeleteUsers(\n    @Args({\n      nullable: false,\n      name: 'deleteUsersIds',\n      type: () => DeleteUserDto,\n    })\n    deletedUsers: DeleteUserDto,\n  ) {\n    return await this.prismaRequestService.SoftDeleteUsers(deletedUsers);\n  }\n  //#endregion\n\n  //#region ------------- RevertDeletedUsers --------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'RevertUsers' })\n  async RevertDeletedUsers(\n    @Args({\n      nullable: false,\n      name: 'deleteUsersIds',\n      type: () => DeleteUserDto,\n    })\n    deletedUsers: DeleteUserDto,\n  ) {\n    return await this.prismaRequestService.RevertDeletedUsers(deletedUsers);\n  }\n  //#endregion\n\n  //#region ------------- HardDeleteUsers -----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'DeleteUserPermanently' })\n  async HardDeleteUsers(\n    @Args({\n      nullable: false,\n      name: 'deleteUsersIds',\n      type: () => DeleteUserDto,\n    })\n    deletedUsers: DeleteUserDto,\n  ) {\n    return await this.prismaRequestService.HardDeleteUsers(deletedUsers);\n  }\n  //#endregion\n\n  //#region ------------- ChangeActivation ----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'ChangeActivation' })\n  async ChangeActivation(\n    @Args({\n      nullable: false,\n      name: 'ToggleActiveUser',\n      type: () => ToggleActiveUserDto,\n    })\n    activationUsersIds: ToggleActiveUserDto,\n  ) {\n    return await this.prismaRequestService.ChangeActivationUsers(\n      activationUsersIds,\n    );\n  }\n  //#endregion\n\n  //#region ------------- UpdateUserRoles -----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'UpdateUserRoles' })\n  async UpdateUserRoles(\n    @Args({\n      nullable: false,\n      name: 'UpdateRolesToUser',\n      type: () => UpdateRolesToUserDto,\n    })\n    activationUsers: UpdateRolesToUserDto,\n  ) {\n    return await this.prismaRequestService.UpdateUserRoles(activationUsers);\n  }\n  //#endregion\n\n  //#region ------------- ManageUserAvatar ----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => String, { name: 'manageUserAvatar' })\n  async ManageUserAvatar(\n    @Context() context: any,\n    @Args({ nullable: false, name: 'MangeUserAvatar', type: () => String })\n    fileUpload: FileUpload,\n  ) {\n    return await this.prismaRequestService.ManageUserAvatar(\n      fileUpload,\n      context,\n    );\n  }\n  //#endregion\n\n  //#region-------------- get User Info -------------------\n  @Query(() => Users, { name: 'getUserInfo' })\n  async GetUserInfo(@Context() context: any) {\n    return await this.prismaRequestService.GetUserInfo(context);\n  }\n  //#endregion\n\n  //#region-------------- hasPermission -------------------\n  @Query(() => Boolean, { name: 'hasPermission' })\n  async HasUserActionPermission(@Context() context: any) {\n    let reuslt =\n      await this.prismaRequestService.HasUserActionPermission(context);\n    return reuslt;\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/bases/PrismaQuery.ts\n            \n            class\n            PrismaQuery\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/bases/PrismaQuery.ts\n            \n            class\n            PrismaSingleQuery\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserOrderByWithRelationInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserScalarFieldEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserSelect\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserWhereInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserWhereUniqueInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bases/base.ts\n            \n            class\n            BaseQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bases/base.ts\n            \n            class\n            Counter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlBadGatewayException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlBadRequestException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlConflictException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlForbiddenException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlInternalServerErrorException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlMethodNotAllowedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlNotAcceptableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlNotImplementedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlPayloadTooLargeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlRequestTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlUnauthorizedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlUnsupportedMediaTypeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/kafka.hr.ts\n            \n            injectable\n            KafkaHumanResourceService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bases/services/prisma-client.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.dto.ts\n            \n            class\n            UpdatePageRolesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            ForgotPasswordModel\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            JwtPayLoad\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            LoginModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            LoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            MenuStructureModel\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.prisma.service.ts\n            \n            injectable\n            PrismaAuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JWTRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JWTStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            guard\n            GqlAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/jwt.strategy.ts\n            \n            variable\n            HasNotRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/jwt.strategy.ts\n            \n            variable\n            HasRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.graphql.controller.ts\n            \n            class\n            UsersResolver\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            ManageAvatarUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            ToggleActiveUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            UpdateRolesToUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.ts\n            \n            class\n            UserOutput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/users/users.prisma.service.ts\n            \n            injectable\n            PrismaUsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/utils/consts.ts\n            \n            variable\n            Consts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/date-time.ts\n            \n            variable\n            DateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            injectable\n            GraphQLLoggingMiddleware\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/mail-server.ts\n            \n            injectable\n            MailerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/tasks.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/utils/tools.ts\n            \n            variable\n            Tools\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.11.2\n        \n            @nestjs/apollo : ^12.2.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/devtools-integration : ^0.1.6\n        \n            @nestjs/graphql : ^12.2.2\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/microservices : ^10.4.9\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^4.1.2\n        \n            @prisma/client : ^6.4.1\n        \n            @types/graphql-upload : ^17.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            express : ^4.21.2\n        \n            graphql : ^16.9.0\n        \n            graphql-tools : ^9.0.9\n        \n            graphql-type-json : ^0.3.2\n        \n            graphql-upload : ^17.0.0\n        \n            graphql-upload-ts : ^2.1.2\n        \n            kafkajs : ^2.2.4\n        \n            nodemailer : ^6.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GraphqlModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_KafkaModule\n\n\n\ncluster_KafkaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthResolver \n\nAuthResolver \n\nAuthResolver  -->\n\nAuthModule->AuthResolver \n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\nKafkaModule\n\nKafkaModule\n\nAppModule -->\n\nKafkaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersResolver \n\nUsersResolver \n\nUsersResolver  -->\n\nUserModule->UsersResolver \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nAppModule -->\n\nCustomLogger->AppModule\n\n\n\n\n\nMailerService\n\nMailerService\n\nAppModule -->\n\nMailerService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\nJWTRefreshTokenStrategy\n\nJWTRefreshTokenStrategy\n\nAuthModule -->\n\nJWTRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nPrismaAuthService\n\nPrismaAuthService\n\nAuthModule -->\n\nPrismaAuthService->AuthModule\n\n\n\n\n\nKafkaHumanResourceService\n\nKafkaHumanResourceService\n\nKafkaModule -->\n\nKafkaHumanResourceService->KafkaModule\n\n\n\n\n\nPrismaUsersService\n\nPrismaUsersService\n\nUserModule -->\n\nPrismaUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : prisma with kafkajs\n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Consts   (src/.../consts.ts)\n                        \n                        \n                            DateTime   (src/.../date-time.ts)\n                        \n                        \n                            HasNotRoles   (src/.../jwt.strategy.ts)\n                        \n                        \n                            HasRoles   (src/.../jwt.strategy.ts)\n                        \n                        \n                            PrismaUserOrderByWithRelationInput   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserScalarFieldEnum   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserSelect   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserWhereInput   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserWhereUniqueInput   (src/.../PrismaQuery.ts)\n                        \n                        \n                            Tools   (src/.../tools.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/consts.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Consts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  yourNationalCode: 'کدملی اجباریست',\n  emailRequiredMessage: 'ایمیل اجباریست',\n  phoneRequiredMessage: 'شماره همراه به درستی وارد نشده است',\n  usernameRequiredMessage: 'نام کاربری اجباریست',\n  passwordRequiredMessage: 'رمزعبور اجباریست',\n  passwordIsNotStrongMessage: 'رمز قدرتمند نیست',\n  minLengthOfPassword: 'حداقل طول رمز عبور برابر 2 است',\n  UserIdIsRequired: 'شناسه کاربر اجباریست',\n  yourRealEmail: 'ایمیل واقعی',\n  yourRealPhone: 'شماره همراه',\n  yourUserName: 'نام کاربری',\n  yourPassword: 'رمزعبور',\n  yourUserIdentifier: 'شناسه کاربر',\n  createDate: 'تاریخ ایجاد',\n  updateDate: 'تاریخ بروزرسانی',\n  deleteDate: 'تاریخ حذف',\n  revertDate: 'تاریخ برگشت از حذف موقت',\n  Roles: 'سطوح دسترسی',\n  isActive: 'وضعیت فعال بودن کاربر',\n  isDeleted: 'وضعیت حذف بودن کاربر',\n  ids: 'شناسه ها',\n  items: 'لیست رکوردها',\n  DataNotFound: 'داده ای برای نمایش یافت نشد',\n  Count: 'تعداد انجام شده',\n  totalCount: 'تعداد کل رکوردها',\n  pageSize: 'تعداد در هر نمایش',\n  pageNumber: 'شماره صفحه',\n  loginParamsIsNotValid: 'مقادیر وارد شده معتبر نیستند',\n  accessToken: 'توکن',\n  refreshToken: 'توکن تازه سازی',\n  Duplicated: 'تکراری',\n  unAuthorized: 'مجوزی وجود ندارد',\n  successfullyLogOut: 'با موفقیت از برنامه خارج شدید.',\n  wrongIncomingParameters: 'پارامترهای ورودی قابل شناسایی نیست',\n  LockDownUser:\n    'کاربری شما به دلیل تکرار اشتباه در ورود اطلاعات برای مدت 3 دقیقه قفل شده است',\n  ForbiddenMessage: 'مجوز دسترسی به این داده را ندارید',\n  badRequestMessage: 'پارامترهای ورودی دارای مشکل هستند.',\n  notAcceptableMessage: 'فرمت داده های ورودی قابل قبول نیست',\n  requestTimeoutMessage: 'درخواست منقضی شده است',\n  conflictMessage: 'دارای تداخل',\n  payloadTooLargeMessage: 'حجم درخواست زیاد است',\n  unsupportedMediaTypeMessage: 'مقادیر سربرگ درخواست قابل شناسایی نیست',\n  internalServerMessage: 'خطای داخلی سمت سرور',\n  notImplementedException: 'برخی از پارامترهای اجباری ارسال نشده است',\n  methodNotAllowedMessage: 'نوع ارسال درخواست اشتباه است',\n  badGatewayMessage: 'ارتباط با درگاه سرویس برقرار نشده است',\n  userNotExist: 'کاربری با این مشخصات یافت نشد',\n  menuParent: 'نام والد',\n  menuLink: 'آدرس صفحه',\n  menuName: 'عنوان صفحه',\n  menuParentId: 'شناسه والد صفحه',\n  menuRoles: 'نقش های دارای دسترسی به این صفحه',\n  menuSelfId: 'شناسه شخصی صفحه',\n  menuChildren: 'زیرمجموعه های یک صفحه',\n  menuPersianName: 'نام فارسی صفحه',\n  menuDescription: 'توضیحات تکمیلی از کارکرد صفحه',\n  tokenExpired: 'توکن منقضی شده است',\n  avatarPath: 'مسیر ذخیره عکس کاربر',\n  avatarImage: 'عکس کاربر',\n  userId: 'شناسه کاربر',\n  limitationDiskSpaceWarning:\n    'فضای ذخیره سازی شما به حداقل کاهش یافته است. لطفا برای مدیریت و افزودن فضای بیشتر هرچه سریعتر اقدام فرمایید. در صورت نادیده گرفتن این هشدار اطلاعات تاریخچه اقدامات انجام شده در سیستم برای ماههای گذشته پاک خواهند شد.',\n  freeDiskSpace: 'هشدار مدیریت فضای ذخیره سازی',\n  youCanNotRemoveAdminUsers: 'شما نمیتوانید کاربر ادمین سیستم را حذف نمایید.',\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/date-time.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  IncrementDecrement: (\n    date: Date | string,\n    num: number,\n    type: 'y' | 'mo' | 'h' | 'mi' | 'd',\n  ) => {\n    let newDate = new Date(date);\n    switch (type) {\n      case 'y':\n        return new Date(date).setFullYear(newDate.getFullYear() + num);\n      case 'mo':\n        return new Date(date).setMonth(newDate.getMonth() + num);\n      case 'd':\n        return new Date(date).setDate(newDate.getDate() + num);\n      case 'h':\n        return new Date(date).setHours(newDate.getHours() + num);\n      case 'mi':\n        return new Date(date).setMinutes(newDate.getMinutes() + num);\n    }\n  },\n  getDiffTime: (date_1: Date | string, date_2: Date | string) => {\n    let dateItem_1 = new Date(date_1).getUTCMinutes();\n    let dateItem_2 = new Date(date_2).getUTCMinutes();\n    return Math.abs(dateItem_2 - dateItem_1);\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/jwt.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HasNotRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HasRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n    src/bases/PrismaQuery.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PrismaUserOrderByWithRelationInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'orderBy',\n  serialize: (value: Prisma.UserOrderByWithRelationInput) => value,\n  parseValue: (value: Prisma.UserOrderByWithRelationInput) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserScalarFieldEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'distinct',\n  serialize: (value: Prisma.UserScalarFieldEnum) => value,\n  parseValue: (value: Prisma.UserScalarFieldEnum) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserSelect\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType,\n  Prisma.UserSelect\n>({\n  name: 'select',\n  serialize: (value: Prisma.UserSelect) => value,\n  parseValue: (value: Prisma.UserSelect) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserWhereInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'where',\n  serialize: (value: Prisma.UserWhereInput) => value,\n  parseValue: (value: Prisma.UserWhereInput) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserWhereUniqueInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'cursor',\n  serialize: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n  parseValue: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/tools.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Tools\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  encript: async (text: string) => {\n    let iv = randomBytes(16);\n    let password = 'we do encript to secure out text';\n    let key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\n    let cipher = createCipheriv('aes-256-cbc', key, iv);\n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return iv.toString('hex') + ':' + encrypted;\n  },\n  decript: async (text: string) => {\n    let iv = randomBytes(16);\n    let password = 'we do encript to secure out text';\n    let key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\n    let decipher = createDecipheriv('aes-256-ctr', key, iv);\n    let decryptedText = Buffer.concat([\n      decipher.update(Buffer.from(text, 'hex')),\n      decipher.final(),\n    ]);\n    return decryptedText.toString();\n  },\n  hash: async (password: string) => {\n    return await bcript.hash(password, await bcript.genSalt(10));\n  },\n  compareHash: async (password: string, hash: string) => {\n    return bcript.compareSync(password, hash);\n  },\n  getNumberFromString: (str: string) => {\n    return str.replace(/[^\\d]/g, ' ').trim().split(/\\s+/).map(Number);\n  },\n  matchs: (item1: string[], item2: string[]) => {\n    return item1.some((x) => item2.some((y) => y === x));\n  },\n  equal: (item1: string, item2: string) => {\n    return item1.toLowerCase() === item2.toLowerCase();\n  },\n  getDriveSize(): Promise {\n    return new Promise((resolve, reject) => {\n      const platform = os.platform();\n      const driveLetter = __dirname.charAt(0).toUpperCase();\n\n      let cmd = '';\n\n      if (platform === 'win32') {\n        cmd = `powershell -command \"Get-PSDrive -Name ${driveLetter} | Select-Object Used,Free,UsedCapacity,FreeCapacity\"`;\n      } else if (platform === 'darwin' || platform === 'linux') {\n        cmd = `df -k ${__dirname} | tail -1`;\n      }\n\n      exec(cmd, (error, stdout) => {\n        if (error) {\n          return reject(error);\n        }\n\n        let total, free;\n        if (platform === 'win32') {\n          const output = stdout.trim().split(/\\s+/);\n          free = Math.ceil((Number(output[9]) - Number(output[8])) / 1000000); // Free space in bytes\n          total = Math.ceil(Number(output[9]) / 1000000); // Total space in bytes\n        } else {\n          const data = stdout.trim().split(/\\s+/);\n          total = Number(data[1]) * 1024;\n          free = Number(data[3]) * 1024;\n        }\n        resolve({ total, free });\n      });\n    });\n  },\n  //#region ------------- IsAuthenticated ------------------\n  async GetUserInfoFromContext(\n    ctx: Context,\n    jwtService: JwtService,\n    prismaService: PrismaService,\n  ) {\n    if (ctx.req && ctx.req.cookies && ctx.req.cookies['jwt']) {\n      let userId = jwtService.decode(ctx.req.cookies['jwt']).sub;\n      let existUserAuth = await prismaService.auth.findFirst({\n        where: { userId: { equals: userId } },\n      });\n      if (existUserAuth) {\n        return existUserAuth;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  },\n  //#endregion\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
