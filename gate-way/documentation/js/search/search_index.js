var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsToGraphQLErrorFilter.html",[0,0.287,1,2.478]],["body/classes/AllExceptionsToGraphQLErrorFilter.html",[0,0.442,1,3.333,2,0.488,3,0.144,4,0.126,5,0.126,6,2.616,7,3.133,8,4.521,9,0.463,10,1.917,11,3.19,12,3.95,13,4.128,14,4.873,15,0.219,16,3.705,17,0.822,18,0.017,19,0.219,20,0.285,21,0.687,22,3.705,23,1.39,24,0.265,25,3.95,26,1.477,27,3.95,28,1.066,29,2.53,30,1.527,31,3.95,32,2.616,33,2.865,34,2.865,35,2.616,36,2.865,37,2.616,38,1.831,39,1.236,40,3.104,41,2.417,42,0.227,43,2.11,44,0.687,45,4.521,46,1.727,47,0.932,48,3.076,49,2.865,50,2.865,51,5.112,52,2.865,53,2.865,54,2.865,55,2.865,56,2.865,57,2.865,58,2.865,59,2.865,60,2.324,61,4.458,62,3.95,63,2.477,64,2.865,65,2.865,66,2.865,67,2.865,68,2.865,69,4.128,70,2.616,71,2.417,72,2.865,73,2.865,74,2.865,75,2.865,76,2.865,77,2.865,78,2.41,79,2.865,80,2.616,81,2.865,82,3.95,83,4.521,84,3.95,85,2.909,86,3.95,87,2.865,88,2.865,89,2.865,90,2.616,91,0.719,92,2.865,93,2.865,94,2.865,95,2.865,96,2.865,97,2.865,98,3.95,99,3.95,100,3.95,101,2.865,102,2.251,103,2.21,104,1.776,105,2.865,106,2.865,107,2.616,108,2.586,109,2.417,110,3.95,111,2.865,112,3.95,113,3.104,114,3.333,115,2.865,116,2.865,117,1.893,118,1.986,119,2.865,120,2.865,121,2.865,122,2.865,123,2.865,124,2.865,125,2.865,126,1.215,127,2.865,128,2.865,129,2.865,130,1.27,131,1.328,132,3.95,133,1.328,134,1.328,135,2.865,136,2.865,137,2.865,138,0.011,139,0.011]],["title/modules/AppModule.html",[140,1.728,141,2.682]],["body/modules/AppModule.html",[0,0.338,3,0.173,4,0.152,5,0.152,18,0.017,24,0.303,28,1.286,29,2.507,30,1.843,42,0.173,43,4.108,138,0.012,139,0.012,140,2.924,141,5.572,142,2.396,143,2.546,144,2.917,145,2.917,146,2.546,147,4.192,148,2.917,149,3.86,150,3.86,151,3.86,152,4.706,153,4.706,154,4.706,155,4.706,156,4.384,157,2.707,158,4.706,159,3.779,160,2.917,161,2.546,162,4.471,163,3.779,164,4.471,165,5.001,166,0.792,167,4.471,168,4.471,169,3.457,170,4.471,171,3.86,172,2.263,173,4.471,174,3.86,175,3.86,176,4.471,177,4.471,178,2.034,179,4.471,180,5.792,181,2.717,182,3.298,183,4.471,184,3.86,185,4.471,186,3.457,187,4.471,188,4.471,189,4.471,190,4.471,191,3.86,192,3.157,193,4.471,194,4.471,195,4.471]],["title/modules/AuthModule.html",[140,1.728,152,2.478]],["body/modules/AuthModule.html",[0,0.366,3,0.188,4,0.164,5,0.164,18,0.017,24,0.293,28,1.392,30,1.995,42,0.188,138,0.013,139,0.013,140,3.035,142,2.594,143,2.757,144,3.158,145,3.158,146,2.757,147,4.351,148,4.351,152,5.091,157,2.763,159,3.976,160,3.158,161,2.757,163,3.976,171,5.261,172,2.45,178,2.203,196,4.18,197,4.18,198,4.18,199,4.934,200,3.947,201,3.947,202,3.531,203,4.841,204,2.942,205,4.841,206,4.841,207,2.942,208,6.094,209,4.108,210,4.18,211,2.45,212,4.841,213,4.841,214,2.757,215,4.841,216,4.841,217,1.995,218,2.942,219,3.158,220,4.841,221,4.18,222,4.841,223,4.18]],["title/classes/AuthResolver.html",[0,0.287,199,2.478]],["body/classes/AuthResolver.html",[0,0.261,2,0.455,3,0.134,4,0.117,5,0.117,9,0.431,10,1.825,15,0.415,17,1.523,18,0.017,19,0.46,20,0.352,21,1.274,23,2.577,24,0.276,28,0.993,42,0.134,47,0.608,48,2.89,113,3.422,126,2.252,138,0.01,139,0.01,166,0.612,199,3.173,202,2.93,204,2.099,210,2.982,217,3.18,224,2.982,225,5.771,226,5.277,227,4.354,228,3.204,229,5.563,230,5.631,231,5.771,232,0.873,233,3.454,234,3.454,235,4.864,236,2.982,237,3.669,238,1.812,239,6.113,240,3.454,241,3.094,242,3.681,243,4.864,244,1.241,245,3.454,246,2.982,247,3.173,248,3.454,249,3.481,250,2.982,251,3.916,252,3.454,253,2.85,254,2.982,255,3.454,256,3.454,257,2.332,258,3.454,259,2.982,260,3.669,261,3.454,262,1.595,263,2.982,264,3.454,265,4.861,266,5.277,267,5.771,268,4.199,269,0.701,270,2.982,271,2.982,272,1.851,273,1.851,274,2.607,275,2.607,276,2.099,277,0.701,278,0.8,279,2.607,280,2.671,281,2.099,282,1.975,283,1.691,284,1.249,285,2.972,286,3.454,287,1.975,288,1.296,289,3.454,290,3.454,291,3.454,292,3.454,293,3.454,294,3.454,295,3.454,296,4.861,297,3.454,298,3.454,299,2.982,300,2.439,301,2.671,302,2.671,303,3.454,304,3.454]],["title/classes/BaseQuery.html",[0,0.287,305,2.308]],["body/classes/BaseQuery.html",[0,0.491,2,0.526,3,0.155,4,0.135,5,0.135,9,0.498,15,0.359,18,0.017,19,0.447,20,0.296,24,0.252,39,1.47,42,0.252,44,0.74,47,0.812,91,1.179,117,1.614,126,1.308,138,0.011,139,0.011,166,0.707,238,1.603,244,0.81,262,1.992,269,0.81,277,0.81,278,0.925,279,2.139,283,2.253,284,1.61,305,3.692,306,2.603,307,2.081,308,4.24,309,4.79,310,3.794,311,3.506,312,1.245,313,4.122,314,4.122,315,4.122,316,1.757,317,2.082,318,3.991,319,3.991,320,3.991,321,2.116,322,3.087,323,3.252,324,2.818,325,2.679,326,2.818,327,2.603,328,2.818,329,3.794,330,2.818,331,2.818,332,5.126,333,2.818,334,2.818,335,2.818,336,3.506,337,2.818,338,2.818,339,2.818,340,2.818,341,2.818,342,2.818,343,2.818,344,2.818,345,2.818,346,2.272,347,2.818,348,2.818,349,2.818,350,2.603,351,2.139,352,3.506,353,2.818,354,2.818,355,2.112,356,1.913,357,2.818,358,2.139,359,3.265]],["title/classes/Counter.html",[0,0.287,279,2.035]],["body/classes/Counter.html",[0,0.499,2,0.548,3,0.161,4,0.141,5,0.141,9,0.519,15,0.246,18,0.017,19,0.443,20,0.203,24,0.256,39,1.599,42,0.256,44,0.771,47,0.825,91,1.283,117,1.659,126,1.363,138,0.012,139,0.012,166,0.736,238,1.097,244,0.844,262,1.363,269,0.844,277,0.844,278,0.964,279,2.96,283,2.228,284,1.526,305,3.357,306,2.713,307,2.064,308,4.311,309,4.857,310,2.936,311,2.713,312,1.28,313,3.357,314,3.357,315,3.357,316,1.711,317,1.425,321,2.134,322,3.13,323,3.297,324,2.936,325,2.707,326,2.936,327,2.713,328,2.936,329,3.9,330,2.936,331,2.936,332,5.174,333,2.936,334,2.936,335,3.9,336,4.487,337,2.936,338,2.936,339,2.936,340,2.936,341,2.936,342,2.936,343,2.936,344,2.936,345,2.936,346,2.368,347,2.936,348,2.936,349,2.936,350,2.713,351,2.229,352,3.604,353,2.936,354,2.936,355,2.171,356,1.994,357,2.936,358,2.229,359,3.357,360,4.159]],["title/classes/CreateUserDto.html",[0,0.287,361,1.821]],["body/classes/CreateUserDto.html",[0,0.519,2,0.457,3,0.134,4,0.118,5,0.118,9,0.433,15,0.382,18,0.017,19,0.454,20,0.315,24,0.237,42,0.259,44,0.643,46,1.691,47,0.987,91,0.946,117,1.464,138,0.01,139,0.01,166,0.614,238,1.702,244,1.358,262,2.007,269,0.703,277,0.703,278,0.803,282,1.925,283,2.303,284,1.694,287,1.925,288,1.829,307,2.105,312,1.13,321,2.08,325,1.829,355,2.406,356,1.661,361,2.337,362,1.973,363,3.093,364,3.265,365,2.194,366,3.093,367,1.843,368,4.555,369,2.991,370,3.465,371,2.991,372,3.465,373,3.77,374,3.465,375,2.991,376,3.465,377,3.465,378,2.776,379,3.81,380,1.973,381,1.857,382,3.128,383,2.106,384,2.963,385,1.973,386,3.265,387,1.973,388,1.973,389,1.973,390,1.973,391,1.973,392,1.973,393,1.3,394,1.973,395,1.3,396,1.973,397,2.963,398,1.661,399,2.106,400,1.343,401,1.973,402,1.973,403,2.468,404,1.973,405,1.973,406,1.661,407,3.81,408,3.428,409,2.106,410,2.106,411,1.661,412,2.963,413,2.776,414,1.661,415,1.973,416,1.857,417,1.661,418,1.973,419,1.857,420,2.776,421,2.106]],["title/injectables/CustomLogger.html",[26,0.96,43,2.163]],["body/injectables/CustomLogger.html",[0,0.418,1,2.179,3,0.13,4,0.113,5,0.113,6,2.359,7,2.546,8,3.674,9,0.417,10,1.782,11,2.405,12,2.583,13,2.359,14,3.674,15,0.391,17,1.336,18,0.017,19,0.356,20,0.323,21,1.117,23,2.259,24,0.256,25,4.276,26,1.397,27,3.674,28,0.961,29,2.393,30,1.377,31,3.674,32,2.359,33,2.583,34,2.583,35,2.359,36,2.583,37,2.359,38,1.703,39,1.15,40,2.887,41,2.179,42,0.214,43,2.705,44,0.881,45,4.92,46,1.813,47,0.979,48,3.158,49,2.583,50,3.674,51,5.26,52,2.583,53,3.674,54,2.583,55,3.674,56,2.583,57,3.674,58,2.583,59,4.276,60,2.74,61,4.314,62,3.674,63,2.367,64,2.583,65,2.583,66,2.583,67,2.583,68,2.583,69,3.904,70,2.359,71,2.179,72,2.583,73,2.583,74,2.583,75,2.583,76,2.583,77,2.583,78,2.279,79,2.583,80,2.359,81,2.583,82,3.674,83,4.276,84,3.674,85,2.705,86,3.674,87,2.583,88,2.583,89,2.583,90,2.359,91,0.648,92,2.583,93,2.583,94,2.583,95,2.583,96,2.583,97,2.583,98,3.674,99,3.674,100,3.674,101,2.583,102,2.03,103,2.056,104,1.601,105,2.583,106,2.583,107,2.359,108,2.405,109,2.179,110,3.674,111,2.583,112,3.674,113,2.887,114,3.099,115,2.583,116,2.583,117,1.809,118,1.79,119,2.583,120,2.583,121,2.583,122,2.583,123,2.583,124,2.583,125,2.583,126,1.095,127,2.583,128,2.583,129,2.583,130,1.145,131,1.197,132,3.674,133,1.197,134,1.197,135,2.583,136,2.583,137,2.583,138,0.01,139,0.01,312,1.101,422,1.52,423,4.751,424,4.751,425,4.751,426,3.34,427,2.367,428,4.657,429,3.34,430,3.34,431,3.34,432,2.277,433,2.056,434,3.34,435,3.34]],["title/classes/DeleteUserDto.html",[0,0.287,406,1.821]],["body/classes/DeleteUserDto.html",[0,0.532,2,0.5,3,0.147,4,0.129,5,0.129,9,0.474,15,0.224,18,0.017,19,0.451,20,0.185,24,0.247,42,0.267,44,0.704,46,1.685,47,0.981,91,1.008,117,1.56,138,0.011,139,0.011,166,0.672,238,1.001,244,1.397,262,1.244,269,0.77,277,0.77,278,0.879,282,1.98,283,2.292,284,1.683,287,1.98,288,1.948,307,2.091,312,1.203,317,1.3,321,2.118,325,1.948,355,2.502,356,1.819,361,1.819,362,2.16,363,2.489,364,2.628,365,1.941,366,2.489,367,1.631,378,2.956,379,3.92,380,2.16,381,2.033,382,3.207,383,2.306,384,3.155,385,2.16,386,3.374,387,2.16,388,2.16,389,2.16,390,2.16,391,2.16,392,2.16,393,1.423,394,2.16,395,1.423,396,2.16,397,3.155,398,1.819,399,2.306,400,1.43,401,2.16,402,2.16,403,2.628,404,2.16,405,2.16,406,2.489,407,4.145,408,3.597,409,2.306,410,2.306,411,1.819,412,3.155,413,2.956,414,1.819,415,2.16,416,2.033,417,1.819,418,2.16,419,2.033,420,2.956,421,2.306,436,3.794]],["title/classes/ForgotPasswordDto.html",[0,0.287,237,2.163]],["body/classes/ForgotPasswordDto.html",[0,0.498,2,0.623,3,0.183,4,0.16,5,0.16,9,0.59,15,0.355,18,0.017,19,0.445,20,0.293,24,0.256,42,0.256,47,0.967,138,0.013,139,0.013,166,0.837,228,2.265,237,3.417,238,1.583,244,1.454,251,2.871,257,2.265,260,2.691,262,1.968,269,0.959,277,0.959,278,1.095,282,1.897,287,1.897,307,2.016,312,1.391,317,2.057,321,2.139,346,2.691,365,2.467,367,2.049,382,3.157,393,2.252,395,2.252,400,1.653,417,2.265,432,2.877,433,2.597,437,3.336,438,4.725,439,4.725,440,2.532]],["title/classes/ForgotPasswordModel.html",[0,0.287,241,1.922]],["body/classes/ForgotPasswordModel.html",[0,0.515,2,0.534,3,0.157,4,0.137,5,0.137,9,0.506,15,0.24,18,0.017,19,0.459,20,0.198,24,0.237,42,0.264,47,0.983,91,1.447,138,0.012,139,0.012,166,0.718,228,1.942,238,1.069,241,2.748,244,1.455,253,2.051,257,1.942,262,1.328,269,0.823,274,2.172,275,2.172,277,0.823,278,0.939,282,1.761,283,2.259,284,0.899,287,1.761,288,2.037,307,2.12,312,1.258,316,1.314,317,1.389,321,2.213,322,2.786,323,3.269,365,2.007,367,2.007,393,2.037,395,1.52,400,1.495,432,1.942,433,1.753,440,2.172,441,2.462,442,4.052,443,2.643,444,3.299,445,2.643,446,2.643,447,2.643,448,3.299,449,2.643,450,3.542,451,2.643,452,3.299,453,2.643,454,3.299,455,2.643,456,1.753,457,2.462,458,3.299,459,2.643,460,3.299,461,2.643]],["title/guards/GqlAuthGuard.html",[272,2.035,462,2.937]],["body/guards/GqlAuthGuard.html",[0,0.451,3,0.127,4,0.111,5,0.111,7,2.516,9,0.41,10,1.761,11,1.663,15,0.278,17,1.041,18,0.017,19,0.278,20,0.229,21,0.871,23,1.232,24,0.29,26,1.597,28,0.945,29,2.995,30,1.354,42,0.255,44,0.871,48,2.946,60,1.495,63,2.153,78,2.981,91,1.16,103,2.845,104,1.575,108,3.566,117,0.987,118,3.203,126,2.343,138,0.01,139,0.01,157,2.643,166,0.582,172,1.663,178,1.495,181,1.996,182,1.87,200,1.76,201,1.76,202,2.25,204,1.996,207,1.996,209,4.07,211,1.663,214,3.941,217,2.606,218,1.996,219,2.143,232,1.384,242,1.76,244,0.667,247,3.062,249,2.673,269,0.667,272,2.516,273,1.76,276,1.996,277,0.667,278,0.761,281,1.996,284,0.728,285,2.031,367,0.905,400,0.905,456,2.031,463,2.54,464,1.996,465,4.464,466,3.285,467,3.285,468,3.868,469,4.464,470,3.285,471,1.996,472,3.314,473,2.319,474,3.314,475,2.143,476,2.319,477,3.868,478,2.143,479,1.473,480,1.41,481,1.996,482,1.996,483,1.575,484,1.996,485,2.319,486,2.319,487,1.609,488,3.314,489,3.314,490,3.119,491,3.314,492,2.319,493,3.314,494,2.319,495,2.319,496,2.319,497,2.319,498,2.319,499,2.319,500,2.319,501,2.853,502,2.673,503,2.319,504,3.314,505,3.314,506,2.853,507,2.143,508,2.143,509,1.996,510,2.319,511,2.143,512,1.996,513,2.319,514,1.996,515,2.319,516,4.22,517,2.319,518,3.314,519,4.22,520,2.319,521,2.853,522,1.996,523,2.143,524,1.996,525,1.996,526,1.996,527,3.314,528,3.314,529,3.314,530,3.632,531,3.314,532,3.062,533,3.062,534,2.319,535,2.143,536,3.062]],["title/injectables/GraphQLLoggingMiddleware.html",[26,0.96,102,2.308]],["body/injectables/GraphQLLoggingMiddleware.html",[0,0.438,1,2.375,3,0.141,4,0.123,5,0.123,6,2.571,7,2.705,8,3.903,9,0.455,11,2.555,12,2.815,13,2.571,14,3.903,15,0.343,18,0.017,20,0.246,24,0.264,25,3.903,26,1.464,27,3.903,28,1.047,29,2.941,30,1.501,31,3.903,32,2.571,33,2.815,34,2.815,35,2.571,36,2.815,37,2.571,38,1.809,39,1.221,40,3.067,41,2.375,42,0.225,43,2.073,44,0.675,45,4.48,46,1.718,47,0.93,48,3.067,49,2.815,50,2.815,51,5.08,52,2.815,53,2.815,54,2.815,55,2.815,56,2.815,57,2.815,58,2.815,59,2.815,60,2.297,61,4.434,62,3.903,63,2.671,64,2.815,65,2.815,66,2.815,67,2.815,68,2.815,69,4.09,70,2.571,71,2.375,72,2.815,73,2.815,74,2.815,75,2.815,76,2.815,77,2.815,78,2.387,79,2.815,80,2.571,81,2.815,82,3.903,83,4.48,84,3.903,85,2.874,86,3.903,87,2.815,88,2.815,89,2.815,90,2.571,91,0.707,92,2.815,93,2.815,94,2.815,95,2.815,96,2.815,97,2.815,98,3.903,99,3.903,100,3.903,101,2.815,102,3.067,103,2.941,104,2.777,105,4.48,106,3.903,107,4.09,108,2.555,109,2.375,110,3.903,111,2.815,112,3.903,113,3.067,114,3.293,115,2.815,116,2.815,117,1.879,118,1.951,119,2.815,120,2.815,121,2.815,122,2.815,123,2.815,124,2.815,125,2.815,126,1.194,127,2.815,128,2.815,129,2.815,130,1.248,131,1.305,132,3.903,133,1.305,134,1.305,135,2.815,136,2.815,137,2.815,138,0.011,139,0.011,312,1.169,422,1.657,432,2.777,433,2.507,537,3.641,538,3.641,539,3.641]],["title/classes/GraphQlBadGatewayException.html",[0,0.287,540,1.425]],["body/classes/GraphQlBadGatewayException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.765,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,546,3.295,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358]],["title/classes/GraphQlBadRequestException.html",[0,0.287,549,1.302]],["body/classes/GraphQlBadRequestException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.612,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,570,3.295]],["title/classes/GraphQlConflictException.html",[0,0.287,558,1.425]],["body/classes/GraphQlConflictException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.765,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,571,3.295]],["title/classes/GraphQlForbiddenException.html",[0,0.287,479,1.192]],["body/classes/GraphQlForbiddenException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.476,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,572,3.295]],["title/classes/GraphQlInternalServerErrorException.html",[0,0.287,564,1.425]],["body/classes/GraphQlInternalServerErrorException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.765,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,573,3.295]],["title/classes/GraphQlMethodNotAllowedException.html",[0,0.287,567,1.425]],["body/classes/GraphQlMethodNotAllowedException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.765,568,1.358,569,1.358,574,3.295]],["title/classes/GraphQlNotAcceptableException.html",[0,0.287,554,1.425]],["body/classes/GraphQlNotAcceptableException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.765,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,575,3.295]],["title/classes/GraphQlNotFoundException.html",[0,0.287,552,1.361]],["body/classes/GraphQlNotFoundException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.686,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,576,3.295]],["title/classes/GraphQlNotImplementedException.html",[0,0.287,565,1.425]],["body/classes/GraphQlNotImplementedException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.765,566,1.358,567,1.236,568,1.358,569,1.358,577,3.295]],["title/classes/GraphQlPayloadTooLargeException.html",[0,0.287,560,1.425]],["body/classes/GraphQlPayloadTooLargeException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.765,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,578,3.295]],["title/classes/GraphQlRequestTimeoutException.html",[0,0.287,556,1.425]],["body/classes/GraphQlRequestTimeoutException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.765,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,579,3.295]],["title/classes/GraphQlUnauthorizedException.html",[0,0.287,480,1.141]],["body/classes/GraphQlUnauthorizedException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,1.413,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.236,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,580,3.295]],["title/classes/GraphQlUnsupportedMediaTypeException.html",[0,0.287,562,1.425]],["body/classes/GraphQlUnsupportedMediaTypeException.html",[0,0.557,2,0.434,3,0.128,4,0.112,5,0.112,15,0.195,17,0.731,18,0.017,19,0.195,20,0.161,21,0.611,24,0.128,38,2.68,39,0.797,42,0.286,44,1.378,46,1.969,47,0.934,130,2.527,131,2.643,133,1.181,134,2.844,138,0.01,139,0.01,232,1.877,316,1.809,427,1.295,479,1.034,480,0.99,487,2.527,540,1.236,541,1.849,542,1.295,543,1.358,544,2.939,545,3.099,547,3.039,548,1.358,549,1.129,550,1.358,551,1.295,552,1.181,553,1.358,554,1.236,555,1.358,556,1.236,557,1.358,558,1.236,559,1.358,560,1.236,561,1.358,562,1.765,563,1.358,564,1.236,565,1.236,566,1.358,567,1.236,568,1.358,569,1.358,581,3.295]],["title/modules/GraphqlModule.html",[140,1.728,153,2.478]],["body/modules/GraphqlModule.html",[0,0.384,3,0.197,4,0.172,5,0.172,10,1.907,15,0.301,17,1.127,18,0.017,19,0.301,20,0.248,21,0.943,23,1.907,24,0.284,28,1.462,40,3.089,41,4.098,42,0.197,46,1.284,48,2.095,60,2.313,91,1.447,102,3.089,107,3.589,108,3.18,109,4.098,126,1.666,130,1.742,138,0.013,139,0.013,140,2.859,142,2.724,153,4.448,163,3.316,184,4.388,192,3.589,269,1.032,284,1.393,428,3.931,582,5.083,583,5.083,584,6.282,585,7.123,586,5.083,587,4.388,588,5.083,589,6.282,590,4.388,591,6.282,592,5.083,593,5.083,594,5.083,595,5.083,596,5.083,597,5.083,598,5.083,599,5.083,600,5.083,601,5.083,602,5.083,603,5.083,604,5.083,605,5.083,606,5.083,607,4.388,608,5.083,609,5.083]],["title/injectables/JWTRefreshTokenStrategy.html",[26,0.96,200,2.035]],["body/injectables/JWTRefreshTokenStrategy.html",[0,0.452,3,0.128,4,0.112,5,0.112,7,2.521,9,0.412,10,1.765,11,1.668,15,0.278,17,1.043,18,0.017,19,0.278,20,0.229,21,0.872,23,1.236,24,0.29,26,1.599,28,0.948,29,2.739,30,1.358,42,0.255,44,1.018,48,3.013,60,1.499,63,2.157,78,2.983,91,1.162,103,2.848,104,1.58,108,3.569,117,0.99,118,3.208,126,2.345,138,0.01,139,0.01,157,2.375,166,0.584,172,1.668,178,1.499,181,2.002,182,1.876,200,2.521,201,1.766,202,2.255,204,2.002,207,2.002,209,4.015,211,1.668,214,4.015,217,2.262,218,2.002,219,2.15,232,1.387,244,0.669,247,3.069,249,2.679,269,0.669,272,1.766,273,1.766,276,2.002,277,0.669,278,0.763,281,2.002,284,0.731,285,2.036,367,0.908,400,0.908,422,1.499,456,2.036,464,2.002,465,3.874,468,3.322,469,3.874,471,2.002,472,3.874,473,2.327,474,3.874,475,2.15,476,2.327,477,3.874,478,2.15,479,1.476,480,1.413,481,2.002,482,2.002,483,1.58,484,2.002,485,2.327,486,3.322,487,1.612,488,3.322,489,3.322,490,3.124,491,3.322,492,2.327,493,3.322,494,2.327,495,2.327,496,2.327,497,3.322,498,2.327,499,2.327,500,3.322,501,3.637,502,2.679,503,2.327,504,3.322,505,3.322,506,2.859,507,2.15,508,2.15,509,2.002,510,2.327,511,2.15,512,2.002,513,2.327,514,2.002,515,2.327,516,4.226,517,2.327,518,3.322,519,4.226,520,2.327,521,2.859,522,2.002,523,2.15,524,2.002,525,2.002,526,2.002,527,3.322,528,3.322,529,3.322,530,3.637,531,3.322,532,3.069,533,3.069,534,2.327,535,2.15,536,3.069,610,4.062,611,3.295,612,3.295]],["title/injectables/JWTStrategy.html",[26,0.96,201,2.035]],["body/injectables/JWTStrategy.html",[0,0.453,3,0.128,4,0.112,5,0.112,7,2.527,9,0.413,10,1.769,11,1.673,15,0.279,17,1.046,18,0.017,19,0.279,20,0.23,21,0.874,23,1.24,24,0.29,26,1.601,28,0.951,29,2.742,30,1.362,42,0.256,44,1.019,48,2.908,60,1.504,63,2.16,78,2.985,91,1.163,103,2.851,104,1.585,108,3.572,117,0.993,118,3.212,126,2.347,138,0.01,139,0.01,157,2.378,166,0.585,172,1.673,178,1.504,181,2.009,182,1.882,200,1.771,201,2.527,202,2.26,204,2.009,207,2.009,209,4.018,211,1.673,214,3.948,217,2.612,218,2.009,219,2.156,232,1.389,242,1.771,244,0.671,247,3.076,249,2.685,269,0.671,272,1.771,273,1.771,276,2.009,277,0.671,278,0.766,281,2.009,284,0.733,285,2.04,367,0.911,400,0.911,422,1.504,456,2.594,464,2.009,465,3.881,468,3.329,469,3.881,471,2.009,472,3.329,473,2.334,474,3.329,475,2.156,476,2.334,477,3.881,478,2.156,479,1.479,480,1.416,481,2.009,482,2.009,483,1.585,484,2.009,485,3.329,486,3.329,487,1.616,488,3.329,489,3.329,490,3.13,491,3.329,492,2.334,493,3.329,494,3.329,495,2.334,496,2.334,497,2.334,498,2.334,499,2.334,500,2.334,501,3.34,502,2.685,503,2.334,504,3.329,505,3.329,506,2.865,507,2.156,508,2.156,509,2.009,510,2.334,511,2.156,512,2.009,513,2.334,514,2.009,515,2.334,516,4.232,517,2.334,518,3.329,519,4.232,520,2.334,521,2.865,522,2.009,523,2.156,524,2.009,525,2.009,526,2.009,527,3.329,528,3.329,529,3.329,530,3.642,531,3.329,532,3.076,533,3.076,534,2.334,535,2.156,536,3.076,610,4.071,613,3.305,614,3.305]],["title/classes/JwtPayLoad.html",[0,0.287,456,1.643]],["body/classes/JwtPayLoad.html",[0,0.514,2,0.532,3,0.157,4,0.137,5,0.137,9,0.504,15,0.362,18,0.017,19,0.457,20,0.298,24,0.237,42,0.264,47,0.984,91,1.446,138,0.012,139,0.012,166,0.715,228,1.935,241,2.043,244,1.512,253,2.043,257,1.935,269,0.819,274,2.163,275,2.163,277,0.819,278,0.935,282,1.758,283,2.257,284,0.895,287,1.758,288,2.032,307,2.109,312,1.255,316,1.31,321,2.212,322,2.78,323,3.265,365,2.003,367,1.973,393,2.032,395,1.514,400,1.492,440,2.163,441,2.453,443,2.633,444,3.291,445,2.633,446,2.633,447,2.633,448,3.291,449,2.633,450,3.533,451,2.633,452,3.291,453,2.633,454,3.291,455,2.633,456,2.343,457,3.713,458,3.291,459,2.633,460,3.291,461,2.633,615,4.037,616,4.037,617,4.037]],["title/injectables/KafkaHumanResourceService.html",[26,0.96,618,2.478]],["body/injectables/KafkaHumanResourceService.html",[0,0.404,3,0.207,4,0.181,5,0.181,9,0.668,10,2.432,15,0.384,17,1.438,18,0.017,19,0.413,20,0.316,21,1.202,23,2.007,24,0.251,26,1.638,28,1.539,42,0.207,103,2.315,104,2.565,138,0.014,139,0.014,223,4.619,232,1.638,400,1.474,422,2.434,428,4.137,501,3.251,618,4.729,619,4.619,620,5.013,621,5.35,622,7.25,623,5.35,624,6.482,625,5.35,626,4.137,627,5.35,628,5.35,629,5.35,630,5.35,631,5.35,632,3.777,633,5.35,634,5.35,635,5.35,636,6.974,637,5.35,638,5.35,639,5.35,640,5.35,641,5.35,642,4.619,643,4.619]],["title/modules/KafkaModule.html",[140,1.728,154,2.478]],["body/modules/KafkaModule.html",[0,0.408,3,0.21,4,0.183,5,0.183,18,0.017,19,0.32,24,0.272,28,1.555,42,0.21,138,0.014,139,0.014,140,3.188,142,2.897,143,3.078,144,3.526,145,3.526,146,3.078,147,4.57,148,3.526,154,4.936,159,4.255,160,3.526,161,3.078,163,3.526,178,2.459,544,2.124,587,4.666,618,4.936,626,4.18,644,4.666,645,4.666,646,5.405,647,5.405,648,6.522,649,5.405,650,5.405,651,5.405,652,5.405,653,5.405,654,5.405,655,5.405,656,5.405,657,5.405,658,5.405]],["title/classes/LoginDto.html",[0,0.287,251,2.308]],["body/classes/LoginDto.html",[0,0.498,2,0.623,3,0.183,4,0.16,5,0.16,9,0.59,15,0.355,18,0.017,19,0.445,20,0.293,24,0.256,42,0.256,47,0.967,138,0.013,139,0.013,166,0.837,228,2.265,237,2.691,238,1.583,244,1.454,251,3.647,257,2.265,260,2.691,262,1.968,269,0.959,277,0.959,278,1.095,282,1.897,287,1.897,307,2.016,312,1.391,317,2.057,321,2.139,346,2.691,365,2.467,367,2.049,382,3.157,393,2.252,395,2.252,400,1.653,417,2.265,432,2.877,433,2.597,437,3.336,440,2.532,659,4.725,660,4.725]],["title/classes/LoginModel.html",[0,0.287,253,1.922]],["body/classes/LoginModel.html",[0,0.511,2,0.522,3,0.154,4,0.134,5,0.134,9,0.495,15,0.316,18,0.017,19,0.459,20,0.261,24,0.235,42,0.262,47,0.983,91,1.441,138,0.011,139,0.011,166,0.701,228,1.899,238,1.411,241,2.005,244,1.447,253,2.706,257,1.899,262,1.753,269,0.804,274,2.123,275,2.123,277,0.804,278,0.918,282,1.741,283,2.25,284,0.878,287,1.741,288,2.006,307,2.122,312,1.239,316,1.294,317,1.832,321,2.207,322,2.754,323,3.244,365,2.286,367,1.997,393,2.006,395,1.486,400,1.473,432,2.563,433,2.313,440,2.123,441,2.407,443,2.584,444,3.249,445,2.584,446,2.584,447,2.584,448,3.249,449,2.584,450,3.488,451,2.584,452,3.249,453,2.584,454,3.249,455,2.584,456,1.714,457,2.407,458,3.249,459,2.584,460,3.249,461,2.584,661,3.961,662,3.961]],["title/classes/LoginResponse.html",[0,0.287,274,2.035]],["body/classes/LoginResponse.html",[0,0.512,2,0.524,3,0.154,4,0.135,5,0.135,9,0.497,15,0.317,18,0.017,19,0.459,20,0.262,24,0.235,42,0.263,47,0.983,91,1.466,138,0.011,139,0.011,166,0.705,228,1.908,238,1.415,241,2.015,244,1.449,253,2.015,257,1.908,262,1.759,269,0.808,274,2.875,275,2.133,277,0.808,278,0.922,282,1.745,283,2.283,284,0.883,287,1.745,288,2.013,307,2.124,312,1.243,316,1.298,317,1.838,321,2.208,322,2.761,323,3.249,365,1.989,367,1.867,393,2.013,395,1.493,400,1.478,440,2.133,441,2.419,443,2.597,444,3.26,445,2.597,446,2.597,447,2.597,448,3.26,449,2.597,450,3.5,451,2.597,452,3.26,453,2.597,454,3.26,455,2.597,456,1.722,457,2.419,458,4.119,459,2.597,460,4.119,461,2.597,663,3.981,664,3.981]],["title/injectables/MailerService.html",[26,0.96,156,2.308]],["body/injectables/MailerService.html",[0,0.39,3,0.2,4,0.175,5,0.175,9,0.644,10,2.378,13,3.642,15,0.406,17,1.144,18,0.017,19,0.305,20,0.252,21,0.956,23,1.935,24,0.246,26,1.602,28,1.483,42,0.2,47,0.963,78,2.126,103,2.97,126,1.691,138,0.014,139,0.014,156,3.852,217,2.829,232,1.734,242,2.764,284,1.144,285,2.232,312,1.469,355,2.027,422,2.347,665,6.181,666,4.453,667,6.863,668,6.339,669,6.339,670,6.339,671,7.159,672,6.181,673,5.158,674,5.473,675,5.158,676,5.158,677,5.158,678,5.158,679,5.158,680,3.988,681,4.453,682,5.473,683,4.453,684,5.158,685,5.158,686,5.158]],["title/classes/ManageAvatarUserDto.html",[0,0.287,419,2.035]],["body/classes/ManageAvatarUserDto.html",[0,0.529,2,0.489,3,0.144,4,0.126,5,0.126,9,0.464,15,0.303,18,0.017,19,0.452,20,0.25,21,0.949,24,0.245,42,0.265,44,0.689,46,1.672,47,0.981,91,1.136,117,1.987,138,0.011,139,0.011,166,0.658,238,1.35,244,1.388,262,1.677,269,0.754,277,0.754,278,0.86,282,1.967,283,2.296,284,1.678,287,1.967,288,1.92,307,2.096,312,1.185,317,1.753,321,2.109,325,1.92,355,2.479,356,1.78,361,1.78,362,2.115,363,2.453,364,2.59,365,1.919,366,2.453,367,1.613,378,2.913,379,3.894,380,2.115,381,1.99,382,3.189,383,2.257,384,3.109,385,2.115,386,3.349,387,2.115,388,2.115,389,2.115,390,2.115,391,2.115,392,2.115,393,1.393,394,2.115,395,1.393,396,2.115,397,3.109,398,1.78,399,2.257,400,1.409,401,2.115,402,2.115,403,2.59,404,2.115,405,2.115,406,1.78,407,3.894,408,3.557,409,2.257,410,2.257,411,1.78,412,3.109,413,2.913,414,1.78,415,2.115,416,1.99,417,1.78,418,2.115,419,2.742,420,3.767,421,2.257,687,3.714,688,3.714]],["title/classes/MenuStructureModel.html",[0,0.287,275,2.035]],["body/classes/MenuStructureModel.html",[0,0.483,2,0.447,3,0.131,4,0.115,5,0.115,9,0.423,15,0.42,18,0.017,19,0.463,20,0.346,21,1.413,24,0.216,42,0.248,47,0.976,91,1.479,138,0.01,139,0.01,166,0.6,228,1.625,238,1.873,241,1.716,244,1.478,253,1.716,257,1.625,262,2.24,269,0.688,274,1.817,275,2.573,277,0.688,278,0.786,282,1.603,283,2.306,284,1.065,287,1.603,288,2.091,307,2.138,312,1.112,316,1.467,317,2.433,321,2.16,322,2.537,323,3.067,365,1.828,367,1.763,393,1.801,395,1.272,400,1.763,432,2.672,433,2.412,440,1.817,441,2.06,443,2.212,444,3.889,445,2.212,446,2.212,447,2.212,448,3.889,449,2.212,450,4.175,451,2.212,452,3.889,453,2.212,454,3.889,455,2.212,456,1.467,457,2.06,458,2.918,459,2.212,460,2.918,461,2.212,689,3.391,690,3.391,691,3.391,692,3.391,693,3.391,694,3.391,695,3.391,696,3.391,697,3.391]],["title/classes/PermittedPage.html",[0,0.287,351,2.035]],["body/classes/PermittedPage.html",[0,0.49,2,0.524,3,0.154,4,0.135,5,0.135,9,0.497,15,0.359,18,0.017,19,0.447,20,0.296,21,0.994,24,0.252,39,1.467,42,0.252,44,0.737,47,0.872,91,1.259,117,2.035,126,1.303,138,0.011,139,0.011,166,0.704,238,1.6,244,0.807,262,1.988,269,0.807,277,0.807,278,0.921,279,2.131,283,2.251,284,1.582,305,3.257,306,2.594,307,2.08,308,3.956,309,4.784,310,2.807,311,2.594,312,1.242,313,3.257,314,3.257,315,3.257,316,1.639,317,2.078,321,2.114,322,3.083,323,3.248,324,2.807,325,2.758,326,2.807,327,2.594,328,2.807,329,3.784,330,2.807,331,2.807,332,5.122,333,2.807,334,2.807,335,2.807,336,3.497,337,2.807,338,2.807,339,2.807,340,2.807,341,2.807,342,2.807,343,2.807,344,3.784,345,3.784,346,3.052,347,2.807,348,2.807,349,2.807,350,2.594,351,2.872,352,4.42,353,2.807,354,2.807,355,2.663,356,1.906,357,2.807,358,2.131,359,3.257,698,3.976,699,3.976,700,3.976]],["title/injectables/PrismaAuthService.html",[26,0.96,202,1.821]],["body/injectables/PrismaAuthService.html",[0,0.171,3,0.088,4,0.077,5,0.077,9,0.283,10,1.334,11,2.729,15,0.377,17,1.373,18,0.017,19,0.366,20,0.302,21,1.148,23,2.323,24,0.262,26,0.898,28,0.652,29,2.588,30,0.935,42,0.088,48,2.357,60,2.603,61,1.479,63,2.689,69,3.096,70,3.096,71,1.479,78,1.807,85,1.291,91,1.046,103,1.897,104,1.704,108,1.799,109,1.479,117,1.718,118,1.215,126,2.135,138,0.008,139,0.008,157,2.146,166,0.402,172,1.148,178,1.032,191,1.958,192,1.601,202,1.704,209,3.405,211,1.148,214,1.291,217,3.055,218,3.017,221,3.069,225,4.286,226,4.286,227,3.391,228,1.704,229,3.786,231,3.786,232,0.898,236,1.958,237,2.827,241,2.219,242,3.065,244,1.008,246,3.069,249,3.841,250,3.069,253,2.729,254,3.069,257,1.087,259,3.069,260,2.827,265,1.958,270,1.958,276,1.378,277,0.46,278,0.525,282,1.781,284,1.196,285,3.207,287,1.781,288,1.645,300,1.601,363,1.087,365,0.743,366,1.087,367,1.367,400,1.754,405,2.497,417,1.087,422,1.032,432,1.087,433,0.981,456,1.538,457,1.378,458,3.476,460,3.476,471,1.378,478,1.479,480,1.068,481,1.378,482,1.378,483,1.087,484,1.378,490,1.291,501,1.378,502,3.525,506,3.762,507,1.479,508,1.479,509,3.276,511,2.319,512,1.378,514,1.378,522,1.378,523,1.479,524,1.378,525,2.16,526,1.378,549,1.96,552,1.274,632,1.601,680,1.754,683,3.069,701,1.958,702,3.555,703,3.555,704,1.754,705,2.268,706,2.268,707,2.51,708,3.555,709,2.268,710,2.268,711,2.268,712,2.268,713,2.268,714,3.555,715,2.268,716,5.496,717,2.268,718,2.268,719,1.754,720,2.268,721,2.268,722,3.069,723,2.268,724,2.268,725,2.268,726,4.964,727,3.069,728,2.268,729,2.268,730,5.98,731,4.385,732,4.286,733,4.371,734,4.385,735,3.555,736,6.191,737,3.555,738,3.555,739,2.268,740,2.268,741,4.655,742,4.169,743,2.268,744,4.385,745,3.555,746,4.286,747,3.555,748,2.268,749,3.555,750,2.268,751,3.555,752,3.555,753,3.555,754,3.555,755,2.268,756,3.555,757,2.268,758,2.268,759,2.268,760,2.268,761,2.268,762,2.268,763,2.268,764,3.555,765,3.555,766,4.655,767,2.268,768,3.069,769,3.555,770,3.555,771,3.786,772,3.555,773,2.268,774,2.268,775,2.268,776,2.268,777,2.268,778,1.958,779,1.958,780,1.958,781,2.268,782,2.268,783,3.786,784,1.958,785,2.268,786,2.268,787,1.958,788,3.555,789,2.268,790,3.555,791,2.268,792,2.268,793,2.268,794,4.385,795,2.268,796,2.268,797,2.268,798,2.268,799,2.268,800,2.268,801,2.268,802,2.268,803,2.268,804,2.268,805,2.268,806,2.268,807,2.268,808,2.268,809,2.268,810,2.268]],["title/classes/PrismaQuery.html",[0,0.287,811,2.308]],["body/classes/PrismaQuery.html",[0,0.395,2,0.506,3,0.149,4,0.13,5,0.13,9,0.48,15,0.418,18,0.017,19,0.396,20,0.345,24,0.248,39,0.929,42,0.274,63,2.631,78,2.759,91,1.483,138,0.011,139,0.011,166,0.68,238,1.865,269,0.78,283,2.295,312,1.213,316,1.548,321,1.105,322,3.046,368,4.992,382,2.711,386,3.642,433,3.366,811,3.181,812,2.711,813,4.947,814,4.947,815,4.947,816,4.947,817,5.143,818,4.606,819,4.947,820,4.206,821,3.84,822,5.565,823,4.206,824,3.84,825,4.947,826,4.206,827,3.84,828,5.177,829,4.206,830,3.84,831,3.84,832,3.84,833,5.177,834,4.517,835,3.84,836,2.97,837,3.315,838,3.315,839,5.343,840,2.334,841,5.177,842,5.177]],["title/injectables/PrismaService.html",[26,0.96,157,1.425]],["body/injectables/PrismaService.html",[0,0.43,3,0.221,4,0.193,5,0.193,7,3.053,9,0.712,10,2.525,15,0.337,18,0.017,23,2.138,24,0.261,26,1.701,28,1.639,42,0.221,44,1.248,138,0.014,139,0.014,157,2.525,165,6.185,166,1.009,217,2.953,285,2.465,422,2.593,843,5.811,844,4.919,845,7.657,846,5.697,847,5.697]],["title/classes/PrismaSingleQuery.html",[0,0.287,840,2.308]],["body/classes/PrismaSingleQuery.html",[0,0.426,2,0.565,3,0.166,4,0.145,5,0.145,9,0.536,15,0.254,18,0.017,19,0.411,20,0.209,24,0.259,39,1.038,42,0.282,63,2.731,78,2.864,91,1.448,138,0.012,139,0.012,166,0.759,238,1.132,269,0.871,283,2.242,312,1.306,316,1.364,321,1.234,322,2.866,368,3.028,382,2.866,386,3.734,433,3.402,811,2.606,812,3.028,813,4.359,814,4.359,815,4.359,816,4.359,817,3.703,818,3.317,819,4.87,820,3.98,822,5.516,823,3.98,825,4.87,826,3.98,828,5.173,829,3.98,833,5.373,834,4.723,836,3.317,837,3.703,838,3.703,839,5.516,840,3.426,841,5.373,842,5.373,848,4.289]],["title/injectables/PrismaUsersService.html",[26,0.96,849,2.308]],["body/injectables/PrismaUsersService.html",[0,0.196,3,0.153,4,0.088,5,0.088,9,0.325,10,1.482,11,1.316,15,0.417,17,1.564,18,0.017,19,0.417,20,0.344,21,1.307,23,2.614,24,0.273,26,0.998,28,0.748,29,2.719,30,1.072,35,1.836,37,1.836,39,0.629,40,1.58,41,2.578,42,0.101,48,2.491,60,1.183,63,2.606,78,1.072,90,1.836,91,0.767,103,1.71,104,1.247,113,1.58,117,1.435,126,2.284,138,0.008,139,0.008,157,2.268,166,0.46,178,1.183,211,1.316,217,3.197,232,0.998,242,3.469,244,0.97,277,0.528,278,0.602,282,2.004,284,0.577,285,2.926,287,2.004,300,1.836,301,2.011,302,2.011,311,1.696,313,1.58,314,1.58,315,1.58,355,2.256,358,1.394,359,1.58,361,2.559,363,1.247,364,1.316,366,1.247,367,0.716,398,2.752,400,1.862,403,2,406,3.241,411,2.559,414,2.559,422,1.183,471,1.58,481,1.58,482,1.58,483,1.247,484,1.58,506,2.904,509,1.58,512,1.58,514,1.58,522,1.58,524,1.58,525,2.401,526,1.58,533,1.696,535,1.696,549,1.638,620,3.695,704,2.011,707,4.571,716,3.411,722,2.245,732,3.411,733,4.436,742,4.674,787,2.245,811,3.244,840,3.244,849,2.401,850,2.245,851,4.779,852,4.125,853,4.125,854,3.411,855,4.125,856,3.411,857,3.411,858,4.125,859,4.125,860,4.125,861,4.125,862,2.6,863,3.951,864,2.6,865,2.245,866,3.951,867,2.6,868,3.951,869,2.6,870,3.411,871,2.6,872,3.411,873,2.6,874,3.951,875,2.6,876,4.125,877,3.411,878,2.6,879,3.951,880,4.956,881,2.6,882,3.951,883,2.6,884,3.951,885,2.6,886,3.951,887,2.6,888,3.951,889,2.6,890,2.6,891,2.245,892,2.6,893,2.011,894,2.011,895,2.6,896,2.245,897,2.245,898,2.6,899,2.6,900,2.6,901,2.245,902,2.6,903,2.6,904,2.6,905,2.6,906,2.6,907,2.6,908,2.6,909,2.6,910,2.6,911,2.6,912,1.836,913,2.6,914,3.951,915,2.6,916,2.6,917,2.6,918,2.6,919,5.337,920,2.245,921,2.6,922,2.6,923,5.337,924,2.79,925,2.011,926,2.011,927,2.6,928,1.836,929,2.6,930,2.6,931,2.6,932,2.6,933,2.6,934,2.6,935,2.6,936,2.6,937,2.6,938,2.6,939,4.779,940,2.6,941,3.951,942,2.6,943,2.6,944,2.6,945,2.245,946,2.6,947,2.6,948,2.6,949,2.6,950,2.6,951,2.245]],["title/guards/RolesGuard.html",[182,2.163,462,2.937]],["body/guards/RolesGuard.html",[0,0.451,3,0.127,4,0.111,5,0.111,7,2.516,9,0.41,10,1.761,11,1.663,15,0.278,17,1.041,18,0.017,19,0.278,20,0.229,21,0.871,23,1.232,24,0.29,26,1.597,28,0.945,29,3.049,30,1.354,42,0.255,44,0.871,48,2.946,60,1.495,63,2.153,78,2.981,91,1.16,103,2.845,104,1.575,108,3.566,117,0.987,118,3.203,126,2.343,138,0.01,139,0.01,157,2.643,166,0.582,172,1.663,178,1.495,181,1.996,182,2.673,200,1.76,201,1.76,202,2.25,204,1.996,207,1.996,209,3.744,211,1.663,214,3.941,217,2.606,218,1.996,219,2.143,232,1.384,242,1.76,244,0.667,247,3.062,249,2.673,269,0.667,272,1.76,273,1.76,276,1.996,277,0.667,278,0.761,281,1.996,284,0.728,285,2.031,367,0.905,400,0.905,456,2.031,463,2.54,464,1.996,465,4.464,468,3.868,469,4.464,471,1.996,472,3.314,473,2.319,474,3.314,475,2.143,476,2.319,477,4.643,478,2.143,479,1.473,480,1.41,481,1.996,482,1.996,483,1.575,484,1.996,485,2.319,486,2.319,487,1.609,488,3.314,489,3.314,490,3.119,491,3.314,492,2.319,493,3.314,494,2.319,495,2.319,496,2.319,497,2.319,498,2.319,499,2.319,500,2.319,501,2.853,502,2.673,503,2.319,504,3.314,505,3.314,506,2.853,507,2.143,508,2.143,509,1.996,510,2.319,511,2.143,512,1.996,513,2.319,514,1.996,515,2.319,516,4.22,517,2.319,518,3.314,519,4.22,520,2.319,521,2.853,522,1.996,523,2.143,524,1.996,525,1.996,526,1.996,527,3.314,528,3.314,529,3.314,530,3.632,531,3.314,532,3.062,533,3.062,534,2.319,535,2.143,536,3.062,952,3.285,953,3.285,954,3.285]],["title/injectables/TasksService.html",[26,0.96,158,2.478]],["body/injectables/TasksService.html",[0,0.287,3,0.147,4,0.129,5,0.129,9,0.474,10,1.95,15,0.395,17,0.842,18,0.017,19,0.395,20,0.185,21,0.704,23,2.389,24,0.267,26,1.313,28,1.093,42,0.147,63,2.042,91,0.737,103,2.249,138,0.011,139,0.011,156,3.87,157,2.584,158,3.39,169,2.937,178,1.728,186,2.937,211,1.923,217,3.089,232,1.313,238,1.371,244,0.771,277,1.055,282,1.704,284,1.527,285,2.886,287,1.704,307,1.431,325,1.425,363,2.491,364,1.923,365,1.245,366,1.821,367,1.046,385,2.163,422,1.728,444,3.87,448,3.87,452,3.158,454,3.87,483,2.491,490,2.959,502,2.163,632,4.182,681,3.279,682,3.279,704,2.937,733,4.182,742,4.019,746,3.279,768,3.279,771,3.279,784,3.279,901,3.279,912,2.682,920,4.486,924,2.682,928,2.682,955,3.279,956,6.368,957,6.368,958,6.368,959,6.368,960,5.923,961,3.799,962,3.799,963,6.368,964,3.799,965,3.799,966,3.799,967,3.799,968,3.799,969,3.799,970,3.799,971,3.799,972,3.799,973,5.197,974,3.799,975,3.279,976,5.197,977,3.799,978,3.799,979,3.799,980,3.799,981,3.799,982,3.799,983,3.799,984,3.799,985,3.799,986,3.799,987,3.799,988,3.799,989,5.197,990,3.799,991,3.799,992,3.799,993,3.799,994,3.799,995,3.799,996,3.799,997,3.799,998,3.799,999,3.799,1000,3.799,1001,3.799,1002,3.799,1003,3.799,1004,3.799,1005,5.114,1006,3.279,1007,3.279,1008,3.799,1009,3.799,1010,3.799,1011,3.799,1012,3.799]],["title/classes/ToggleActiveUserDto.html",[0,0.287,411,1.821]],["body/classes/ToggleActiveUserDto.html",[0,0.53,2,0.49,3,0.144,4,0.126,5,0.126,9,0.465,15,0.303,18,0.017,19,0.452,20,0.25,24,0.245,42,0.265,44,0.69,46,1.673,47,0.98,91,0.995,117,1.539,138,0.011,139,0.011,166,0.659,238,1.352,244,1.389,262,1.22,269,0.756,277,0.756,278,0.862,282,1.969,283,2.296,284,1.696,287,1.969,288,2.199,307,2.085,312,1.187,317,1.756,321,2.11,325,1.923,355,2.482,356,1.784,361,1.784,362,2.12,363,2.457,364,2.594,365,1.921,366,2.457,367,1.615,378,2.918,379,3.897,380,2.12,381,1.995,382,3.191,383,2.262,384,3.114,385,2.12,386,3.352,387,2.12,388,2.12,389,2.12,390,2.12,391,2.12,392,2.12,393,1.397,394,2.12,395,1.397,396,2.12,397,3.114,398,1.784,399,2.262,400,1.412,401,2.12,402,2.12,403,2.594,404,2.12,405,2.12,406,1.784,407,4.128,408,3.562,409,2.262,410,2.262,411,2.457,412,4.024,413,3.337,414,1.784,415,2.12,416,1.995,417,1.784,418,2.12,419,1.995,420,2.918,421,2.262,1013,3.722,1014,3.722]],["title/classes/UpdatePageRolesDto.html",[0,0.287,260,2.163]],["body/classes/UpdatePageRolesDto.html",[0,0.501,2,0.63,3,0.185,4,0.162,5,0.162,9,0.597,15,0.358,18,0.017,19,0.446,20,0.295,24,0.257,42,0.257,47,0.964,138,0.013,139,0.013,166,0.847,228,2.293,237,2.723,238,1.596,244,1.546,251,2.906,257,2.293,260,3.444,269,0.971,277,0.971,278,1.108,282,1.908,287,1.908,307,1.92,312,1.401,317,2.073,321,2.145,346,2.723,365,2.357,367,1.92,382,3.171,393,2.269,395,2.269,400,1.98,417,2.293,432,2.293,433,2.07,437,3.377,440,2.563,1015,4.783,1016,4.783]],["title/classes/UpdateRolesToUserDto.html",[0,0.287,414,1.821]],["body/classes/UpdateRolesToUserDto.html",[0,0.529,2,0.489,3,0.144,4,0.126,5,0.126,9,0.464,15,0.303,18,0.017,19,0.452,20,0.25,24,0.245,42,0.265,44,0.689,46,1.672,47,0.979,91,0.993,117,1.537,138,0.011,139,0.011,166,0.658,238,1.35,244,1.488,262,1.919,269,0.754,277,0.754,278,0.86,282,1.967,283,2.296,284,1.687,287,1.967,288,1.92,307,2.096,312,1.185,317,1.753,321,2.109,325,1.92,355,2.479,356,1.78,361,1.78,362,2.115,363,2.453,364,2.59,365,1.919,366,2.453,367,1.613,378,2.913,379,3.894,380,2.115,381,1.99,382,3.189,383,2.257,384,3.109,385,2.115,386,3.349,387,2.115,388,2.115,389,2.115,390,2.115,391,2.115,392,2.115,393,1.393,394,2.115,395,1.393,396,2.115,397,3.109,398,1.78,399,2.257,400,1.409,401,2.115,402,2.115,403,2.59,404,2.115,405,2.115,406,1.78,407,4.126,408,3.557,409,2.257,410,2.257,411,1.78,412,3.109,413,3.333,414,2.453,415,2.115,416,1.99,417,1.78,418,2.115,419,1.99,420,2.913,421,2.257,1017,3.714,1018,3.714]],["title/classes/UpdateUserDto.html",[0,0.287,398,1.821]],["body/classes/UpdateUserDto.html",[0,0.529,2,0.49,3,0.144,4,0.126,5,0.126,9,0.464,15,0.303,18,0.017,19,0.452,20,0.25,24,0.245,42,0.265,44,0.69,46,1.673,47,0.981,91,1.137,117,1.538,138,0.011,139,0.011,166,0.658,238,1.351,244,1.389,262,1.679,269,0.755,277,0.755,278,0.861,282,1.968,283,2.296,284,1.678,287,1.968,288,1.921,307,2.096,312,1.186,317,1.755,321,2.11,325,1.921,355,2.48,356,1.782,361,1.782,362,2.117,363,2.455,364,2.592,365,1.92,366,2.455,367,1.614,373,2.875,378,2.916,379,3.895,380,2.117,381,1.993,382,3.19,383,2.259,384,3.112,385,2.117,386,3.35,387,2.117,388,2.117,389,2.117,390,2.117,391,2.117,392,2.117,393,1.395,394,2.117,395,1.395,396,2.117,397,3.112,398,2.455,399,2.259,400,1.823,401,2.117,402,2.117,403,3.35,404,2.117,405,2.117,406,1.782,407,3.895,408,3.559,409,2.259,410,2.259,411,1.782,412,3.112,413,2.916,414,1.782,415,2.117,416,1.993,417,1.782,418,2.117,419,1.993,420,2.916,421,2.259,1019,3.718,1020,3.718]],["title/modules/UserModule.html",[140,1.728,155,2.478]],["body/modules/UserModule.html",[0,0.398,3,0.204,4,0.179,5,0.179,18,0.017,24,0.292,28,1.516,29,2.779,30,2.172,42,0.204,138,0.014,139,0.014,140,3.153,142,2.824,143,3,144,3.438,145,3.438,146,3,147,4.52,148,4.52,155,5.05,157,2.821,159,4.19,160,3.438,161,3,163,3.438,172,2.667,178,2.398,209,3.657,211,2.667,849,4.57,1021,4.549,1022,4.549,1023,4.549,1024,5.013,1025,5.269,1026,4.549,1027,5.269]],["title/classes/UserOutput.html",[0,0.287,358,2.035]],["body/classes/UserOutput.html",[0,0.5,2,0.549,3,0.162,4,0.141,5,0.141,9,0.521,15,0.247,18,0.017,19,0.443,20,0.203,24,0.257,39,1.601,42,0.257,44,0.773,47,0.826,91,1.284,117,1.662,126,1.367,138,0.012,139,0.012,166,0.738,238,1.1,244,0.846,269,0.846,277,0.846,278,0.966,279,2.235,283,2.229,284,1.527,305,3.363,306,2.72,307,2.044,308,4.316,309,4.861,310,2.944,311,2.72,312,1.282,313,3.363,314,3.363,315,3.363,316,1.666,317,1.429,321,2.135,322,3.133,323,3.3,324,2.944,325,2.751,326,2.944,327,2.72,328,2.944,329,3.907,330,2.944,331,2.944,332,5.177,333,2.944,334,2.944,335,2.944,336,3.61,337,2.944,338,2.944,339,2.944,340,2.944,341,2.944,342,2.944,343,2.944,344,2.944,345,2.944,346,2.374,347,2.944,348,2.944,349,2.944,350,2.72,351,2.235,352,3.61,353,2.944,354,2.944,355,2.175,356,1.999,357,3.907,358,2.966,359,4.184,1028,4.17]],["title/classes/Users.html",[0,0.287,325,1.425]],["body/classes/Users.html",[0,0.332,2,0.395,3,0.116,4,0.102,5,0.102,9,0.375,15,0.436,18,0.017,19,0.46,20,0.359,21,1.299,24,0.237,42,0.116,46,1.707,47,0.982,85,2.504,91,1.419,138,0.009,139,0.009,166,0.531,238,1.944,244,1.441,262,2.416,269,0.609,277,0.609,278,0.695,280,2.32,282,0.863,283,2.335,284,1.645,287,0.863,288,2.391,307,2.141,312,1.019,317,2.4,321,2.042,323,2.108,325,1.952,350,1.958,351,3.529,363,2.924,364,3.087,365,2,366,2.924,367,1.68,368,4.307,369,2.591,371,2.591,373,4.024,375,2.591,378,2.504,379,3.629,380,1.709,381,1.608,386,3.087,387,1.709,388,1.709,389,1.709,390,1.709,391,1.709,392,1.709,393,1.126,394,1.709,395,1.126,396,1.709,400,1.68,401,1.709,402,1.709,403,3.087,404,1.709,413,2.504,415,1.709,416,1.608,418,3.473,912,4.307,924,4.307,925,4.717,926,4.717,928,4.307,1029,2.591,1030,3.001,1031,3.001,1032,3.001,1033,3.001,1034,3.001,1035,3.001,1036,3.001,1037,3.001,1038,3.001,1039,3.001,1040,3.001,1041,3.001,1042,3.001,1043,3.001,1044,3.001,1045,3.001,1046,4.397,1047,3.001,1048,3.001,1049,3.001,1050,3.001,1051,3.001,1052,3.001,1053,3.001,1054,3.001]],["title/classes/UsersResolver.html",[0,0.287,1024,2.478]],["body/classes/UsersResolver.html",[0,0.178,2,0.311,3,0.142,4,0.08,5,0.08,9,0.295,10,1.376,15,0.409,17,1.531,18,0.017,19,0.461,20,0.362,21,1.28,23,2.556,24,0.255,28,0.679,39,0.571,42,0.092,47,0.458,48,2.656,91,0.712,113,3.917,126,2.234,138,0.008,139,0.008,166,0.418,217,3.17,232,0.597,238,1.798,242,3.363,244,0.479,262,2.522,263,5.418,266,5.564,267,5.564,268,3.167,269,0.479,271,2.038,272,1.265,273,3.117,279,3.117,280,1.826,281,1.435,282,1.96,283,1.979,284,1.392,285,2.948,287,1.96,288,0.886,296,2.038,299,4.744,300,4.651,301,5.094,302,5.094,325,2.182,355,0.928,358,1.966,361,2.634,398,2.634,406,3.31,411,2.634,414,2.634,416,1.966,620,4.498,707,4.431,811,3.339,840,3.339,849,3.083,852,2.038,853,5.021,854,4.38,855,4.38,856,3.167,857,5.021,858,4.38,859,4.38,860,5.021,861,5.021,865,3.167,870,2.038,872,2.038,876,3.167,877,2.038,880,5.418,891,2.038,893,1.826,894,1.826,896,2.038,897,2.038,951,4.744,1024,2.393,1026,2.038,1055,2.038,1056,5.816,1057,4.499,1058,2.361,1059,2.361,1060,3.669,1061,2.361,1062,6.587,1063,2.361,1064,4.499,1065,2.361,1066,2.361,1067,5.816,1068,3.669,1069,2.361,1070,3.669,1071,2.361,1072,2.361,1073,3.669,1074,2.361,1075,2.361,1076,3.669,1077,2.361,1078,5.816,1079,4.499,1080,2.361,1081,2.361,1082,2.361,1083,2.361,1084,3.669,1085,2.361,1086,2.361,1087,2.361,1088,2.361,1089,2.361,1090,2.361,1091,2.361,1092,2.361,1093,5.495,1094,3.669,1095,5.495,1096,3.669,1097,2.361,1098,2.361,1099,2.361,1100,2.361,1101,2.361,1102,2.361,1103,4.499,1104,2.361,1105,2.361,1106,2.361,1107,2.361,1108,2.361,1109,2.361,1110,2.361,1111,2.361,1112,2.361,1113,2.361,1114,2.361,1115,2.361,1116,3.669,1117,2.361]],["title/coverage.html",[1118,4.018]],["body/coverage.html",[0,0.6,1,2.314,5,0.12,6,4.033,18,0.017,20,0.173,26,1.836,43,2.02,63,1.394,102,2.155,138,0.011,139,0.011,146,2.02,156,2.155,157,1.331,158,2.314,182,2.02,199,2.314,200,1.901,201,1.901,202,1.7,224,3.062,237,2.02,241,1.795,251,2.155,253,1.795,260,2.02,272,1.901,273,1.901,274,1.901,275,1.901,277,0.72,279,1.901,305,2.155,306,4.035,325,1.331,351,1.901,358,1.901,361,1.7,362,3.839,398,1.7,406,1.7,411,1.7,414,1.7,419,1.901,437,4.033,441,3.954,456,1.535,462,3.832,464,4.097,479,1.113,480,1.065,483,1.7,521,2.155,540,1.331,541,2.934,542,2.934,549,1.216,552,1.271,554,1.331,556,1.331,558,1.331,560,1.331,562,1.331,564,1.331,565,1.331,567,1.331,618,2.314,619,3.062,632,5.672,665,3.062,666,3.062,701,3.062,719,2.743,811,2.155,812,4.886,820,2.504,823,2.504,826,2.504,829,2.504,834,2.504,840,2.155,843,3.062,844,3.062,849,2.155,850,3.062,955,3.062,1024,2.314,1029,3.062,1055,3.062,1118,2.743,1119,3.062,1120,3.547,1121,3.547,1122,3.547,1123,7.662,1124,7.265,1125,7.343,1126,4.956,1127,4.956,1128,4.956,1129,4.956,1130,7.515,1131,3.062,1132,3.547,1133,3.547,1134,5.712,1135,4.956,1136,4.956,1137,4.956,1138,3.547,1139,3.062,1140,3.062,1141,3.062,1142,3.547,1143,3.062,1144,3.547,1145,3.547]],["title/dependencies.html",[143,2.603,1146,2.733]],["body/dependencies.html",[0,0.478,18,0.017,20,0.251,28,1.479,30,2.119,32,4.467,39,1.777,138,0.013,139,0.013,143,2.927,166,0.91,169,3.975,172,2.602,174,4.438,175,4.438,181,3.124,207,3.124,214,2.927,269,1.044,381,2.755,475,4.471,483,2.464,590,4.438,626,3.975,674,4.438,893,5.3,894,3.975,1147,5.141,1148,5.141,1149,6.326,1150,6.853,1151,5.141,1152,5.141,1153,5.141,1154,5.141,1155,5.141,1156,5.141,1157,5.141,1158,5.141,1159,5.141,1160,6.326,1161,5.141,1162,5.141,1163,5.141,1164,5.141,1165,5.141,1166,5.141,1167,5.141,1168,5.141,1169,5.141,1170,5.141,1171,5.141,1172,5.141,1173,5.141,1174,5.141,1175,4.438,1176,5.141,1177,5.141,1178,5.141,1179,5.141,1180,5.141,1181,5.141,1182,5.141,1183,5.141,1184,5.141,1185,5.141,1186,5.141]],["title/miscellaneous/functions.html",[1187,2.235,1188,3.946]],["body/miscellaneous/functions.html",[9,0.768,18,0.015,138,0.015,139,0.015,146,4.21,1131,5.312,1187,4.344,1188,5.312,1189,6.153]],["title/index.html",[9,0.395,1190,3.165,1191,3.165]],["body/index.html",[4,0.144,18,0.017,40,2.575,71,4.084,138,0.012,139,0.012,161,4.047,186,3.276,192,3.949,307,1.167,327,2.764,530,2.575,607,4.828,642,6.352,643,3.658,818,3.276,975,4.828,1118,3.276,1119,4.828,1192,4.237,1193,4.237,1194,6.26,1195,5.592,1196,4.237,1197,4.237,1198,4.237,1199,5.592,1200,6.26,1201,4.237,1202,4.237,1203,6.657,1204,4.237,1205,6.657,1206,7.358,1207,4.237,1208,7.249,1209,4.237,1210,4.237,1211,4.237,1212,4.237,1213,4.237,1214,6.26,1215,4.237,1216,5.592,1217,4.237,1218,4.237,1219,4.237,1220,4.237,1221,4.237,1222,6.657,1223,7.108,1224,3.658,1225,5.592,1226,4.237,1227,4.237,1228,4.237,1229,4.237,1230,7.108,1231,6.657,1232,4.237,1233,5.592,1234,4.237,1235,4.237,1236,4.828,1237,7.108,1238,6.657,1239,4.237,1240,5.592,1241,4.237,1242,4.237,1243,4.237,1244,4.237,1245,6.657,1246,4.237,1247,4.237,1248,4.237,1249,4.237,1250,5.592,1251,4.237,1252,4.237,1253,4.237,1254,4.237,1255,4.237,1256,5.592,1257,4.237,1258,4.237,1259,4.237,1260,5.592,1261,4.237,1262,4.237,1263,5.747,1264,5.592,1265,4.237,1266,4.237,1267,4.237,1268,4.237,1269,4.237,1270,4.237,1271,4.237,1272,4.237,1273,5.592,1274,4.237,1275,3.658,1276,4.237,1277,4.237,1278,4.237,1279,4.237,1280,4.237,1281,4.237,1282,4.237,1283,5.592,1284,4.237,1285,4.237,1286,4.237,1287,4.237,1288,5.592,1289,4.237,1290,4.237,1291,4.237,1292,5.592,1293,5.592,1294,4.237,1295,4.237,1296,4.237,1297,4.237,1298,4.237,1299,4.237,1300,4.237,1301,4.237,1302,4.237,1303,4.237,1304,3.658,1305,4.237,1306,4.237,1307,4.237,1308,4.237,1309,4.237,1310,4.237,1311,3.658]],["title/modules.html",[142,2.785]],["body/modules.html",[18,0.015,138,0.015,139,0.015,141,4.205,142,3.192,152,3.885,153,3.885,154,3.885,155,3.885,1263,6.482,1275,5.141,1312,7.508,1313,7.508,1314,7.641,1315,5.955]],["title/overview.html",[1316,4.486]],["body/overview.html",[2,0.654,18,0.017,43,3.841,85,2.826,138,0.013,139,0.013,140,2.258,141,5.602,142,2.66,143,2.826,144,3.238,145,3.238,146,2.826,147,3.238,148,3.238,149,4.285,150,4.285,151,4.285,152,5.086,153,4.401,154,4.742,155,4.957,156,4.099,157,2.727,158,4.401,159,4.038,160,3.238,161,2.826,196,4.285,197,4.285,198,4.285,199,4.608,200,3.615,201,3.615,202,3.234,422,2.258,463,3.838,618,4.401,644,4.285,645,4.285,849,4.099,1021,4.285,1022,4.285,1023,4.285,1024,4.608,1316,4.285,1317,4.963,1318,4.963,1319,4.963]],["title/properties.html",[312,1.059,1146,2.733]],["body/properties.html",[18,0.017,138,0.015,139,0.015,307,1.679,312,1.412,836,4.712,1175,5.261,1304,5.261,1311,5.261,1320,6.093,1321,6.093,1322,6.093]],["title/miscellaneous/variables.html",[114,2.982,1187,2.235]],["body/miscellaneous/variables.html",[9,0.276,18,0.017,19,0.335,20,0.26,29,1.509,47,0.849,48,0.912,60,1.586,61,3.194,63,2.706,78,2.018,80,1.562,85,1.26,114,1.443,117,1.471,126,2.342,138,0.007,139,0.007,157,1.308,161,1.985,217,2.196,227,1.711,244,0.449,249,1.26,273,1.868,277,0.708,282,0.636,285,2.305,287,0.636,308,1.443,313,1.344,314,1.344,315,1.344,316,0.535,336,1.443,351,1.186,352,1.443,355,0.869,359,1.344,365,1.605,403,1.12,407,1.26,420,1.26,432,3.1,433,3.263,464,1.344,483,1.671,490,1.985,502,1.26,521,2.119,530,1.344,532,2.815,536,2.274,551,0.869,672,4.227,680,2.696,707,1.562,719,2.696,727,1.91,733,1.562,741,1.91,766,1.91,778,1.91,779,1.91,780,1.91,783,3.725,812,1.562,813,1.711,814,1.711,815,1.711,816,2.696,819,2.696,820,2.462,822,3.787,823,2.462,825,2.696,826,2.462,828,3.337,829,2.462,833,2.696,834,2.462,839,4.12,841,4.12,842,4.12,912,1.562,924,1.562,925,1.711,926,1.711,928,1.562,945,1.91,1005,4.6,1006,3.01,1007,4.6,1139,1.91,1140,1.91,1141,3.01,1143,1.91,1187,1.562,1224,4.227,1236,4.6,1323,2.212,1324,2.212,1325,3.486,1326,5.328,1327,2.212,1328,4.897,1329,2.212,1330,2.212,1331,2.212,1332,2.212,1333,2.212,1334,2.212,1335,2.212,1336,2.212,1337,2.212,1338,2.212,1339,2.212,1340,2.212,1341,2.212,1342,2.212,1343,2.212,1344,2.212,1345,2.212,1346,2.212,1347,2.212,1348,2.212,1349,2.212,1350,2.212,1351,2.212,1352,2.212,1353,2.212,1354,2.212,1355,2.212,1356,2.212,1357,2.212,1358,2.212,1359,2.212,1360,2.212,1361,2.212,1362,2.212,1363,2.212,1364,2.212,1365,2.212,1366,2.212,1367,2.212,1368,2.212,1369,2.212,1370,2.212,1371,2.212,1372,2.212,1373,2.212,1374,2.212,1375,5.66,1376,3.486,1377,3.486,1378,3.486,1379,3.486,1380,2.212,1381,2.212,1382,2.212,1383,5.328,1384,2.212,1385,2.212,1386,2.212,1387,2.212,1388,2.212,1389,2.212,1390,2.212,1391,2.212,1392,3.486,1393,2.212,1394,2.212,1395,2.212,1396,2.212,1397,4.315,1398,4.897,1399,3.486,1400,3.486,1401,3.486,1402,3.486,1403,3.486,1404,2.212,1405,2.212,1406,3.486,1407,2.212,1408,4.315,1409,2.212,1410,2.212,1411,3.486,1412,2.212,1413,2.212,1414,2.212,1415,2.212,1416,2.212,1417,2.212,1418,2.212,1419,2.212,1420,2.212,1421,2.212,1422,2.212,1423,4.315,1424,2.212,1425,2.212,1426,2.212,1427,2.212,1428,2.212,1429,2.212,1430,2.212,1431,2.212,1432,2.212,1433,3.486,1434,3.486,1435,2.212,1436,2.212,1437,2.212,1438,2.212,1439,2.212,1440,2.212,1441,2.212,1442,2.212,1443,2.212,1444,3.486,1445,2.212,1446,4.315,1447,3.486,1448,2.212,1449,2.212,1450,2.212,1451,2.212,1452,2.212,1453,2.212,1454,2.212,1455,2.212,1456,2.212,1457,2.212,1458,2.212,1459,2.212,1460,3.486,1461,2.212,1462,2.212,1463,3.486,1464,3.486,1465,2.212,1466,2.212,1467,3.486,1468,2.212,1469,2.212,1470,2.212,1471,2.212,1472,2.212]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":632,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1321,"title":{},"body":{"properties.html":{}}}],["0.1.6",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1136,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1130,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1134,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1137,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1142,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":741,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1318,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["10.4.9",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["1000000",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.2.2",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["16.9.0",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["17.0.0",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":85,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{},"classes/Users.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.1.2",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1126,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":727,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["3.3.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["37",{"_index":1319,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["4.11.2",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["4.21.2",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1317,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["587",{"_index":679,"title":{},"body":{"injectables/MailerService.html":{}}}],["6.10.0",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":100,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["9.0.9",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":80,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"miscellaneous/variables.html":{}}}],["__dirname.charat(0).touppercase",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":458,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{}}}],["accesstoken",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activationusers",{"_index":865,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["activationusers.ids",{"_index":930,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["activationusers.state",{"_index":929,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["activationusersids",{"_index":1064,"title":{},"body":{"classes/UsersResolver.html":{}}}],["active",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["admin",{"_index":920,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["algorithm",{"_index":753,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["allexceptionstographqlerrorfilter",{"_index":1,"title":{"classes/AllExceptionsToGraphQLErrorFilter.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"coverage.html":{}}}],["allowing",{"_index":1251,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1298,"title":{},"body":{"index.html":{}}}],["apollo/server",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":589,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["apollodriverconfig",{"_index":588,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["app_guard",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["appendfilesync",{"_index":33,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["appendfilesync(filename",{"_index":101,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["application",{"_index":1223,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1199,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":141,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":266,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["args('queries",{"_index":1097,"title":{},"body":{"classes/UsersResolver.html":{}}}],["args('query",{"_index":1099,"title":{},"body":{"classes/UsersResolver.html":{}}}],["argumentshost",{"_index":14,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["async",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":681,"title":{},"body":{"injectables/MailerService.html":{},"injectables/TasksService.html":{}}}],["auth.controller",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.model",{"_index":276,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["auth.model.dto",{"_index":270,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["auth.prisma.service",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["auth/jwt.strategy",{"_index":1092,"title":{},"body":{"classes/UsersResolver.html":{}}}],["authmodule",{"_index":152,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1304,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authresolver",{"_index":199,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{},"overview.html":{}}}],["authservice",{"_index":235,"title":{},"body":{"classes/AuthResolver.html":{}}}],["autoschemafile",{"_index":594,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["available",{"_index":1315,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["avatarimage",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["avatarpath",{"_index":945,"title":{},"body":{"injectables/PrismaUsersService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":285,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1240,"title":{},"body":{"index.html":{}}}],["b",{"_index":804,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["backers",{"_index":1299,"title":{},"body":{"index.html":{}}}],["bad_gateway",{"_index":569,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["bad_request",{"_index":550,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["badgatewaymessage",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestmessage",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base/base",{"_index":280,"title":{},"body":{"classes/AuthResolver.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["base/prismaquery",{"_index":897,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["base/services/error",{"_index":481,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["base/services/kafka.hr",{"_index":649,"title":{},"body":{"modules/KafkaModule.html":{}}}],["base/services/prisma",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{}}}],["based",{"_index":1235,"title":{},"body":{"index.html":{}}}],["basequery",{"_index":305,"title":{"classes/BaseQuery.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"coverage.html":{}}}],["bases/modules/graphql",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["bases/modules/kafka",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["bases/services/prisma",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["bcript.comparesync(password",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcript.gensalt(10",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcript.hash(password",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["bigint(1",{"_index":775,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["board",{"_index":1291,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":288,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["bootstrap",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brokers",{"_index":655,"title":{},"body":{"modules/KafkaModule.html":{}}}],["browse",{"_index":1314,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1312,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.concat",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":1195,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":465,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":468,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":11,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["catch(exception",{"_index":12,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["cbc",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changeactivation",{"_index":1056,"title":{},"body":{"classes/UsersResolver.html":{}}}],["changeactivation(activationusersids",{"_index":1061,"title":{},"body":{"classes/UsersResolver.html":{}}}],["changeactivationusers",{"_index":851,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["changeactivationusers(activationusers",{"_index":863,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["channel",{"_index":1266,"title":{},"body":{"index.html":{}}}],["check",{"_index":1230,"title":{},"body":{"index.html":{}}}],["children",{"_index":984,"title":{},"body":{"injectables/TasksService.html":{}}}],["cipher",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cipher.final('hex",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cipher.update(text",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"overview.html":{}}}],["clicks",{"_index":1250,"title":{},"body":{"index.html":{}}}],["client",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"modules/KafkaModule.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{}}}],["client.ts",{"_index":844,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["client.ts:6",{"_index":846,"title":{},"body":{"injectables/PrismaService.html":{}}}],["clientid",{"_index":653,"title":{},"body":{"modules/KafkaModule.html":{}}}],["clientkafka",{"_index":622,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["clientsmodule",{"_index":647,"title":{},"body":{"modules/KafkaModule.html":{}}}],["clientsmodule.register",{"_index":650,"title":{},"body":{"modules/KafkaModule.html":{}}}],["cloud",{"_index":1234,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_kafkamodule",{"_index":644,"title":{},"body":{"modules/KafkaModule.html":{},"overview.html":{}}}],["cluster_kafkamodule_providers",{"_index":645,"title":{},"body":{"modules/KafkaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1021,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1023,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1022,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cmd",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":131,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["come",{"_index":1257,"title":{},"body":{"index.html":{}}}],["command",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comparehash",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{}}}],["configservice.get('expire_time",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_refreshtoken_secret",{"_index":498,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["configservice.get('jwt_secret",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["configure",{"_index":583,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["configure(consumer",{"_index":584,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["conflict",{"_index":559,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["conflictmessage",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consolelogger",{"_index":25,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["const",{"_index":78,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":232,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["constructor(authservice",{"_index":233,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(configservice",{"_index":486,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["constructor(jwtservice",{"_index":466,"title":{},"body":{"guards/GqlAuthGuard.html":{}}}],["constructor(kafkahumanresourceservice",{"_index":621,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["constructor(message",{"_index":543,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["constructor(prismarequestservice",{"_index":1058,"title":{},"body":{"classes/UsersResolver.html":{}}}],["constructor(prismaservice",{"_index":704,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":281,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{}}}],["constructor(reflector",{"_index":952,"title":{},"body":{"guards/RolesGuard.html":{}}}],["consts",{"_index":277,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consts.accesstoken",{"_index":459,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.avatarimage",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["consts.avatarpath",{"_index":1052,"title":{},"body":{"classes/Users.html":{}}}],["consts.badgatewaymessage",{"_index":808,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.count",{"_index":337,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["consts.createdate",{"_index":1049,"title":{},"body":{"classes/Users.html":{}}}],["consts.deletedate",{"_index":1050,"title":{},"body":{"classes/Users.html":{}}}],["consts.duplicated",{"_index":907,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["consts.emailrequiredmessage",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.forbiddenmessage",{"_index":534,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["consts.freediskspace",{"_index":1011,"title":{},"body":{"injectables/TasksService.html":{}}}],["consts.ids",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["consts.isactive",{"_index":1053,"title":{},"body":{"classes/Users.html":{}}}],["consts.isdeleted",{"_index":1054,"title":{},"body":{"classes/Users.html":{}}}],["consts.limitationdiskspacewarning",{"_index":1012,"title":{},"body":{"injectables/TasksService.html":{}}}],["consts.lockdownuser",{"_index":737,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.loginparamsisnotvalid",{"_index":743,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.menudescription",{"_index":447,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menulink",{"_index":445,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuname",{"_index":446,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuparentid",{"_index":453,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menupersianname",{"_index":449,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuroles",{"_index":455,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.menuselfid",{"_index":451,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.minlengthofpassword",{"_index":1048,"title":{},"body":{"classes/Users.html":{}}}],["consts.pageid",{"_index":353,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["consts.pagenumber",{"_index":343,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["consts.pagesize",{"_index":342,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["consts.passwordrequiredmessage",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.permittedpage",{"_index":350,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["consts.phonerequiredmessage",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.refreshtoken",{"_index":461,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["consts.revertdate",{"_index":1051,"title":{},"body":{"classes/Users.html":{}}}],["consts.roles",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.successfullylogout",{"_index":293,"title":{},"body":{"classes/AuthResolver.html":{}}}],["consts.totalcount",{"_index":341,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["consts.unauthorized",{"_index":507,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["consts.updatedate",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.user",{"_index":354,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["consts.userid",{"_index":356,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PermittedPage.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{}}}],["consts.useridisrequired",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.usernamerequiredmessage",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.usernotexist",{"_index":724,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.wrongincomingparameters",{"_index":795,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["consts.youcannotremoveadminusers",{"_index":922,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["consts.yournationalcode",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.yourpassword",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.yourrealemail",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.yourrealphone",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.youruseridentifier",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consts.yourusername",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["consumer",{"_index":587,"title":{},"body":{"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{}}}],["consumer.apply(graphqlloggingmiddleware).forroutes('/graphql",{"_index":609,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["context",{"_index":48,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":518,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["context.req",{"_index":934,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["context.req.cookies",{"_index":935,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["context.req.cookies['jwt",{"_index":936,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["context.req.cookies['jwt'].trim",{"_index":950,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["controler",{"_index":335,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["controlers",{"_index":357,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["controllers",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["cookie",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["copyofuser",{"_index":730,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["copyofuser.id",{"_index":731,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["count",{"_index":336,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["counter",{"_index":279,"title":{"classes/Counter.html":{}},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["courses",{"_index":1272,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1118,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["create_personnel",{"_index":629,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["createcipheriv('aes",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdate",{"_index":912,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["createdecipheriv('aes",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createmany",{"_index":979,"title":{},"body":{"injectables/TasksService.html":{}}}],["createpagesforinitialdeployment",{"_index":956,"title":{},"body":{"injectables/TasksService.html":{}}}],["createuser",{"_index":620,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["createuser(payload",{"_index":624,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["createuser(user",{"_index":866,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["createuser(usermodel",{"_index":1065,"title":{},"body":{"classes/UsersResolver.html":{}}}],["createuserdto",{"_index":361,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["createwritestream",{"_index":892,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["cron",{"_index":967,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_day_at_1am",{"_index":963,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":968,"title":{},"body":{"injectables/TasksService.html":{}}}],["csrfprevention",{"_index":599,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["ctr",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":249,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext",{"_index":505,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["ctx.req",{"_index":778,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.cookies",{"_index":779,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.cookies['jwt",{"_index":780,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.cookies['jwt'].length",{"_index":781,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["ctx.res.clearcookie('jwt",{"_index":786,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["cursor",{"_index":813,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":328,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["customlogger",{"_index":43,"title":{"injectables/CustomLogger.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger('graphql",{"_index":106,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["d",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["daily",{"_index":999,"title":{},"body":{"injectables/TasksService.html":{}}}],["dailylogincounter",{"_index":768,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["darwin",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":733,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["datanotfound",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":61,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":742,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["date().tolocalestring('fa",{"_index":64,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["date(date",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setdate(newdate.getdate",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setfullyear(newdate.getfullyear",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).sethours(newdate.gethours",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setminutes(newdate.getminutes",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date).setmonth(newdate.getmonth",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date_1).getutcminutes",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(date_2).getutcminutes",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":112,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["date_1",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date_2",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dateitem_1",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dateitem_2",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestyle",{"_index":72,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["datetime",{"_index":719,"title":{},"body":{"injectables/PrismaAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datetime.getdifftime(new",{"_index":728,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["day",{"_index":94,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["debug",{"_index":423,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":55,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["decipher",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decipher.final",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decipher.update(buffer.from(text",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoratornotroles",{"_index":519,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["decoratornotroles.some((y",{"_index":531,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["decoratorroles",{"_index":516,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["decorators",{"_index":238,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["decript",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decryptedtext",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decryptedtext.tostring",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeper",{"_index":1268,"title":{},"body":{"index.html":{}}}],["default",{"_index":432,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{},"miscellaneous/variables.html":{}}}],["defaultargs",{"_index":837,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["defaultstrategy",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["defaultvalue",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["delete",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["deletedate",{"_index":925,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["deletedusers",{"_index":1078,"title":{},"body":{"classes/UsersResolver.html":{}}}],["deleteuserdto",{"_index":406,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["deleteuserpermanently",{"_index":1076,"title":{},"body":{"classes/UsersResolver.html":{}}}],["deleteusers",{"_index":876,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["deleteusers.ids",{"_index":919,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["deleteusersids",{"_index":1103,"title":{},"body":{"classes/UsersResolver.html":{}}}],["dependencies",{"_index":143,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1222,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1239,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":975,"title":{},"body":{"injectables/TasksService.html":{},"index.html":{}}}],["deploywith",{"_index":1249,"title":{},"body":{"index.html":{}}}],["description",{"_index":307,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":136,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["development",{"_index":1209,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1278,"title":{},"body":{"index.html":{}}}],["devtoolsmodule",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["devtoolsmodule.register",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["df",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["digit",{"_index":86,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["discord",{"_index":1265,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":814,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["dive",{"_index":1267,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1119,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driveletter",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["driver",{"_index":593,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["duplicated",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1217,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1196,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1228,"title":{},"body":{"index.html":{}}}],["email",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["emailrequiredmessage",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encoding",{"_index":98,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["encript",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encrypted",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endregion",{"_index":287,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["ensure",{"_index":1226,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1282,"title":{},"body":{"index.html":{}}}],["enum",{"_index":329,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["enumroles",{"_index":334,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["equal",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equals",{"_index":766,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":60,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":50,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["error.extensions",{"_index":603,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["error.message",{"_index":604,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["error.path",{"_index":605,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["errors",{"_index":125,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["example",{"_index":1205,"title":{},"body":{"index.html":{}}}],["example/blob/master/src/app.controller.ts",{"_index":640,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["exception",{"_index":22,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{}}}],["exception.extensions.code",{"_index":132,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["exception.extensions.statuscode",{"_index":135,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["exception.message",{"_index":127,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["exception.stack",{"_index":137,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["exceptionfilter",{"_index":8,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["exceptions",{"_index":124,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["exec(cmd",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":469,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["existdata",{"_index":989,"title":{},"body":{"injectables/TasksService.html":{}}}],["existpages",{"_index":976,"title":{},"body":{"injectables/TasksService.html":{}}}],["existssync",{"_index":34,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["existssync(filename",{"_index":96,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["existssync(pathname",{"_index":88,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["existuser",{"_index":716,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["existuser.id",{"_index":736,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.lockdowndate",{"_index":729,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.password",{"_index":740,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.roles",{"_index":748,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.username",{"_index":747,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuser.wrongpasswordcounter",{"_index":726,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuserauth",{"_index":783,"title":{},"body":{"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["existuserauth.id",{"_index":785,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuserauth.refreshtoken",{"_index":792,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["existuserauth.userid",{"_index":793,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["experience",{"_index":1270,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PrismaAuthService.html":{}}}],["export",{"_index":42,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["exports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":32,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":44,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PermittedPage.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{}}}],["extensions",{"_index":130,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{}}}],["extractjwt",{"_index":473,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["extractjwt.fromextractors",{"_index":489,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["extrainfo",{"_index":997,"title":{},"body":{"injectables/TasksService.html":{}}}],["false",{"_index":284,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["family",{"_index":633,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["fast",{"_index":1243,"title":{},"body":{"index.html":{}}}],["features",{"_index":1253,"title":{},"body":{"index.html":{}}}],["few",{"_index":1245,"title":{},"body":{"index.html":{}}}],["field",{"_index":321,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["field((type",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["field(type",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/Users.html":{}}}],["field(undefined",{"_index":317,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["filename",{"_index":92,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["fileupload",{"_index":880,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["fileupload.createreadstream().pipe(createwritestream(localpath",{"_index":944,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["findadminfromids",{"_index":917,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["findadminfromids.length",{"_index":921,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["first",{"_index":331,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["focus",{"_index":1252,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1286,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":548,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["forbiddenmessage",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forgot",{"_index":440,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/UpdatePageRolesDto.html":{}}}],["forgotmodel",{"_index":294,"title":{},"body":{"classes/AuthResolver.html":{}}}],["forgotpassword",{"_index":225,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["forgotpassword(forgotpasswordmodel",{"_index":236,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["forgotpassworddto",{"_index":237,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["forgotpasswordmodel",{"_index":241,"title":{"classes/ForgotPasswordModel.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["forgotpasswordmodel.username",{"_index":794,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["formaterror",{"_index":602,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["framework",{"_index":1194,"title":{},"body":{"index.html":{}}}],["free",{"_index":1005,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["freediskspace",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs",{"_index":37,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{}}}],["full",{"_index":1281,"title":{},"body":{"index.html":{}}}],["function",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1188,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1248,"title":{},"body":{"index.html":{}}}],["gateway/src/app.controller.ts",{"_index":638,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["getallusersbyquery",{"_index":852,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getallusersbyquery(queries",{"_index":868,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["getalluserswithquery",{"_index":1073,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getdifftime",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdrivesize",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getnumberfromstring",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getpages",{"_index":702,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["getpages(context",{"_index":708,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["getroles",{"_index":226,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["getting",{"_index":1190,"title":{"index.html":{}},"body":{}}],["getuserbyquery",{"_index":853,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserbyquery(query",{"_index":870,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserinfo",{"_index":854,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserinfo(@context",{"_index":1113,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getuserinfo(context",{"_index":872,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["getuserinfofromcontext",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusersbyquery",{"_index":1057,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getusersbyquery(query",{"_index":1072,"title":{},"body":{"classes/UsersResolver.html":{}}}],["gqlauthguard",{"_index":272,"title":{"guards/GqlAuthGuard.html":{}},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":476,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":504,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["graph",{"_index":1275,"title":{},"body":{"index.html":{},"modules.html":{}}}],["graphql",{"_index":39,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["graphqlbadgatewayexception",{"_index":540,"title":{"classes/GraphQlBadGatewayException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlbadrequestexception",{"_index":549,"title":{"classes/GraphQlBadRequestException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"coverage.html":{}}}],["graphqlconflictexception",{"_index":558,"title":{"classes/GraphQlConflictException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlerror",{"_index":38,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["graphqlerroroptions",{"_index":545,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["graphqlforbiddenexception",{"_index":479,"title":{"classes/GraphQlForbiddenException.html":{}},"body":{"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["graphqlinternalservererrorexception",{"_index":564,"title":{"classes/GraphQlInternalServerErrorException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlloggingmiddleware",{"_index":102,"title":{"injectables/GraphQLLoggingMiddleware.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"coverage.html":{}}}],["graphqlmethodnotallowedexception",{"_index":567,"title":{"classes/GraphQlMethodNotAllowedException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":153,"title":{"modules/GraphqlModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"modules.html":{},"overview.html":{}}}],["graphqlmodule.forroot",{"_index":592,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["graphqlnotacceptableexception",{"_index":554,"title":{"classes/GraphQlNotAcceptableException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlnotfoundexception",{"_index":552,"title":{"classes/GraphQlNotFoundException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["graphqlnotimplementedexception",{"_index":565,"title":{"classes/GraphQlNotImplementedException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlpayloadtoolargeexception",{"_index":560,"title":{"classes/GraphQlPayloadTooLargeException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlrequesttimeoutexception",{"_index":556,"title":{"classes/GraphQlRequestTimeoutException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["graphqlscalartype",{"_index":839,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["graphqlschemabuildermodule",{"_index":591,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["graphqlunauthorizedexception",{"_index":480,"title":{"classes/GraphQlUnauthorizedException.html":{}},"body":{"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["graphqlunsupportedmediatypeexception",{"_index":562,"title":{"classes/GraphQlUnsupportedMediaTypeException.html":{}},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["groupid",{"_index":657,"title":{},"body":{"modules/KafkaModule.html":{}}}],["grow",{"_index":1295,"title":{},"body":{"index.html":{}}}],["guard",{"_index":462,"title":{"guards/GqlAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":463,"title":{},"body":{"guards/GqlAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["h",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":482,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["handler.ts",{"_index":542,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["handler.ts:101",{"_index":578,"title":{},"body":{"classes/GraphQlPayloadTooLargeException.html":{}}}],["handler.ts:115",{"_index":581,"title":{},"body":{"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["handler.ts:129",{"_index":573,"title":{},"body":{"classes/GraphQlInternalServerErrorException.html":{}}}],["handler.ts:143",{"_index":577,"title":{},"body":{"classes/GraphQlNotImplementedException.html":{}}}],["handler.ts:157",{"_index":574,"title":{},"body":{"classes/GraphQlMethodNotAllowedException.html":{}}}],["handler.ts:17",{"_index":570,"title":{},"body":{"classes/GraphQlBadRequestException.html":{}}}],["handler.ts:171",{"_index":546,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{}}}],["handler.ts:3",{"_index":572,"title":{},"body":{"classes/GraphQlForbiddenException.html":{}}}],["handler.ts:31",{"_index":580,"title":{},"body":{"classes/GraphQlUnauthorizedException.html":{}}}],["handler.ts:45",{"_index":576,"title":{},"body":{"classes/GraphQlNotFoundException.html":{}}}],["handler.ts:59",{"_index":575,"title":{},"body":{"classes/GraphQlNotAcceptableException.html":{}}}],["handler.ts:73",{"_index":579,"title":{},"body":{"classes/GraphQlRequestTimeoutException.html":{}}}],["handler.ts:87",{"_index":571,"title":{},"body":{"classes/GraphQlConflictException.html":{}}}],["hands",{"_index":1269,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1258,"title":{},"body":{"index.html":{}}}],["harddeleteusers",{"_index":855,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["harddeleteusers(deletedusers",{"_index":1075,"title":{},"body":{"classes/UsersResolver.html":{}}}],["harddeleteusers(deleteusers",{"_index":874,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["hash",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasnotroles",{"_index":521,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["haspermission",{"_index":1079,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasroles",{"_index":273,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hasroles(['undefined",{"_index":1062,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasroles([roles.demo",{"_index":299,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["hasuseractionpermission",{"_index":856,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["hasuseractionpermission(@context",{"_index":1115,"title":{},"body":{"classes/UsersResolver.html":{}}}],["hasuseractionpermission(context",{"_index":877,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["headerinfo",{"_index":522,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["headerinfo.sub",{"_index":526,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["help",{"_index":1273,"title":{},"body":{"index.html":{}}}],["here",{"_index":1302,"title":{},"body":{"index.html":{}}}],["hex",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hideschemadetailsfromclienterrors",{"_index":600,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["home",{"_index":980,"title":{},"body":{"injectables/TasksService.html":{}}}],["host",{"_index":13,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/MailerService.html":{}}}],["hr",{"_index":654,"title":{},"body":{"modules/KafkaModule.html":{}}}],["hr_consumer",{"_index":658,"title":{},"body":{"modules/KafkaModule.html":{}}}],["hr_service",{"_index":651,"title":{},"body":{"modules/KafkaModule.html":{}}}],["hs512",{"_index":754,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["http",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["httponly",{"_index":758,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["https://blog.logrocket.com/microservices",{"_index":641,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["https://github.com/israelio/nestjs",{"_index":639,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["https://github.com/tkssharma/nestjs",{"_index":635,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["https://nestjs.com",{"_index":1308,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":471,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["httpstatus.bad_request",{"_index":744,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["httpstatus.conflict",{"_index":908,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["httpstatus.forbidden",{"_index":535,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["httpstatus.not_found",{"_index":725,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["httpstatus.too_many_requests",{"_index":738,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["httpstatus.unauthorized",{"_index":508,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["id",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["identifier",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":492,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["images/users/avatars",{"_index":941,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["imports",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{}}}],["includestacktraceinerrorresponses",{"_index":601,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["incrementdecrement",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["inform",{"_index":1004,"title":{},"body":{"injectables/TasksService.html":{}}}],["information",{"_index":1232,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1255,"title":{},"body":{"index.html":{}}}],["initial",{"_index":974,"title":{},"body":{"injectables/TasksService.html":{}}}],["inject",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"injectables/KafkaHumanResourceService.html":{}}}],["inject('hr_service",{"_index":627,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["injectable",{"_index":26,"title":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":422,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["inputtype",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["install",{"_index":1247,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1207,"title":{},"body":{"index.html":{}}}],["int",{"_index":322,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/UserOutput.html":{}}}],["integration",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["interact",{"_index":1276,"title":{},"body":{"index.html":{}}}],["internal_server_error",{"_index":133,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["internalservermessage",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["introspection",{"_index":606,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["ir",{"_index":65,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["isactive",{"_index":928,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["isauth",{"_index":247,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["isauthenticated",{"_index":227,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["isauthenticated(@context",{"_index":289,"title":{},"body":{"classes/AuthResolver.html":{}}}],["isauthenticated(ctx",{"_index":246,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["isauthenticated(ctx.getcontext",{"_index":515,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["isdeleted",{"_index":924,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["islogin",{"_index":771,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["isnotempty",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["isphonenumber",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["isphonenumber('ir",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["isreadonly",{"_index":454,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["isstrongpassword",{"_index":1046,"title":{},"body":{"classes/Users.html":{}}}],["issuer",{"_index":751,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["item.email",{"_index":1010,"title":{},"body":{"injectables/TasksService.html":{}}}],["item1",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item1.some((x",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item1.tolowercase",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item2",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item2.some((y",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item2.tolowercase",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["items",{"_index":359,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["iv",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iv.tostring('hex",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1288,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1290,"title":{},"body":{"index.html":{}}}],["join",{"_index":40,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaUsersService.html":{},"index.html":{}}}],["join(pathname",{"_index":93,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["join(process.cwd",{"_index":595,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["json",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["json.parse(json.stringify(user",{"_index":915,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["json.stringify",{"_index":630,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["json.stringify(context",{"_index":76,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["jwt",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["jwtfromrequest",{"_index":488,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["jwtmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":456,"title":{"classes/JwtPayLoad.html":{}},"body":{"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":200,"title":{"injectables/JWTRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":29,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["jwtservice.decode(ctx.req.cookies['jwt']).sub",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtstrategy",{"_index":201,"title":{"injectables/JWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kafka",{"_index":636,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["kafkahumanresourceservice",{"_index":618,"title":{"injectables/KafkaHumanResourceService.html":{}},"body":{"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"coverage.html":{},"overview.html":{}}}],["kafkajs",{"_index":1175,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["kafkamodule",{"_index":154,"title":{"modules/KafkaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaModule.html":{},"modules.html":{},"overview.html":{}}}],["kamil",{"_index":1305,"title":{},"body":{"index.html":{}}}],["key",{"_index":1224,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["latn",{"_index":68,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["learn",{"_index":1261,"title":{},"body":{"index.html":{}}}],["legend",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":1311,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1293,"title":{},"body":{"index.html":{}}}],["limitationdiskspacewarning",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["link",{"_index":444,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["linkedin",{"_index":1287,"title":{},"body":{"index.html":{}}}],["linux",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["localhost:9092",{"_index":656,"title":{},"body":{"modules/KafkaModule.html":{}}}],["localpath",{"_index":939,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["localpath.concat(`/${userid",{"_index":943,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["lockdowndate",{"_index":735,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["lockdownuser",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":45,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["loges/error/${date",{"_index":87,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["loges/log/${date",{"_index":81,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["logger",{"_index":105,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["login",{"_index":228,"title":{},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{}}}],["login(loginmodel",{"_index":250,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["logindto",{"_index":251,"title":{"classes/LoginDto.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["loginmodel",{"_index":253,"title":{"classes/LoginModel.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["loginmodel.username",{"_index":723,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["loginparamsisnotvalid",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loginresponse",{"_index":274,"title":{"classes/LoginResponse.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"coverage.html":{}}}],["logintime",{"_index":770,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["logout",{"_index":229,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["logout(@context",{"_index":291,"title":{},"body":{"classes/AuthResolver.html":{}}}],["logout(ctx",{"_index":254,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["logouttime",{"_index":784,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["looking",{"_index":1233,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1284,"title":{},"body":{"index.html":{}}}],["mail",{"_index":969,"title":{},"body":{"injectables/TasksService.html":{}}}],["mailerservice",{"_index":156,"title":{"injectables/MailerService.html":{}},"body":{"modules/AppModule.html":{},"injectables/MailerService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["mailoptions",{"_index":685,"title":{},"body":{"injectables/MailerService.html":{}}}],["mailservice",{"_index":960,"title":{},"body":{"injectables/TasksService.html":{}}}],["makes",{"_index":1241,"title":{},"body":{"index.html":{}}}],["manage",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["manageavataruserdto",{"_index":419,"title":{"classes/ManageAvatarUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["managejwttoken",{"_index":703,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["managejwttoken(existuser",{"_index":714,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["managers",{"_index":1003,"title":{},"body":{"injectables/TasksService.html":{}}}],["manageuseravatar",{"_index":857,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["manageuseravatar(context",{"_index":1081,"title":{},"body":{"classes/UsersResolver.html":{}}}],["manageuseravatar(fileupload",{"_index":879,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["managing",{"_index":1254,"title":{},"body":{"index.html":{}}}],["mangeuseravatar",{"_index":1111,"title":{},"body":{"classes/UsersResolver.html":{}}}],["matching",{"_index":139,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchs",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.abs(dateitem_2",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.ceil((number(output[9",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.ceil(number(output[9",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mau",{"_index":1237,"title":{},"body":{"index.html":{}}}],["maxage",{"_index":762,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["medium",{"_index":75,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["menu",{"_index":257,"title":{},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{}}}],["menubar",{"_index":230,"title":{},"body":{"classes/AuthResolver.html":{}}}],["menubar(@context",{"_index":297,"title":{},"body":{"classes/AuthResolver.html":{}}}],["menubar(context",{"_index":256,"title":{},"body":{"classes/AuthResolver.html":{}}}],["menuchildren",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menudescription",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menulink",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuname",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuparent",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuparentid",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menupersianname",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuroles",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menuselfid",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menustructuremodel",{"_index":275,"title":{"classes/MenuStructureModel.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"coverage.html":{}}}],["message",{"_index":46,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["metadata",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["method_not_allowed",{"_index":568,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["methodnotallowedmessage",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["mi",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":585,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["minlength",{"_index":1047,"title":{},"body":{"classes/Users.html":{}}}],["minlengthofpassword",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1187,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1292,"title":{},"body":{"index.html":{}}}],["mkdirsync",{"_index":35,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{}}}],["mkdirsync(join(__dirname",{"_index":942,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["mkdirsync(pathname",{"_index":89,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["mo",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":607,"title":{},"body":{"modules/GraphqlModule.html":{},"index.html":{}}}],["model",{"_index":309,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["module",{"_index":140,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":142,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/jwt.strategy",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["monorepo/blob/develop/apps/api",{"_index":637,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["month",{"_index":84,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["more",{"_index":1231,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":267,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["mutation(undefined",{"_index":239,"title":{},"body":{"classes/AuthResolver.html":{}}}],["myśliwiec",{"_index":1306,"title":{},"body":{"index.html":{}}}],["n\\n",{"_index":77,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["nationalcode",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["need",{"_index":1279,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1200,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1310,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":642,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"index.html":{}}}],["nestjs/apollo",{"_index":590,"title":{},"body":{"modules/GraphqlModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/devtools",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":269,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":30,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":626,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":27,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["new",{"_index":63,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newdate",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":110,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["nextfunction",{"_index":31,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["node.js",{"_index":1193,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":674,"title":{},"body":{"injectables/MailerService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":676,"title":{},"body":{"injectables/MailerService.html":{}}}],["normal",{"_index":972,"title":{},"body":{"injectables/TasksService.html":{}}}],["not_acceptable",{"_index":555,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["not_found",{"_index":553,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["not_implemented",{"_index":566,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["notacceptablemessage",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":895,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["notfoundexception(consts.usernotexist",{"_index":938,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["notimplementedexception",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":111,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["now}ms",{"_index":122,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["npm",{"_index":1206,"title":{},"body":{"index.html":{}}}],["nu",{"_index":67,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["null",{"_index":490,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":283,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["num",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":316,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordModel.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["number(data[1",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(data[3",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(output[8",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numeric",{"_index":83,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["object",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(options",{"_index":547,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["object.keys(roles).filter((role",{"_index":809,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["object.values(roles).filter",{"_index":529,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["objecttype",{"_index":323,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["occurred",{"_index":129,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["offer",{"_index":1289,"title":{},"body":{"index.html":{}}}],["official",{"_index":1238,"title":{},"body":{"index.html":{}}}],["omittype",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["omittype(createuserdto",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["onmoduleinit",{"_index":845,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1294,"title":{},"body":{"index.html":{}}}],["option",{"_index":62,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["options",{"_index":544,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/KafkaModule.html":{}}}],["orderby",{"_index":815,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["os.platform",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":608,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["out",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["output",{"_index":308,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":1316,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1146,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page.roles.some((v",{"_index":802,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["pageid",{"_index":352,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["pageid:string",{"_index":347,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["pagenumber",{"_index":313,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["pagenumber:number",{"_index":340,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["pages",{"_index":346,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PermittedPage.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UserOutput.html":{}}}],["pagesize",{"_index":314,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["pagesize:number",{"_index":339,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["pagination",{"_index":310,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["param",{"_index":332,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["parentid",{"_index":452,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["parser",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["parsevalue",{"_index":842,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["part",{"_index":1280,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["pass",{"_index":683,"title":{},"body":{"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{}}}],["passport",{"_index":475,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":472,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["passportstrategy(strategy",{"_index":485,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["passreqtocallback",{"_index":499,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["password",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["passwordchangelastdate",{"_index":797,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["passwordisnotstrongmessage",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordrequiredmessage",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":41,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaUsersService.html":{}}}],["path.dirname(join(__dirname",{"_index":940,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["pathname",{"_index":79,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["payload",{"_index":501,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["payload.sub",{"_index":495,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["payload.username",{"_index":496,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["payload_too_large",{"_index":561,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["payloadtoolargemessage",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":948,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["permitted",{"_index":345,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["permittedpage",{"_index":351,"title":{"classes/PermittedPage.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["persianname",{"_index":448,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/TasksService.html":{}}}],["phone",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["phonerequiredmessage",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":1236,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["playground",{"_index":598,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["please",{"_index":1264,"title":{},"body":{"index.html":{}}}],["port",{"_index":678,"title":{},"body":{"injectables/MailerService.html":{}}}],["possible",{"_index":1229,"title":{},"body":{"index.html":{}}}],["powershell",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma",{"_index":836,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"properties.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":825,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userscalarfieldenum",{"_index":822,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userselect",{"_index":828,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userwhereinput",{"_index":833,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma.userwhereuniqueinput",{"_index":819,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":838,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["prismaauthservice",{"_index":202,"title":{"injectables/PrismaAuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["prismaclient",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["prismaquery",{"_index":811,"title":{"classes/PrismaQuery.html":{}},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["prismarequestservice",{"_index":1060,"title":{},"body":{"classes/UsersResolver.html":{}}}],["prismaservice",{"_index":157,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["prismaservice.auth.findfirst",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismasinglequery",{"_index":840,"title":{"classes/PrismaSingleQuery.html":{}},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["prismauserorderbywithrelationinput",{"_index":826,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismauserscalarfieldenum",{"_index":823,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismauserselect",{"_index":829,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismausersservice",{"_index":849,"title":{"injectables/PrismaUsersService.html":{}},"body":{"injectables/PrismaUsersService.html":{},"modules/UserModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"overview.html":{}}}],["prismauserwhereinput",{"_index":834,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismauserwhereuniqueinput",{"_index":820,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":103,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["process.env.node_env",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaAuthService.html":{}}}],["process.env['admin_email",{"_index":682,"title":{},"body":{"injectables/MailerService.html":{},"injectables/TasksService.html":{}}}],["process.env['admin_email_password",{"_index":684,"title":{},"body":{"injectables/MailerService.html":{}}}],["process.env['admin_nationalcode",{"_index":991,"title":{},"body":{"injectables/TasksService.html":{}}}],["process.env['admin_phone",{"_index":992,"title":{},"body":{"injectables/TasksService.html":{}}}],["process.env['admin_username",{"_index":994,"title":{},"body":{"injectables/TasksService.html":{}}}],["process.env['http_only",{"_index":759,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["process.env['max_age",{"_index":763,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["process.env['same_site",{"_index":761,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["production",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaAuthService.html":{},"index.html":{}}}],["progressive",{"_index":1192,"title":{},"body":{"index.html":{}}}],["project",{"_index":1203,"title":{},"body":{"index.html":{}}}],["promise",{"_index":707,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promisify(scrypt)(password",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":312,"title":{"properties.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"properties.html":{}}}],["provide",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["psdrive",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries",{"_index":311,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{}}}],["queries.skip",{"_index":899,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["queries.take",{"_index":900,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["query",{"_index":113,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["query(undefined",{"_index":1070,"title":{},"body":{"classes/UsersResolver.html":{}}}],["questions",{"_index":1262,"title":{},"body":{"index.html":{}}}],["randombytes(16",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1301,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":104,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["ready",{"_index":1221,"title":{},"body":{"index.html":{}}}],["real",{"_index":1277,"title":{},"body":{"index.html":{}}}],["record",{"_index":70,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{}}}],["recursive",{"_index":90,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaUsersService.html":{}}}],["reflect",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":477,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["reflector.createdecorator",{"_index":536,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["refresh",{"_index":497,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["refresh_token",{"_index":460,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{}}}],["refreshtoken",{"_index":502,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["region",{"_index":282,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":330,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["registerenumtype",{"_index":324,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["registerenumtype(roles",{"_index":333,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["reject",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject(error",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":1202,"title":{},"body":{"index.html":{}}}],["req",{"_index":108,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["req.body",{"_index":115,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["req.cookies",{"_index":491,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["req.cookies['jwt",{"_index":118,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["req.cookies['jwt'].trim",{"_index":503,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["request_timeout",{"_index":557,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["requesttimeoutmessage",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiring",{"_index":1244,"title":{},"body":{"index.html":{}}}],["res",{"_index":109,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/PrismaAuthService.html":{}}}],["res.cookie('jwt",{"_index":757,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["res.on('finish",{"_index":116,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["reset",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":268,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["resources",{"_index":1256,"title":{},"body":{"index.html":{}}}],["result",{"_index":69,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{}}}],["result.filter((page",{"_index":800,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["results",{"_index":138,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":126,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/UserOutput.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":23,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"injectables/CustomLogger.html":{},"guards/GqlAuthGuard.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/KafkaHumanResourceService.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/UsersResolver.html":{}}}],["reuslt",{"_index":1116,"title":{},"body":{"classes/UsersResolver.html":{}}}],["revertdate",{"_index":926,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["revertdeletedusers",{"_index":858,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["revertdeletedusers(deletedusers",{"_index":1083,"title":{},"body":{"classes/UsersResolver.html":{}}}],["revertdeletedusers(deleteusers",{"_index":882,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["revertusers",{"_index":1084,"title":{},"body":{"classes/UsersResolver.html":{}}}],["reza",{"_index":631,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["role",{"_index":810,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["roles",{"_index":244,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["roles.admin",{"_index":300,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["roles.demo",{"_index":951,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["roles.demo_viewer",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["roles.inspector",{"_index":1093,"title":{},"body":{"classes/UsersResolver.html":{}}}],["roles.inspector_viewer",{"_index":1094,"title":{},"body":{"classes/UsersResolver.html":{}}}],["roles.security",{"_index":1095,"title":{},"body":{"classes/UsersResolver.html":{}}}],["roles.security_viewer",{"_index":1096,"title":{},"body":{"classes/UsersResolver.html":{}}}],["roles.user_global",{"_index":301,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["roles.user_management",{"_index":302,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["rolesguard",{"_index":182,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["run",{"_index":1208,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1227,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["salmani",{"_index":634,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["salt",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["samesite",{"_index":760,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["savetofile",{"_index":59,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["scalable",{"_index":1197,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":995,"title":{},"body":{"injectables/TasksService.html":{}}}],["schedulemodule",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["secretorkey",{"_index":493,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["secure",{"_index":680,"title":{},"body":{"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":816,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["selfid",{"_index":450,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["send",{"_index":1002,"title":{},"body":{"injectables/TasksService.html":{}}}],["sendlimitationspacediskfromadmintomanagersandusers",{"_index":957,"title":{},"body":{"injectables/TasksService.html":{}}}],["sendmail",{"_index":668,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendmail(to",{"_index":670,"title":{},"body":{"injectables/MailerService.html":{}}}],["serialize",{"_index":841,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["server.ts",{"_index":666,"title":{},"body":{"injectables/MailerService.html":{},"coverage.html":{}}}],["server.ts:18",{"_index":673,"title":{},"body":{"injectables/MailerService.html":{}}}],["server.ts:5",{"_index":669,"title":{},"body":{"injectables/MailerService.html":{}}}],["set",{"_index":996,"title":{},"body":{"injectables/TasksService.html":{}}}],["setadminforinitialdeployment",{"_index":958,"title":{},"body":{"injectables/TasksService.html":{}}}],["setasdefaultauthtable",{"_index":959,"title":{},"body":{"injectables/TasksService.html":{}}}],["setup",{"_index":1204,"title":{},"body":{"index.html":{}}}],["shell",{"_index":981,"title":{},"body":{"injectables/TasksService.html":{}}}],["shell/usersmanagement",{"_index":983,"title":{},"body":{"injectables/TasksService.html":{}}}],["shell/usersmanagement/userclassification",{"_index":988,"title":{},"body":{"injectables/TasksService.html":{}}}],["shell/usersmanagement/userslist",{"_index":986,"title":{},"body":{"injectables/TasksService.html":{}}}],["short",{"_index":73,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["side",{"_index":1198,"title":{},"body":{"index.html":{}}}],["sign",{"_index":721,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["signoptions",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1246,"title":{},"body":{"index.html":{}}}],["skip",{"_index":817,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{}}}],["smtp.gmail.com",{"_index":677,"title":{},"body":{"injectables/MailerService.html":{}}}],["softdeleteusers",{"_index":859,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["softdeleteusers(deletedusers",{"_index":1086,"title":{},"body":{"classes/UsersResolver.html":{}}}],["softdeleteusers(deleteusers",{"_index":884,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["sortschema",{"_index":597,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"modules/KafkaModule.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"injectables/PrismaService.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"index.html":{}}}],["space",{"_index":1006,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1297,"title":{},"body":{"index.html":{}}}],["src/.../consts.ts",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../date",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prismaquery.ts",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tools.ts",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["src/bases/base.ts",{"_index":306,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"coverage.html":{}}}],["src/bases/base.ts:23",{"_index":360,"title":{},"body":{"classes/Counter.html":{}}}],["src/bases/base.ts:39",{"_index":320,"title":{},"body":{"classes/BaseQuery.html":{}}}],["src/bases/base.ts:46",{"_index":319,"title":{},"body":{"classes/BaseQuery.html":{}}}],["src/bases/base.ts:53",{"_index":318,"title":{},"body":{"classes/BaseQuery.html":{}}}],["src/bases/base.ts:69",{"_index":698,"title":{},"body":{"classes/PermittedPage.html":{}}}],["src/bases/base.ts:76",{"_index":699,"title":{},"body":{"classes/PermittedPage.html":{}}}],["src/bases/base.ts:83",{"_index":700,"title":{},"body":{"classes/PermittedPage.html":{}}}],["src/bases/base.ts:96",{"_index":1028,"title":{},"body":{"classes/UserOutput.html":{}}}],["src/bases/modules/graphql.ts",{"_index":582,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/bases/modules/graphql.ts:31",{"_index":586,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/bases/modules/kafka.ts",{"_index":646,"title":{},"body":{"modules/KafkaModule.html":{}}}],["src/bases/prismaquery.ts",{"_index":812,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bases/prismaquery.ts:11",{"_index":831,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:13",{"_index":821,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:15",{"_index":824,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:17",{"_index":827,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:19",{"_index":830,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:21",{"_index":835,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/prismaquery.ts:27",{"_index":848,"title":{},"body":{"classes/PrismaSingleQuery.html":{}}}],["src/bases/prismaquery.ts:9",{"_index":832,"title":{},"body":{"classes/PrismaQuery.html":{}}}],["src/bases/services/error",{"_index":541,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["src/bases/services/kafka.hr.ts",{"_index":619,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"coverage.html":{}}}],["src/bases/services/kafka.hr.ts:10",{"_index":625,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["src/bases/services/kafka.hr.ts:5",{"_index":623,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["src/bases/services/prisma",{"_index":843,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1131,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":224,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:19",{"_index":234,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:24",{"_index":252,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:35",{"_index":248,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:42",{"_index":255,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:50",{"_index":240,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:65",{"_index":258,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:74",{"_index":264,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.controller.ts:89",{"_index":245,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/modules/auth/auth.model.dto.ts",{"_index":437,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["src/modules/auth/auth.model.dto.ts:12",{"_index":659,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:21",{"_index":439,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:23",{"_index":438,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:31",{"_index":1015,"title":{},"body":{"classes/UpdatePageRolesDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:33",{"_index":1016,"title":{},"body":{"classes/UpdatePageRolesDto.html":{}}}],["src/modules/auth/auth.model.dto.ts:9",{"_index":660,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":441,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"coverage.html":{}}}],["src/modules/auth/auth.model.ts:105",{"_index":663,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/modules/auth/auth.model.ts:111",{"_index":664,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/modules/auth/auth.model.ts:12",{"_index":661,"title":{},"body":{"classes/LoginModel.html":{}}}],["src/modules/auth/auth.model.ts:21",{"_index":442,"title":{},"body":{"classes/ForgotPasswordModel.html":{}}}],["src/modules/auth/auth.model.ts:33",{"_index":690,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:40",{"_index":692,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:47",{"_index":693,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:54",{"_index":689,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:61",{"_index":695,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:68",{"_index":697,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:75",{"_index":694,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:81",{"_index":691,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:88",{"_index":696,"title":{},"body":{"classes/MenuStructureModel.html":{}}}],["src/modules/auth/auth.model.ts:9",{"_index":662,"title":{},"body":{"classes/LoginModel.html":{}}}],["src/modules/auth/auth.model.ts:93",{"_index":617,"title":{},"body":{"classes/JwtPayLoad.html":{}}}],["src/modules/auth/auth.model.ts:94",{"_index":616,"title":{},"body":{"classes/JwtPayLoad.html":{}}}],["src/modules/auth/auth.model.ts:95",{"_index":615,"title":{},"body":{"classes/JwtPayLoad.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.prisma.service.ts",{"_index":701,"title":{},"body":{"injectables/PrismaAuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.prisma.service.ts:157",{"_index":713,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:187",{"_index":711,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:19",{"_index":705,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:230",{"_index":706,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:266",{"_index":709,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:27",{"_index":712,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:285",{"_index":717,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:302",{"_index":710,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/auth.prisma.service.ts:90",{"_index":715,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":464,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/jwt.strategy.ts:108",{"_index":953,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/jwt.strategy.ts:114",{"_index":954,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/jwt.strategy.ts:26",{"_index":613,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:41",{"_index":614,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:50",{"_index":611,"title":{},"body":{"injectables/JWTRefreshTokenStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:65",{"_index":612,"title":{},"body":{"injectables/JWTRefreshTokenStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:77",{"_index":467,"title":{},"body":{"guards/GqlAuthGuard.html":{}}}],["src/modules/auth/jwt.strategy.ts:83",{"_index":470,"title":{},"body":{"guards/GqlAuthGuard.html":{}}}],["src/modules/users/users.graphql.controller.ts",{"_index":1055,"title":{},"body":{"classes/UsersResolver.html":{},"coverage.html":{}}}],["src/modules/users/users.graphql.controller.ts:111",{"_index":1087,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:126",{"_index":1085,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:141",{"_index":1077,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:156",{"_index":1063,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:173",{"_index":1091,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:188",{"_index":1082,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:20",{"_index":1059,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:202",{"_index":1071,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:209",{"_index":1080,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:36",{"_index":1074,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:57",{"_index":1069,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:75",{"_index":1066,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.graphql.controller.ts:93",{"_index":1089,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/modules/users/users.model.dto.ts",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/users.model.dto.ts:108",{"_index":1017,"title":{},"body":{"classes/UpdateRolesToUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:116",{"_index":1018,"title":{},"body":{"classes/UpdateRolesToUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:128",{"_index":687,"title":{},"body":{"classes/ManageAvatarUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:135",{"_index":688,"title":{},"body":{"classes/ManageAvatarUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:15",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:24",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:32",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:40",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:48",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:63",{"_index":1019,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:70",{"_index":1020,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:82",{"_index":436,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:94",{"_index":1013,"title":{},"body":{"classes/ToggleActiveUserDto.html":{}}}],["src/modules/users/users.model.dto.ts:96",{"_index":1014,"title":{},"body":{"classes/ToggleActiveUserDto.html":{}}}],["src/modules/users/users.model.ts",{"_index":1029,"title":{},"body":{"classes/Users.html":{},"coverage.html":{}}}],["src/modules/users/users.model.ts:105",{"_index":1035,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:112",{"_index":1036,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:120",{"_index":1043,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:127",{"_index":1040,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:21",{"_index":1037,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:30",{"_index":1033,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:38",{"_index":1041,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:46",{"_index":1045,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:55",{"_index":1039,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:63",{"_index":1034,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:70",{"_index":1031,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:77",{"_index":1044,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:84",{"_index":1032,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:91",{"_index":1042,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.model.ts:98",{"_index":1030,"title":{},"body":{"classes/Users.html":{}}}],["src/modules/users/users.module.ts",{"_index":1025,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/users/users.prisma.service.ts",{"_index":850,"title":{},"body":{"injectables/PrismaUsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.prisma.service.ts:101",{"_index":883,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:110",{"_index":875,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:118",{"_index":864,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:130",{"_index":889,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:142",{"_index":881,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:169",{"_index":873,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:183",{"_index":878,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:22",{"_index":862,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:29",{"_index":869,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:40",{"_index":871,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:46",{"_index":867,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:72",{"_index":887,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/modules/users/users.prisma.service.ts:83",{"_index":885,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["src/schema.gql",{"_index":596,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/utils/consts.ts",{"_index":1139,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/date",{"_index":1140,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger.ts",{"_index":6,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"coverage.html":{}}}],["src/utils/logger.ts:17",{"_index":434,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:21",{"_index":429,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:25",{"_index":431,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:29",{"_index":426,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:33",{"_index":430,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:36",{"_index":435,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/utils/logger.ts:66",{"_index":538,"title":{},"body":{"injectables/GraphQLLoggingMiddleware.html":{}}}],["src/utils/logger.ts:67",{"_index":537,"title":{},"body":{"injectables/GraphQLLoggingMiddleware.html":{}}}],["src/utils/logger.ts:68",{"_index":539,"title":{},"body":{"injectables/GraphQLLoggingMiddleware.html":{}}}],["src/utils/logger.ts:88",{"_index":16,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{}}}],["src/utils/mail",{"_index":665,"title":{},"body":{"injectables/MailerService.html":{},"coverage.html":{}}}],["src/utils/tasks.ts",{"_index":955,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/utils/tasks.ts:103",{"_index":964,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:20",{"_index":962,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:62",{"_index":965,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:87",{"_index":966,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tasks.ts:9",{"_index":961,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/utils/tools.ts",{"_index":1143,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1210,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1212,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1213,"title":{},"body":{"index.html":{}}}],["started",{"_index":1191,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1201,"title":{},"body":{"index.html":{}}}],["state",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["statements",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":134,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["stay",{"_index":1283,"title":{},"body":{"index.html":{}}}],["stdout",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stdout.trim().split(/\\s",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steps",{"_index":1225,"title":{},"body":{"index.html":{}}}],["str",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["str.replace(/[^\\d]/g",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":1242,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":474,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":443,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{}}}],["sub",{"_index":457,"title":{},"body":{"classes/ForgotPasswordModel.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{}}}],["subject",{"_index":671,"title":{},"body":{"injectables/MailerService.html":{}}}],["successfullylogout",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":487,"title":{},"body":{"guards/GqlAuthGuard.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["super.debug(message",{"_index":56,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["super.verbose(message",{"_index":58,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["super.warn(message",{"_index":54,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["support",{"_index":1263,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1313,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1145,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1144,"title":{},"body":{"coverage.html":{}}}],["tail",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["take",{"_index":818,"title":{},"body":{"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"index.html":{}}}],["tasks",{"_index":973,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasksservice",{"_index":158,"title":{"injectables/TasksService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1216,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1219,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1218,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1214,"title":{},"body":{"index.html":{}}}],["text",{"_index":672,"title":{},"body":{"injectables/MailerService.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":1296,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":847,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.forgotpassword(forgotpasswordmodel",{"_index":295,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.getpages(context",{"_index":298,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.getroles",{"_index":304,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.isauthenticated(ctx",{"_index":290,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.login(loginmodel",{"_index":286,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.logout(ctx",{"_index":292,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.updatepageroles(updatepagerolesmodel",{"_index":303,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.configservice",{"_index":513,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.configservice.get('expire_time",{"_index":750,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('expire_time_refresh_token",{"_index":755,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('issuer",{"_index":752,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('jwt_refreshtoken_secret",{"_index":756,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":511,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["this.createpagesforinitialdeployment",{"_index":971,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.jwtservice",{"_index":514,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["this.jwtservice.decode",{"_index":949,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.jwtservice.decode(context.req.cookies['jwt']).sub",{"_index":937,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.jwtservice.decode(ctx.req.cookies['jwt']).sub",{"_index":782,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.decode(req.cookies['jwt'].trim",{"_index":523,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["this.jwtservice.decode(req.cookies['jwt'].trim()).sub",{"_index":119,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.jwtservice.signasync(payload",{"_index":749,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.verifyasync",{"_index":791,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.verifyasync(existuserauth.token",{"_index":789,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.jwtservice.verifyasync(req.cookies['jwt",{"_index":510,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.kafkahumanresourceservice.emit",{"_index":628,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{}}}],["this.logger.log(`request",{"_index":120,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.mailservice.sendmail",{"_index":1009,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.managejwttoken(existuser",{"_index":745,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismarequestservice.changeactivationusers",{"_index":1108,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.createuser(usermodel",{"_index":1101,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.getallusersbyquery(query",{"_index":1098,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.getuserbyquery(query",{"_index":1100,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.getuserinfo(context",{"_index":1114,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.harddeleteusers(deletedusers",{"_index":1106,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.hasuseractionpermission(context",{"_index":1117,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.manageuseravatar",{"_index":1112,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.revertdeletedusers(deletedusers",{"_index":1105,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.softdeleteusers(deletedusers",{"_index":1104,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.updateuser(usermodel",{"_index":1102,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismarequestservice.updateuserroles(activationusers",{"_index":1110,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.prismaservice",{"_index":512,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["this.prismaservice.auth",{"_index":1000,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.auth.create",{"_index":767,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.auth.findfirst",{"_index":765,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.auth.update",{"_index":772,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.page",{"_index":978,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.page.count",{"_index":977,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.page.findmany",{"_index":798,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.page.update",{"_index":805,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["this.prismaservice.user",{"_index":990,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.user.count",{"_index":901,"title":{},"body":{"injectables/PrismaUsersService.html":{},"injectables/TasksService.html":{}}}],["this.prismaservice.user.create",{"_index":911,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.deletemany",{"_index":927,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findfirst",{"_index":525,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["this.prismaservice.user.findfirst(query",{"_index":902,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":918,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findmany(queries",{"_index":898,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":722,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.update",{"_index":732,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":923,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["this.reflector.get",{"_index":520,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.reflector.get(hasroles",{"_index":517,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["this.savetofile('error",{"_index":52,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.savetofile('log",{"_index":49,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["this.setadminforinitialdeployment",{"_index":970,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.transporter",{"_index":675,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.transporter.sendmail(mailoptions",{"_index":686,"title":{},"body":{"injectables/MailerService.html":{}}}],["throw",{"_index":506,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["time",{"_index":71,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/PrismaAuthService.html":{},"index.html":{}}}],["time.ts",{"_index":1141,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["timestyle",{"_index":74,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["todefault",{"_index":998,"title":{},"body":{"injectables/TasksService.html":{}}}],["toggle",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["toggleactiveuser",{"_index":1107,"title":{},"body":{"classes/UsersResolver.html":{}}}],["toggleactiveuserdto",{"_index":411,"title":{"classes/ToggleActiveUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["token",{"_index":746,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/TasksService.html":{}}}],["tokenexpired",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["took",{"_index":121,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["tools",{"_index":483,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["tools.comparehash(loginmodel.password",{"_index":739,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["tools.getdrivesize",{"_index":1008,"title":{},"body":{"injectables/TasksService.html":{}}}],["tools.getuserinfofromcontext",{"_index":787,"title":{},"body":{"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{}}}],["tools.hash(forgotpasswordmodel.password",{"_index":796,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["tools.hash(process.env['admin_password_system",{"_index":993,"title":{},"body":{"injectables/TasksService.html":{}}}],["tools.hash(user.password",{"_index":910,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["tools.matchs",{"_index":527,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["tools.matchs(userroles.roles",{"_index":533,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["total",{"_index":1007,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["totalcount",{"_index":315,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["totalcount:number",{"_index":338,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["totallogincounter",{"_index":769,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["touch",{"_index":1303,"title":{},"body":{"index.html":{}}}],["trace",{"_index":51,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["transform",{"_index":123,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["transformer",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":648,"title":{},"body":{"modules/KafkaModule.html":{}}}],["transport.kafka",{"_index":652,"title":{},"body":{"modules/KafkaModule.html":{}}}],["transporter",{"_index":667,"title":{},"body":{"injectables/MailerService.html":{}}}],["trim().split(/\\s+/).map(number",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":91,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["try",{"_index":509,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["ts",{"_index":894,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["twitter",{"_index":1309,"title":{},"body":{"index.html":{}}}],["txt",{"_index":95,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"modules/GraphqlModule.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"injectables/KafkaHumanResourceService.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/graphql",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":643,"title":{},"body":{"injectables/KafkaHumanResourceService.html":{},"index.html":{}}}],["u",{"_index":66,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["unauthorized",{"_index":551,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":718,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["unauthorizedexception(consts.unauthorized",{"_index":799,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["undefined",{"_index":262,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{}}}],["undefined'])@mutation(undefined",{"_index":263,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["undefined'])@query(undefined",{"_index":1068,"title":{},"body":{"classes/UsersResolver.html":{}}}],["undefined})@isemail()@isnotempty({message",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isnotempty",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isnotempty({message",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isphonenumber('ir",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Users.html":{}}}],["undefined})@isstrongpassword({minlength",{"_index":1038,"title":{},"body":{"classes/Users.html":{}}}],["unexpected",{"_index":128,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["unit",{"_index":1215,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":242,"title":{},"body":{"classes/AuthResolver.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTStrategy.html":{},"injectables/MailerService.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/UsersResolver.html":{}}}],["unlicensed",{"_index":1322,"title":{},"body":{"properties.html":{}}}],["unsupported_media_type",{"_index":563,"title":{},"body":{"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["unsupportedmediatypemessage",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["updatedate",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["updatemany",{"_index":1001,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatemodel",{"_index":890,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updatemodel.ids",{"_index":932,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updatemodel.roles",{"_index":931,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updatepageroles",{"_index":231,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["updatepageroles(updatepagerolesmodel",{"_index":259,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["updatepagerolesdto",{"_index":260,"title":{"classes/UpdatePageRolesDto.html":{}},"body":{"classes/AuthResolver.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"injectables/PrismaAuthService.html":{},"classes/UpdatePageRolesDto.html":{},"coverage.html":{}}}],["updatepagerolesmodel",{"_index":265,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PrismaAuthService.html":{}}}],["updatepagerolesmodel.id",{"_index":807,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["updatepagerolesmodel.roles",{"_index":806,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["updaterolestouser",{"_index":1109,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updaterolestouserdto",{"_index":414,"title":{"classes/UpdateRolesToUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["updates",{"_index":1285,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":860,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["updateuser(user",{"_index":886,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["updateuser(usermodel",{"_index":1088,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuserdto",{"_index":398,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["updateuserroles",{"_index":861,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["updateuserroles(activationusers",{"_index":1090,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuserroles(updatemodel",{"_index":888,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["upload",{"_index":893,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["use",{"_index":107,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"modules/GraphqlModule.html":{}}}],["useclass",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["used,free,usedcapacity,freecapacity",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":271,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards(gqlauthguard",{"_index":296,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards(gqlauthguard)@hasroles(['undefined",{"_index":261,"title":{},"body":{"classes/AuthResolver.html":{}}}],["useguards(gqlauthguard)@query(undefined",{"_index":243,"title":{},"body":{"classes/AuthResolver.html":{}}}],["user",{"_index":355,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"injectables/MailerService.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":904,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.id",{"_index":916,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.nationalcode",{"_index":906,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.password",{"_index":909,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.phone",{"_index":905,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.updatedate",{"_index":913,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user.username",{"_index":903,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["user:users",{"_index":348,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["userauth",{"_index":946,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userauth.userid",{"_index":947,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userauthinfo",{"_index":764,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.dailylogincounter",{"_index":773,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.id",{"_index":777,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.refreshtoken",{"_index":776,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["userauthinfo.totallogincounter",{"_index":774,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["useravatarmanager",{"_index":933,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userclassification",{"_index":987,"title":{},"body":{"injectables/TasksService.html":{}}}],["userid",{"_index":117,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DeleteUserDto.html":{},"guards/GqlAuthGuard.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"miscellaneous/variables.html":{}}}],["userid:string",{"_index":349,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["useridisrequired",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usermodel",{"_index":1067,"title":{},"body":{"classes/UsersResolver.html":{}}}],["usermodule",{"_index":155,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{}}}],["usernamerequiredmessage",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usernotexist",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useroutput",{"_index":358,"title":{"classes/UserOutput.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"injectables/PrismaUsersService.html":{},"classes/UserOutput.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["userresult",{"_index":914,"title":{},"body":{"injectables/PrismaUsersService.html":{}}}],["userroles",{"_index":524,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["userroles.roles",{"_index":528,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["userroles.roles.some((b",{"_index":801,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["users",{"_index":325,"title":{"classes/Users.html":{}},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/PermittedPage.html":{},"injectables/TasksService.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["users.graphql.controller",{"_index":1027,"title":{},"body":{"modules/UserModule.html":{}}}],["users.model",{"_index":896,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["users.model.dto",{"_index":891,"title":{},"body":{"injectables/PrismaUsersService.html":{},"classes/UsersResolver.html":{}}}],["users.prisma.service",{"_index":1026,"title":{},"body":{"modules/UserModule.html":{},"classes/UsersResolver.html":{}}}],["users/users.model",{"_index":326,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["userslist",{"_index":985,"title":{},"body":{"injectables/TasksService.html":{}}}],["usersmanagement",{"_index":982,"title":{},"body":{"injectables/TasksService.html":{}}}],["usersresolver",{"_index":1024,"title":{"classes/UsersResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":327,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{},"index.html":{}}}],["utf",{"_index":99,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["utf8",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/consts",{"_index":278,"title":{},"body":{"classes/AuthResolver.html":{},"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"classes/JwtPayLoad.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/LoginResponse.html":{},"classes/ManageAvatarUserDto.html":{},"classes/MenuStructureModel.html":{},"classes/PermittedPage.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdatePageRolesDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOutput.html":{},"classes/Users.html":{}}}],["utils/date",{"_index":720,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["utils/logger",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{}}}],["utils/mail",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/tasks",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/tools",{"_index":484,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"injectables/PrismaUsersService.html":{},"guards/RolesGuard.html":{}}}],["v",{"_index":803,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["validate",{"_index":610,"title":{},"body":{"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{}}}],["validate(context",{"_index":500,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["validate(payload",{"_index":494,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{}}}],["validator",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ManageAvatarUserDto.html":{},"classes/ToggleActiveUserDto.html":{},"classes/UpdateRolesToUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/Users.html":{},"dependencies.html":{}}}],["value",{"_index":433,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/ForgotPasswordDto.html":{},"classes/ForgotPasswordModel.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"classes/LoginDto.html":{},"classes/LoginModel.html":{},"classes/MenuStructureModel.html":{},"injectables/PrismaAuthService.html":{},"classes/PrismaQuery.html":{},"classes/PrismaSingleQuery.html":{},"classes/UpdatePageRolesDto.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":114,"title":{"miscellaneous/variables.html":{}},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":424,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":57,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["verify",{"_index":788,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["verifyrefreshtoken",{"_index":790,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["version",{"_index":1320,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1271,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1260,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1274,"title":{},"body":{"index.html":{}}}],["vm",{"_index":478,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"injectables/PrismaAuthService.html":{},"guards/RolesGuard.html":{}}}],["void",{"_index":428,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/GraphqlModule.html":{},"injectables/KafkaHumanResourceService.html":{}}}],["warn",{"_index":425,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warn(message",{"_index":53,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["watch",{"_index":1211,"title":{},"body":{"index.html":{}}}],["website",{"_index":1307,"title":{},"body":{"index.html":{}}}],["whitch",{"_index":344,"title":{},"body":{"classes/BaseQuery.html":{},"classes/Counter.html":{},"classes/PermittedPage.html":{},"classes/UserOutput.html":{}}}],["win32",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":1259,"title":{},"body":{"index.html":{}}}],["writefilesync",{"_index":36,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["writefilesync(filename",{"_index":97,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["wrongincomingparameters",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrongpasswordcounter",{"_index":734,"title":{},"body":{"injectables/PrismaAuthService.html":{}}}],["x",{"_index":530,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":532,"title":{},"body":{"guards/GqlAuthGuard.html":{},"injectables/JWTRefreshTokenStrategy.html":{},"injectables/JWTStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["year",{"_index":82,"title":{},"body":{"classes/AllExceptionsToGraphQLErrorFilter.html":{},"injectables/CustomLogger.html":{},"injectables/GraphQLLoggingMiddleware.html":{}}}],["yes",{"_index":427,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/GraphQlBadGatewayException.html":{},"classes/GraphQlBadRequestException.html":{},"classes/GraphQlConflictException.html":{},"classes/GraphQlForbiddenException.html":{},"classes/GraphQlInternalServerErrorException.html":{},"classes/GraphQlMethodNotAllowedException.html":{},"classes/GraphQlNotAcceptableException.html":{},"classes/GraphQlNotFoundException.html":{},"classes/GraphQlNotImplementedException.html":{},"classes/GraphQlPayloadTooLargeException.html":{},"classes/GraphQlRequestTimeoutException.html":{},"classes/GraphQlUnauthorizedException.html":{},"classes/GraphQlUnsupportedMediaTypeException.html":{}}}],["you'd",{"_index":1300,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1220,"title":{},"body":{"index.html":{}}}],["youcannotremoveadminusers",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yournationalcode",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourpassword",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourrealemail",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourrealphone",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["youruseridentifier",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourusername",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/KafkaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsToGraphQLErrorFilter.html":{"url":"classes/AllExceptionsToGraphQLErrorFilter.html","title":"class - AllExceptionsToGraphQLErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsToGraphQLErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ConsoleLogger,\n  ExceptionFilter,\n  Injectable,\n  NestMiddleware,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { NextFunction } from 'express';\nimport { appendFileSync, existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { GraphQLError } from 'graphql';\nimport { join } from 'path';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  log = (message: string, context?: any) => {\n    this.saveToFile('log', message, context);\n  };\n\n  error(message: string, trace: string, context?: string) {\n    this.saveToFile('error', message, context, trace);\n  }\n\n  warn(message: string, context?: string) {\n    super.warn(message, context);\n  }\n\n  debug(message: string, context?: string) {\n    super.debug(message, context);\n  }\n\n  verbose(message: string, context?: string) {\n    super.verbose(message, context);\n  }\n  saveToFile = (\n    type: 'error' | 'log',\n    message: string,\n    context: any,\n    trace: string = '',\n  ) => {\n    let date = (option: any) =>\n      new Date().toLocaleString('fa-IR-u-nu-latn', option);\n    let result = `record date & time => ${date({ dateStyle: 'short', timeStyle: 'medium' })} | message => ${message} | context => ${JSON.stringify(context)} | trace => ${trace} \\n\\n`;\n\n    const pathName = join(\n      __dirname,\n      type === 'log'\n        ? `/loges/log/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`\n        : `/loges/error/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`,\n    );\n    if (!existsSync(pathName)) {\n      mkdirSync(pathName, { recursive: true });\n    }\n    let fileName = join(pathName, `${date({ day: 'numeric' })}.txt`);\n    if (!existsSync(fileName)) {\n      writeFileSync(fileName, result, { encoding: 'utf-8' });\n    } else {\n      appendFileSync(fileName, result, { encoding: 'utf-8' });\n    }\n  };\n}\n\n@Injectable()\nexport class GraphQLLoggingMiddleware implements NestMiddleware {\n  private readonly logger = new CustomLogger('GraphQL');\n  private jwtService = new JwtService();\n  use = (req: any, res: any, next: NextFunction) => {\n    const now = Date.now();\n    const { query, variables } = req.body;\n    res.on('finish', () => {\n      let userId = '';\n      if (req && req.cookies['jwt']) {\n        userId = this.jwtService.decode(req.cookies['jwt'].trim()).sub;\n      }\n      this.logger.log(`Request took ${Date.now() - now}ms`, {\n        query,\n        variables,\n        userId: userId,\n      });\n    });\n    next();\n  };\n}\n\n@Catch()\nexport class AllExceptionsToGraphQLErrorFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost) {\n    // Transform all exceptions into GraphQL errors\n    return new GraphQLError(\n      exception.message || 'An unexpected error occurred',\n      {\n        extensions: {\n          code: exception.extensions.code\n            ? exception.extensions.code\n            : 'INTERNAL_SERVER_ERROR',\n          statusCode: exception.extensions.statusCode,\n          details: exception.stack,\n        },\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\nKafkaModule\n\nKafkaModule\n\nAppModule -->\n\nKafkaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nAppModule -->\n\nCustomLogger->AppModule\n\n\n\n\n\nMailerService\n\nMailerService\n\nAppModule -->\n\nMailerService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            MailerService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GraphqlModule\n                        \n                        \n                            KafkaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KafkaModule } from './bases/modules/kafka';\nimport { PrismaClient } from '@prisma/client';\nimport { GraphqlModule } from './bases/modules/Graphql';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TasksService } from './utils/tasks';\nimport { ConfigModule } from '@nestjs/config';\nimport { DevtoolsModule } from '@nestjs/devtools-integration';\nimport { UserModule } from './modules/users/users.module';\nimport { PrismaService } from './bases/services/prisma-client';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './modules/auth/jwt.strategy';\nimport { JwtService } from '@nestjs/jwt';\nimport { CustomLogger } from './utils/logger';\nimport { MailerService } from './utils/mail-server';\n\n@Module({\n  imports: [\n    KafkaModule,\n    GraphqlModule,\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot(),\n    DevtoolsModule.register({\n      http: process.env.NODE_ENV !== 'production',\n    }),\n    UserModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [\n    PrismaClient,\n    PrismaService,\n    TasksService,\n    JwtService,\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    CustomLogger,\n    MailerService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthResolver \n\nAuthResolver \n\n\n\nAuthModule\n\nAuthModule\n\nAuthResolver  -->\n\nAuthModule->AuthResolver \n\n\n\n\n\nJWTRefreshTokenStrategy\n\nJWTRefreshTokenStrategy\n\nAuthModule -->\n\nJWTRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nPrismaAuthService\n\nPrismaAuthService\n\nAuthModule -->\n\nPrismaAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JWTRefreshTokenStrategy\n                        \n                        \n                            JWTStrategy\n                        \n                        \n                            PrismaAuthService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthResolver\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport { AuthResolver } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JWTRefreshTokenStrategy, JWTStrategy } from './jwt.strategy';\nimport { PrismaService } from '@base/services/prisma-client';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('EXPIRE_TIME'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [AuthResolver, JwtModule],\n  providers: [\n    PrismaService,\n    ConfigService,\n    PrismaAuthService,\n    JWTStrategy,\n    JWTRefreshTokenStrategy,\n    AuthResolver,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                ForgotPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                GetRoles\n                            \n                            \n                                    \n                                    Async\n                                IsAuthenticated\n                            \n                            \n                                    \n                                    Async\n                                Login\n                            \n                            \n                                    \n                                    Async\n                                Logout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                MenuBar\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                UpdatePageRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: PrismaAuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.controller.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        PrismaAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        ForgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    ForgotPassword(forgotPasswordModel: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'forgotPassword'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordModel\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        GetRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetRoles()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Query(undefined, {name: 'roles'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        IsAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    IsAuthenticated(ctx: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'isAuth'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(loginModel: LoginDto, context)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'login'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginModel\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        Logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    Logout(ctx: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'logout'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        MenuBar\n                        \n                    \n                \n            \n            \n                \n                        \n                    MenuBar(context: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Query(undefined, {name: 'menu'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        UpdatePageRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdatePageRoles(updatePageRolesModel: UpdatePageRolesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'updatePageRoles'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePageRolesModel\n                                            \n                                                            UpdatePageRolesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport {\n  ForgotPasswordDto,\n  LoginDto,\n  UpdatePageRolesDto,\n} from './auth.model.dto';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard, HasRoles } from './jwt.strategy';\nimport {\n  ForgotPasswordModel,\n  LoginResponse,\n  MenuStructureModel,\n} from './auth.model';\nimport { Consts } from '@utils/consts';\nimport { Roles } from '@prisma/client';\nimport { Counter } from '@base/base';\n@Resolver()\nexport class AuthResolver {\n  constructor(private authService: PrismaAuthService) {}\n\n  //#region-------------- login ---------------------------\n  @Mutation(() => LoginResponse, { name: 'login' })\n  async Login(\n    @Args({ nullable: false, name: 'loginModel', type: () => LoginDto })\n    loginModel: LoginDto,\n    @Context() context,\n  ) {\n    return await this.authService.Login(loginModel, context);\n  }\n  //#endregion\n\n  //#region-------------- IsAuthenticated -----------------\n  @Mutation(() => Boolean, { name: 'isAuth' })\n  async IsAuthenticated(@Context() ctx: any) {\n    return await this.authService.IsAuthenticated(ctx);\n  }\n  //#endregion\n\n  //#region-------------- logout --------------------------\n  @Mutation(() => String, { name: 'logout' })\n  async Logout(@Context() ctx: any) {\n    await this.authService.Logout(ctx);\n    return Consts.successfullyLogOut;\n  }\n  //#endregion\n\n  //#region-------------- forgotPassword ------------------\n  @Mutation(() => ForgotPasswordModel, { name: 'forgotPassword' })\n  async ForgotPassword(\n    @Args({\n      nullable: false,\n      name: 'forgotModel',\n      type: () => ForgotPasswordDto,\n    })\n    forgotPasswordModel: ForgotPasswordDto,\n  ) {\n    return await this.authService.ForgotPassword(forgotPasswordModel);\n  }\n  //#endregion\n\n  //#region-------------- MenuBar -------------------------\n  @UseGuards(GqlAuthGuard)\n  @Query(() => [MenuStructureModel], { name: 'menu' })\n  async MenuBar(@Context() context: any) {\n    return await this.authService.GetPages(context);\n  }\n  //#endregion\n\n  //#region-------------- updatePageRoles -----------------\n  @UseGuards(GqlAuthGuard)\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'updatePageRoles' })\n  async UpdatePageRoles(\n    @Args({\n      nullable: false,\n      name: 'updatePageRolesModel',\n      type: () => UpdatePageRolesDto,\n    })\n    updatePageRolesModel: UpdatePageRolesDto,\n  ) {\n    return await this.authService.UpdatePageRoles(updatePageRolesModel);\n  }\n  //#endregion\n\n  //#region-------------- roles ---------------------------\n  @UseGuards(GqlAuthGuard)\n  @Query(() => [String], { name: 'roles' })\n  async GetRoles() {\n    return await this.authService.GetRoles();\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseQuery.html":{"url":"classes/BaseQuery.html","title":"class - BaseQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/base.ts\n        \n\n\n            \n                Description\n            \n            \n                output model for pagination in queries\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                pageNumber\n                            \n                            \n                                    \n                                pageSize\n                            \n                            \n                                    \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pageNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'pageNumber', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'pageSize', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'totalCount', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Users } from '@users/users.model';\nimport { Consts } from '@utils/consts';\n\n/**\n * for using custom enum in graphql we should register it first\n * @param enum\n */\nregisterEnumType(Roles, { name: 'EnumRoles' });\n\n/**\n * output model for some graphql controler\n * @param number\n */\n@ObjectType()\nexport class Counter {\n  @Field(() => Int, {\n    nullable: true,\n    name: 'count',\n    description: Consts.Count,\n  })\n  count: number;\n}\n\n/**\n * output model for pagination in queries\n * @param totalCount:number\n * @param pageSize:number\n * @param pageNumber:number\n */\n@ObjectType()\nexport class BaseQuery {\n  @Field(() => Int, {\n    nullable: false,\n    name: 'totalCount',\n    description: Consts.totalCount,\n  })\n  totalCount: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageSize',\n    description: Consts.pageSize,\n  })\n  pageSize: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageNumber',\n    description: Consts.pageNumber,\n  })\n  pageNumber: number;\n}\n\n/**\n * model whitch permitted pages for Users\n * @param pageId:string\n * @param user:Users\n * @param userId:string\n */\n@ObjectType({ description: Consts.permittedPage })\nexport class PermittedPage {\n  @Field(() => String, {\n    nullable: false,\n    name: 'pageId',\n    description: Consts.pageId,\n  })\n  pageId: string;\n\n  @Field(() => Users, {\n    description: Consts.user,\n    name: 'user',\n    nullable: true,\n  })\n  user?: Users;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n\n/**\n * output model for some graphql controlers\n * @return users[]\n */\n@ObjectType()\nexport class UserOutput extends BaseQuery {\n  @Field(() => [Users], {\n    name: 'items',\n    nullable: true,\n  })\n  items: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Counter.html":{"url":"classes/Counter.html","title":"class - Counter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/base.ts\n        \n\n\n            \n                Description\n            \n            \n                output model for some graphql controler\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'count', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Users } from '@users/users.model';\nimport { Consts } from '@utils/consts';\n\n/**\n * for using custom enum in graphql we should register it first\n * @param enum\n */\nregisterEnumType(Roles, { name: 'EnumRoles' });\n\n/**\n * output model for some graphql controler\n * @param number\n */\n@ObjectType()\nexport class Counter {\n  @Field(() => Int, {\n    nullable: true,\n    name: 'count',\n    description: Consts.Count,\n  })\n  count: number;\n}\n\n/**\n * output model for pagination in queries\n * @param totalCount:number\n * @param pageSize:number\n * @param pageNumber:number\n */\n@ObjectType()\nexport class BaseQuery {\n  @Field(() => Int, {\n    nullable: false,\n    name: 'totalCount',\n    description: Consts.totalCount,\n  })\n  totalCount: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageSize',\n    description: Consts.pageSize,\n  })\n  pageSize: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageNumber',\n    description: Consts.pageNumber,\n  })\n  pageNumber: number;\n}\n\n/**\n * model whitch permitted pages for Users\n * @param pageId:string\n * @param user:Users\n * @param userId:string\n */\n@ObjectType({ description: Consts.permittedPage })\nexport class PermittedPage {\n  @Field(() => String, {\n    nullable: false,\n    name: 'pageId',\n    description: Consts.pageId,\n  })\n  pageId: string;\n\n  @Field(() => Users, {\n    description: Consts.user,\n    name: 'user',\n    nullable: true,\n  })\n  user?: Users;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n\n/**\n * output model for some graphql controlers\n * @return users[]\n */\n@ObjectType()\nexport class UserOutput extends BaseQuery {\n  @Field(() => [Users], {\n    name: 'items',\n    nullable: true,\n  })\n  items: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                nationalCode\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'email', description: undefined})@IsEmail()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'nationalCode', description: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'password', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'phone', description: undefined})@IsPhoneNumber('IR', {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'userName', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                saveToFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveToFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ConsoleLogger,\n  ExceptionFilter,\n  Injectable,\n  NestMiddleware,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { NextFunction } from 'express';\nimport { appendFileSync, existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { GraphQLError } from 'graphql';\nimport { join } from 'path';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  log = (message: string, context?: any) => {\n    this.saveToFile('log', message, context);\n  };\n\n  error(message: string, trace: string, context?: string) {\n    this.saveToFile('error', message, context, trace);\n  }\n\n  warn(message: string, context?: string) {\n    super.warn(message, context);\n  }\n\n  debug(message: string, context?: string) {\n    super.debug(message, context);\n  }\n\n  verbose(message: string, context?: string) {\n    super.verbose(message, context);\n  }\n  saveToFile = (\n    type: 'error' | 'log',\n    message: string,\n    context: any,\n    trace: string = '',\n  ) => {\n    let date = (option: any) =>\n      new Date().toLocaleString('fa-IR-u-nu-latn', option);\n    let result = `record date & time => ${date({ dateStyle: 'short', timeStyle: 'medium' })} | message => ${message} | context => ${JSON.stringify(context)} | trace => ${trace} \\n\\n`;\n\n    const pathName = join(\n      __dirname,\n      type === 'log'\n        ? `/loges/log/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`\n        : `/loges/error/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`,\n    );\n    if (!existsSync(pathName)) {\n      mkdirSync(pathName, { recursive: true });\n    }\n    let fileName = join(pathName, `${date({ day: 'numeric' })}.txt`);\n    if (!existsSync(fileName)) {\n      writeFileSync(fileName, result, { encoding: 'utf-8' });\n    } else {\n      appendFileSync(fileName, result, { encoding: 'utf-8' });\n    }\n  };\n}\n\n@Injectable()\nexport class GraphQLLoggingMiddleware implements NestMiddleware {\n  private readonly logger = new CustomLogger('GraphQL');\n  private jwtService = new JwtService();\n  use = (req: any, res: any, next: NextFunction) => {\n    const now = Date.now();\n    const { query, variables } = req.body;\n    res.on('finish', () => {\n      let userId = '';\n      if (req && req.cookies['jwt']) {\n        userId = this.jwtService.decode(req.cookies['jwt'].trim()).sub;\n      }\n      this.logger.log(`Request took ${Date.now() - now}ms`, {\n        query,\n        variables,\n        userId: userId,\n      });\n    });\n    next();\n  };\n}\n\n@Catch()\nexport class AllExceptionsToGraphQLErrorFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost) {\n    // Transform all exceptions into GraphQL errors\n    return new GraphQLError(\n      exception.message || 'An unexpected error occurred',\n      {\n        extensions: {\n          code: exception.extensions.code\n            ? exception.extensions.code\n            : 'INTERNAL_SERVER_ERROR',\n          statusCode: exception.extensions.statusCode,\n          details: exception.stack,\n        },\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'ids', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:82\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'password', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@InputType()\nexport class LoginDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@InputType()\nexport class ForgotPasswordDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region manage pages in menu\n@InputType()\nexport class UpdatePageRolesDto {\n  @Field(() => String, { name: 'id' })\n  id: string = '';\n  @Field(() => [Roles], { name: 'roles' })\n  roles: Roles[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordModel.html":{"url":"classes/ForgotPasswordModel.html","title":"class - ForgotPasswordModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GqlAuthGuard.html":{"url":"guards/GqlAuthGuard.html","title":"guard - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/jwt.strategy.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:77\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport {\n  GraphQlForbiddenException,\n  GraphQlUnauthorizedException,\n} from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    if (\n      decoratorNotRoles\n        ? !Tools.matchs(\n            userRoles.roles,\n            Object.values(Roles).filter(\n              (x) => !decoratorNotRoles.some((y) => y === x),\n            ),\n          )\n        : !Tools.matchs(userRoles.roles, decoratorRoles)\n    ) {\n      throw new GraphQlForbiddenException(\n        Consts.ForbiddenMessage,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GraphQLLoggingMiddleware.html":{"url":"injectables/GraphQLLoggingMiddleware.html","title":"injectable - GraphQLLoggingMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GraphQLLoggingMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtService\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new JwtService()\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new CustomLogger('GraphQL')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:68\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ConsoleLogger,\n  ExceptionFilter,\n  Injectable,\n  NestMiddleware,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { NextFunction } from 'express';\nimport { appendFileSync, existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { GraphQLError } from 'graphql';\nimport { join } from 'path';\n\n@Injectable()\nexport class CustomLogger extends ConsoleLogger {\n  log = (message: string, context?: any) => {\n    this.saveToFile('log', message, context);\n  };\n\n  error(message: string, trace: string, context?: string) {\n    this.saveToFile('error', message, context, trace);\n  }\n\n  warn(message: string, context?: string) {\n    super.warn(message, context);\n  }\n\n  debug(message: string, context?: string) {\n    super.debug(message, context);\n  }\n\n  verbose(message: string, context?: string) {\n    super.verbose(message, context);\n  }\n  saveToFile = (\n    type: 'error' | 'log',\n    message: string,\n    context: any,\n    trace: string = '',\n  ) => {\n    let date = (option: any) =>\n      new Date().toLocaleString('fa-IR-u-nu-latn', option);\n    let result = `record date & time => ${date({ dateStyle: 'short', timeStyle: 'medium' })} | message => ${message} | context => ${JSON.stringify(context)} | trace => ${trace} \\n\\n`;\n\n    const pathName = join(\n      __dirname,\n      type === 'log'\n        ? `/loges/log/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`\n        : `/loges/error/${date({ year: 'numeric' })}-${date({ month: '2-digit' })}`,\n    );\n    if (!existsSync(pathName)) {\n      mkdirSync(pathName, { recursive: true });\n    }\n    let fileName = join(pathName, `${date({ day: 'numeric' })}.txt`);\n    if (!existsSync(fileName)) {\n      writeFileSync(fileName, result, { encoding: 'utf-8' });\n    } else {\n      appendFileSync(fileName, result, { encoding: 'utf-8' });\n    }\n  };\n}\n\n@Injectable()\nexport class GraphQLLoggingMiddleware implements NestMiddleware {\n  private readonly logger = new CustomLogger('GraphQL');\n  private jwtService = new JwtService();\n  use = (req: any, res: any, next: NextFunction) => {\n    const now = Date.now();\n    const { query, variables } = req.body;\n    res.on('finish', () => {\n      let userId = '';\n      if (req && req.cookies['jwt']) {\n        userId = this.jwtService.decode(req.cookies['jwt'].trim()).sub;\n      }\n      this.logger.log(`Request took ${Date.now() - now}ms`, {\n        query,\n        variables,\n        userId: userId,\n      });\n    });\n    next();\n  };\n}\n\n@Catch()\nexport class AllExceptionsToGraphQLErrorFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost) {\n    // Transform all exceptions into GraphQL errors\n    return new GraphQLError(\n      exception.message || 'An unexpected error occurred',\n      {\n        extensions: {\n          code: exception.extensions.code\n            ? exception.extensions.code\n            : 'INTERNAL_SERVER_ERROR',\n          statusCode: exception.extensions.statusCode,\n          details: exception.stack,\n        },\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlBadGatewayException.html":{"url":"classes/GraphQlBadGatewayException.html","title":"class - GraphQlBadGatewayException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlBadGatewayException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:171\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlBadRequestException.html":{"url":"classes/GraphQlBadRequestException.html","title":"class - GraphQlBadRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlBadRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlConflictException.html":{"url":"classes/GraphQlConflictException.html","title":"class - GraphQlConflictException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlConflictException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlForbiddenException.html":{"url":"classes/GraphQlForbiddenException.html","title":"class - GraphQlForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlInternalServerErrorException.html":{"url":"classes/GraphQlInternalServerErrorException.html","title":"class - GraphQlInternalServerErrorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlInternalServerErrorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:129\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlMethodNotAllowedException.html":{"url":"classes/GraphQlMethodNotAllowedException.html","title":"class - GraphQlMethodNotAllowedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlMethodNotAllowedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:157\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlNotAcceptableException.html":{"url":"classes/GraphQlNotAcceptableException.html","title":"class - GraphQlNotAcceptableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlNotAcceptableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:59\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlNotFoundException.html":{"url":"classes/GraphQlNotFoundException.html","title":"class - GraphQlNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlNotImplementedException.html":{"url":"classes/GraphQlNotImplementedException.html","title":"class - GraphQlNotImplementedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlNotImplementedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:143\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlPayloadTooLargeException.html":{"url":"classes/GraphQlPayloadTooLargeException.html","title":"class - GraphQlPayloadTooLargeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlPayloadTooLargeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:101\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlRequestTimeoutException.html":{"url":"classes/GraphQlRequestTimeoutException.html","title":"class - GraphQlRequestTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlRequestTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlUnauthorizedException.html":{"url":"classes/GraphQlUnauthorizedException.html","title":"class - GraphQlUnauthorizedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlUnauthorizedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlUnsupportedMediaTypeException.html":{"url":"classes/GraphQlUnsupportedMediaTypeException.html","title":"class - GraphQlUnsupportedMediaTypeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlUnsupportedMediaTypeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: number, options?: GraphQLErrorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/error-handler.ts:115\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    GraphQLErrorOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class GraphQlForbiddenException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'FORBIDDEN' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadRequestException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_REQUEST' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnauthorizedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNAUTHORIZED' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotFoundException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_FOUND' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotAcceptableException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_ACCEPTABLE' },\n      }),\n    );\n  }\n}\nexport class GraphQlRequestTimeoutException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'REQUEST_TIMEOUT' },\n      }),\n    );\n  }\n}\nexport class GraphQlConflictException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'CONFLICT' },\n      }),\n    );\n  }\n}\nexport class GraphQlPayloadTooLargeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'PAYLOAD_TOO_LARGE' },\n      }),\n    );\n  }\n}\nexport class GraphQlUnsupportedMediaTypeException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'UNSUPPORTED_MEDIA_TYPE' },\n      }),\n    );\n  }\n}\nexport class GraphQlInternalServerErrorException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'INTERNAL_SERVER_ERROR' },\n      }),\n    );\n  }\n}\nexport class GraphQlNotImplementedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'NOT_IMPLEMENTED' },\n      }),\n    );\n  }\n}\nexport class GraphQlMethodNotAllowedException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'METHOD_NOT_ALLOWED' },\n      }),\n    );\n  }\n}\nexport class GraphQlBadGatewayException extends GraphQLError {\n  constructor(\n    message: string,\n    statusCode: number,\n    options?: GraphQLErrorOptions,\n  ) {\n    super(\n      message,\n      Object.assign(options ?? {}, {\n        extensions: { statusCode: statusCode, code: 'BAD_GATEWAY' },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GraphqlModule.html":{"url":"modules/GraphqlModule.html","title":"module - GraphqlModule","body":"\n                   \n\n\n\n\n    Modules\n    GraphqlModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bases/modules/Graphql.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bases/modules/Graphql.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ApolloDriverConfig, ApolloDriver } from '@nestjs/apollo';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { GraphQLModule, GraphQLSchemaBuilderModule } from '@nestjs/graphql';\nimport { GraphQLLoggingMiddleware } from '@utils/logger';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    GraphQLSchemaBuilderModule,\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n      sortSchema: true,\n      playground: false,\n      csrfPrevention: true,\n      hideSchemaDetailsFromClientErrors: true,\n      includeStacktraceInErrorResponses: true,\n      formatError: (error) => {\n        return {\n          extensions: error.extensions,\n          message: error.message,\n          path: error.path,\n        };\n      },\n      introspection: true, // when use production mode it should be true otherwise false\n      context: ({ req, res }) => ({ req, res }),\n    }),\n  ],\n})\nexport class GraphqlModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(GraphQLLoggingMiddleware).forRoutes('/graphql');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTRefreshTokenStrategy.html":{"url":"injectables/JWTRefreshTokenStrategy.html","title":"injectable - JWTRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(context: Context, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        Context\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport {\n  GraphQlForbiddenException,\n  GraphQlUnauthorizedException,\n} from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    if (\n      decoratorNotRoles\n        ? !Tools.matchs(\n            userRoles.roles,\n            Object.values(Roles).filter(\n              (x) => !decoratorNotRoles.some((y) => y === x),\n            ),\n          )\n        : !Tools.matchs(userRoles.roles, decoratorRoles)\n    ) {\n      throw new GraphQlForbiddenException(\n        Consts.ForbiddenMessage,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTStrategy.html":{"url":"injectables/JWTStrategy.html","title":"injectable - JWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport {\n  GraphQlForbiddenException,\n  GraphQlUnauthorizedException,\n} from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    if (\n      decoratorNotRoles\n        ? !Tools.matchs(\n            userRoles.roles,\n            Object.values(Roles).filter(\n              (x) => !decoratorNotRoles.some((y) => y === x),\n            ),\n          )\n        : !Tools.matchs(userRoles.roles, decoratorRoles)\n    ) {\n      throw new GraphQlForbiddenException(\n        Consts.ForbiddenMessage,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtPayLoad.html":{"url":"classes/JwtPayLoad.html","title":"class - JwtPayLoad","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtPayLoad\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roles\n                            \n                            \n                                sub\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:93\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaHumanResourceService.html":{"url":"injectables/KafkaHumanResourceService.html","title":"injectable - KafkaHumanResourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaHumanResourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/kafka.hr.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                CreateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kafKaHumanResourceService: ClientKafka)\n                    \n                \n                        \n                            \n                                Defined in src/bases/services/kafka.hr.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        kafKaHumanResourceService\n                                                  \n                                                        \n                                                                    ClientKafka\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        CreateUser\n                        \n                    \n                \n            \n            \n                \nCreateUser(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bases/services/kafka.hr.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientKafka } from '@nestjs/microservices';\n\n@Injectable()\nexport class KafkaHumanResourceService {\n  constructor(\n    @Inject('hr_service')\n    private readonly kafKaHumanResourceService: ClientKafka,\n  ) {}\n  CreateUser(payload: any) {\n    this.kafKaHumanResourceService.emit(\n      'create_personnel',\n      JSON.stringify({ name: 'reza', id: 0, family: 'salmani' }),\n    );\n  }\n}\n//https://github.com/tkssharma/nestjs-kafka-monorepo/blob/develop/apps/api-gateway/src/app.controller.ts\n//https://github.com/israelio/nestjs-kafka-example/blob/master/src/app.controller.ts\n//https://blog.logrocket.com/microservices-nestjs-kafka-typescript/\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaModule.html":{"url":"modules/KafkaModule.html","title":"module - KafkaModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_KafkaModule\n\n\n\ncluster_KafkaModule_providers\n\n\n\n\nKafkaHumanResourceService\n\nKafkaHumanResourceService\n\n\n\nKafkaModule\n\nKafkaModule\n\nKafkaModule -->\n\nKafkaHumanResourceService->KafkaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bases/modules/kafka.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KafkaHumanResourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { KafkaHumanResourceService } from '@base/services/kafka.hr';\n\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'hr_service',\n        transport: Transport.KAFKA,\n        options: {\n          client: {\n            clientId: 'hr',\n            brokers: ['localhost:9092'],\n          },\n          consumer: {\n            groupId: 'hr_consumer',\n          },\n        },\n      },\n    ]),\n  ],\n  providers: [KafkaHumanResourceService],\n})\nexport class KafkaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'password', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@InputType()\nexport class LoginDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@InputType()\nexport class ForgotPasswordDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region manage pages in menu\n@InputType()\nexport class UpdatePageRolesDto {\n  @Field(() => String, { name: 'id' })\n  id: string = '';\n  @Field(() => [Roles], { name: 'roles' })\n  roles: Roles[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginModel.html":{"url":"classes/LoginModel.html","title":"class - LoginModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'password', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'userName', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'access_token', nullable: true, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'refresh_token', nullable: true, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:111\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailerService.html":{"url":"injectables/MailerService.html","title":"injectable - MailerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mail-server.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/mail-server.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(to: string, subject: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mail-server.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/utils/mail-server.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\n@Injectable()\nexport class MailerService {\n  private transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: process.env['ADMIN_EMAIL'],\n        pass: process.env['ADMIN_EMAIL_PASSWORD'],\n      },\n    });\n  }\n  async sendMail(to: string, subject: string, text: string) {\n    const mailOptions = {\n      from: process.env['ADMIN_EMAIL'],\n      to,\n      subject,\n      text,\n    };\n    return await this.transporter.sendMail(mailOptions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ManageAvatarUserDto.html":{"url":"classes/ManageAvatarUserDto.html","title":"class - ManageAvatarUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ManageAvatarUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatarImage\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatarImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'avatarImage', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'userId', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:135\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MenuStructureModel.html":{"url":"classes/MenuStructureModel.html","title":"class - MenuStructureModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MenuStructureModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    Optional\n                                isReadOnly\n                            \n                            \n                                    \n                                    Optional\n                                link\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                    Optional\n                                persianName\n                            \n                            \n                                    \n                                    Optional\n                                roles\n                            \n                            \n                                    \n                                    Optional\n                                selfId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'description', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isReadOnly\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'isReadOnly', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'link', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'name', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'parentId', nullable: true, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        persianName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'persianName', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'roles', description: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        selfId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'selfId', nullable: false, description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@ObjectType()\nexport class LoginModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@ObjectType()\nexport class ForgotPasswordModel {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n}\n//#endregion\n\n//#region get menu structure\n\n@ObjectType()\nexport class MenuStructureModel {\n  @Field(() => String, {\n    name: 'id',\n    nullable: true,\n  })\n  id?: string;\n\n  @Field(() => String, {\n    name: 'link',\n    description: Consts.menuLink,\n    nullable: true,\n  })\n  link?: string = '';\n\n  @Field(() => String, {\n    name: 'name',\n    description: Consts.menuName,\n    nullable: true,\n  })\n  name?: string = '';\n\n  @Field(() => String, {\n    name: 'description',\n    description: Consts.menuDescription,\n    nullable: true,\n  })\n  description?: string = '';\n\n  @Field(() => String, {\n    name: 'persianName',\n    description: Consts.menuPersianName,\n    nullable: true,\n  })\n  persianName?: string;\n\n  @Field(() => Int, {\n    name: 'selfId',\n    nullable: false,\n    description: Consts.menuSelfId,\n  })\n  selfId?: number;\n\n  @Field(() => Int, {\n    name: 'parentId',\n    nullable: true,\n    description: Consts.menuParentId,\n  })\n  parentId?: number;\n\n  @Field(() => Boolean, {\n    name: 'isReadOnly',\n    nullable: true,\n  })\n  isReadOnly?: boolean;\n\n  @Field(() => [Roles], {\n    name: 'roles',\n    description: Consts.menuRoles,\n    nullable: true,\n  })\n  roles?: Roles[];\n}\n//#endregion\n\nexport class JwtPayLoad {\n  userName: string;\n  sub: string;\n  roles: Roles[];\n}\n\n@ObjectType()\nexport class LoginResponse {\n  @Field(() => String, {\n    name: 'access_token',\n    nullable: true,\n    description: Consts.accessToken,\n  })\n  access_token: string;\n  @Field(() => String, {\n    name: 'refresh_token',\n    nullable: true,\n    description: Consts.refreshToken,\n  })\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermittedPage.html":{"url":"classes/PermittedPage.html","title":"class - PermittedPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermittedPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/base.ts\n        \n\n\n            \n                Description\n            \n            \n                model whitch permitted pages for Users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                pageId\n                            \n                            \n                                    \n                                    Optional\n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'pageId', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {description: undefined, name: 'user', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'userId', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Users } from '@users/users.model';\nimport { Consts } from '@utils/consts';\n\n/**\n * for using custom enum in graphql we should register it first\n * @param enum\n */\nregisterEnumType(Roles, { name: 'EnumRoles' });\n\n/**\n * output model for some graphql controler\n * @param number\n */\n@ObjectType()\nexport class Counter {\n  @Field(() => Int, {\n    nullable: true,\n    name: 'count',\n    description: Consts.Count,\n  })\n  count: number;\n}\n\n/**\n * output model for pagination in queries\n * @param totalCount:number\n * @param pageSize:number\n * @param pageNumber:number\n */\n@ObjectType()\nexport class BaseQuery {\n  @Field(() => Int, {\n    nullable: false,\n    name: 'totalCount',\n    description: Consts.totalCount,\n  })\n  totalCount: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageSize',\n    description: Consts.pageSize,\n  })\n  pageSize: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageNumber',\n    description: Consts.pageNumber,\n  })\n  pageNumber: number;\n}\n\n/**\n * model whitch permitted pages for Users\n * @param pageId:string\n * @param user:Users\n * @param userId:string\n */\n@ObjectType({ description: Consts.permittedPage })\nexport class PermittedPage {\n  @Field(() => String, {\n    nullable: false,\n    name: 'pageId',\n    description: Consts.pageId,\n  })\n  pageId: string;\n\n  @Field(() => Users, {\n    description: Consts.user,\n    name: 'user',\n    nullable: true,\n  })\n  user?: Users;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n\n/**\n * output model for some graphql controlers\n * @return users[]\n */\n@ObjectType()\nexport class UserOutput extends BaseQuery {\n  @Field(() => [Users], {\n    name: 'items',\n    nullable: true,\n  })\n  items: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaAuthService.html":{"url":"injectables/PrismaAuthService.html","title":"injectable - PrismaAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.prisma.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ForgotPassword\n                            \n                            \n                                    Async\n                                GetPages\n                            \n                            \n                                    Async\n                                GetRoles\n                            \n                            \n                                    Async\n                                IsAuthenticated\n                            \n                            \n                                    Async\n                                Login\n                            \n                            \n                                    Async\n                                Logout\n                            \n                            \n                                    Async\n                                ManageJWTToken\n                            \n                            \n                                    Async\n                                UpdatePageRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.prisma.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ForgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    ForgotPassword(forgotPasswordModel: ForgotPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgotPasswordModel\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetPages\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetPages(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetRoles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:302\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        IsAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    IsAuthenticated(ctx: Context)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                        Context\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(loginModel: LoginModel, ctx: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginModel\n                                            \n                                                            LoginModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ctx\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    Logout(ctx: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ManageJWTToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    ManageJWTToken(existUser: any, ctx: any, refreshToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                existUser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ctx\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        UpdatePageRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdatePageRoles(updatePageRolesModel: UpdatePageRolesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.prisma.service.ts:285\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePageRolesModel\n                                            \n                                                            UpdatePageRolesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { ForgotPasswordDto, UpdatePageRolesDto } from './auth.model.dto';\nimport { LoginModel, JwtPayLoad, ForgotPasswordModel } from './auth.model';\nimport { Context } from 'vm';\nimport { PrismaService } from '@base/services/prisma-client';\nimport {\n  GraphQlNotFoundException,\n  GraphQlBadRequestException,\n  GraphQlUnauthorizedException,\n} from '@base/services/error-handler';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\nimport { DateTime } from '@utils/date-time';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class PrismaAuthService {\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  //#region ------------- Sign In -------------------------\n  async Login(loginModel: LoginModel, ctx: Record) {\n    let existUser = await this.prismaService.user.findUnique({\n      where: { userName: loginModel.userName },\n    });\n    if (!existUser) {\n      throw new GraphQlNotFoundException(\n        Consts.userNotExist,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    if (existUser.wrongPasswordCounter >= 3) {\n      if (DateTime.getDiffTime(new Date(), existUser.lockDownDate) > 3) {\n        let copyOfUser = { ...existUser };\n        delete copyOfUser.id;\n        await this.prismaService.user.update({\n          data: {\n            ...copyOfUser,\n            wrongPasswordCounter: 0,\n            lockDownDate: null,\n          },\n          where: { id: existUser.id },\n        });\n      } else {\n        throw new GraphQlBadRequestException(\n          Consts.LockDownUser,\n          HttpStatus.TOO_MANY_REQUESTS,\n        );\n      }\n    }\n    if (!(await Tools.compareHash(loginModel.password, existUser.password))) {\n      let copyOfUser = { ...existUser };\n      delete copyOfUser.id;\n      await this.prismaService.user.update({\n        data: {\n          ...copyOfUser,\n          wrongPasswordCounter: existUser.wrongPasswordCounter + 1,\n        },\n        where: { id: existUser.id },\n      });\n      if (existUser.wrongPasswordCounter === 2) {\n        await this.prismaService.user.update({\n          data: {\n            ...copyOfUser,\n            lockDownDate: new Date().toISOString(),\n            wrongPasswordCounter: existUser.wrongPasswordCounter + 1,\n          },\n          where: { id: existUser.id },\n        });\n        throw new GraphQlBadRequestException(\n          Consts.LockDownUser,\n          HttpStatus.TOO_MANY_REQUESTS,\n        );\n      }\n      throw new GraphQlBadRequestException(\n        Consts.loginParamsIsNotValid,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return await this.ManageJWTToken(existUser, ctx);\n  }\n  //#endregion\n\n  //#region ------------- Manage Jwt Token ----------------\n  async ManageJWTToken(existUser: any, ctx: any, refreshToken: boolean = true) {\n    let payLoad: JwtPayLoad = {\n      userName: existUser.userName,\n      sub: existUser.id,\n      roles: existUser.roles,\n    };\n    let access_token = await this.jwtService.signAsync(payLoad, {\n      expiresIn: this.configService.get('EXPIRE_TIME'),\n      issuer: this.configService.get('ISSUER'),\n      secret: this.configService.get('JWT_SECRET'),\n      algorithm: 'HS512',\n    });\n    let refresh_token = '';\n    if (refreshToken) {\n      refresh_token = await this.jwtService.signAsync(payLoad, {\n        expiresIn: this.configService.get('EXPIRE_TIME_REFRESH_TOKEN'),\n        issuer: this.configService.get('ISSUER'),\n        secret: this.configService.get('JWT_REFRESHTOKEN_SECRET'),\n        algorithm: 'HS512',\n      });\n    }\n    const { res } = ctx;\n    res.cookie('jwt', access_token, {\n      httpOnly: process.env['HTTP_ONLY'],\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: process.env['SAME_SITE'],\n      maxAge: process.env['MAX_AGE'],\n    });\n    let userAuthInfo = await this.prismaService.auth.findFirst({\n      where: { userId: { equals: existUser.id } },\n    });\n    if (!userAuthInfo) {\n      await this.prismaService.auth.create({\n        data: {\n          userId: existUser.id,\n          token: access_token,\n          dailyloginCounter: 1,\n          totalLoginCounter: 1,\n          loginTime: new Date().toISOString(),\n          isLogin: true,\n          refreshToken: refresh_token,\n        },\n      });\n    } else {\n      await this.prismaService.auth.update({\n        data: {\n          userId: existUser.id,\n          token: access_token,\n          dailyloginCounter: userAuthInfo.dailyloginCounter + 1,\n          totalLoginCounter: userAuthInfo.totalLoginCounter + BigInt(1),\n          loginTime: new Date().toISOString(),\n          isLogin: true,\n          refreshToken: refreshToken\n            ? refresh_token\n            : userAuthInfo.refreshToken,\n        },\n        where: { id: userAuthInfo.id },\n      });\n    }\n    return {\n      access_token: access_token,\n      refresh_token: refresh_token,\n    };\n  }\n  //#endregion\n\n  //#region ------------- Logout --------------------------\n  async Logout(ctx: any) {\n    try {\n      if (\n        ctx.req &&\n        ctx.req.cookies &&\n        ctx.req.cookies['jwt'] &&\n        ctx.req.cookies['jwt'].length\n      ) {\n        let userId = this.jwtService.decode(ctx.req.cookies['jwt']).sub;\n        let existUserAuth = await this.prismaService.auth.findFirst({\n          where: { userId: { equals: userId } },\n        });\n        await this.prismaService.auth.update({\n          data: {\n            isLogin: false,\n            refreshToken: '',\n            token: '',\n            logoutTime: new Date().toISOString(),\n          },\n          where: {\n            id: existUserAuth.id,\n          },\n        });\n        ctx.res.clearCookie('jwt');\n      }\n    } catch (error) {}\n  }\n  //#endregion\n\n  //#region ------------- IsAuthenticated ------------------\n  async IsAuthenticated(ctx: Context) {\n    let existUserAuth = await Tools.GetUserInfoFromContext(\n      ctx,\n      this.jwtService,\n      this.prismaService,\n    );\n    try {\n      if (existUserAuth) {\n        let verify = await this.jwtService.verifyAsync(existUserAuth.token, {\n          secret: this.configService.get('JWT_SECRET'),\n        });\n        if (!verify) return false;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      try {\n        let verifyRefreshToken = await this.jwtService.verifyAsync(\n          existUserAuth.refreshToken,\n          {\n            secret: this.configService.get('JWT_REFRESHTOKEN_SECRET'),\n          },\n        );\n        if (verifyRefreshToken) {\n          let existUser = await this.prismaService.user.findUnique({\n            where: { id: existUserAuth.userId },\n          });\n          await this.ManageJWTToken(existUser, ctx, false);\n        } else {\n          return false;\n        }\n      } catch (error) {\n        throw new GraphQlUnauthorizedException(\n          Consts.unAuthorized,\n          HttpStatus.UNAUTHORIZED,\n        );\n      }\n    }\n    return true;\n  }\n  //#endregion\n\n  //#region ------------- ForgotPassword ------------------\n  async ForgotPassword(\n    forgotPasswordModel: ForgotPasswordDto,\n  ): Promise {\n    try {\n      let existUser = await this.prismaService.user.findFirst({\n        where: {\n          OR: [\n            { userName: { equals: forgotPasswordModel.userName } },\n            { email: { equals: forgotPasswordModel.userName } },\n            { phone: { equals: forgotPasswordModel.userName } },\n          ],\n        },\n      });\n      if (!existUser) {\n        throw new GraphQlBadRequestException(\n          Consts.wrongIncomingParameters,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      let pass = await Tools.hash(forgotPasswordModel.password);\n      let copyOfuser = { ...existUser };\n      delete copyOfuser.id;\n      await this.prismaService.user.update({\n        data: {\n          ...copyOfuser,\n          password: pass,\n          passwordChangeLastDate: new Date().toISOString(),\n        },\n        where: { id: existUser.id },\n      });\n      return { userName: existUser.userName };\n    } catch (error) {}\n  }\n  //#endregion\n\n  //#region-------------- Get Menu ------------------------\n  async GetPages(context: any) {\n    let result = await this.prismaService.page.findMany();\n    const { req } = context;\n    if (req && !req.cookies['jwt']) {\n      throw new UnauthorizedException(Consts.unAuthorized);\n    }\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    result = result.filter((page) =>\n      userRoles.roles.some((b) => page.roles.some((v) => v === b)),\n    );\n    return result;\n  }\n  //#endregion\n\n  //#region-------------- UpdatePageRoles -----------------\n  async UpdatePageRoles(updatePageRolesModel: UpdatePageRolesDto) {\n    try {\n      return await this.prismaService.page.update({\n        data: { roles: updatePageRolesModel.roles },\n        where: { id: updatePageRolesModel.id },\n      });\n    } catch (error) {\n      throw new GraphQlBadRequestException(\n        Consts.badGatewayMessage,\n        HttpStatus.BAD_REQUEST,\n        error,\n      );\n    }\n  }\n  //#endregion\n\n  //#region ------------- Get Roles -----------------------\n  async GetRoles() {\n    return Object.keys(Roles).filter((role) => role !== Roles.Admin);\n  }\n\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaQuery.html":{"url":"classes/PrismaQuery.html","title":"class - PrismaQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/PrismaQuery.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                cursor\n                            \n                            \n                                    \n                                distinct\n                            \n                            \n                                    \n                                orderBy\n                            \n                            \n                                    \n                                select\n                            \n                            \n                                    \n                                skip\n                            \n                            \n                                    \n                                take\n                            \n                            \n                                    \n                                where\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cursor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserWhereUniqueInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserWhereUniqueInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        distinct\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserScalarFieldEnum, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserOrderByWithRelationInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserOrderByWithRelationInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserSelect\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserSelect, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        where\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserWhereInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserWhereInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { DefaultArgs } from '@prisma/client/runtime/library';\nimport { GraphQLScalarType } from 'graphql';\n\n@InputType()\nexport class PrismaQuery {\n  @Field((type) => Int, { nullable: true })\n  take: number;\n  @Field((type) => Int, { nullable: true })\n  skip: number;\n  @Field((type) => PrismaUserWhereUniqueInput, { nullable: true })\n  cursor: Prisma.UserWhereUniqueInput;\n  @Field((type) => PrismaUserScalarFieldEnum, { nullable: true })\n  distinct: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];\n  @Field((type) => PrismaUserOrderByWithRelationInput, { nullable: true })\n  orderBy: Prisma.UserOrderByWithRelationInput;\n  @Field((type) => PrismaUserSelect, { nullable: true })\n  select: Prisma.UserSelect;\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\n@InputType()\nexport class PrismaSingleQuery {\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\nexport const PrismaUserWhereUniqueInput = new GraphQLScalarType({\n  name: 'cursor',\n  serialize: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n  parseValue: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n});\n\nexport const PrismaUserScalarFieldEnum = new GraphQLScalarType({\n  name: 'distinct',\n  serialize: (value: Prisma.UserScalarFieldEnum) => value,\n  parseValue: (value: Prisma.UserScalarFieldEnum) => value,\n});\n\nexport const PrismaUserOrderByWithRelationInput = new GraphQLScalarType({\n  name: 'orderBy',\n  serialize: (value: Prisma.UserOrderByWithRelationInput) => value,\n  parseValue: (value: Prisma.UserOrderByWithRelationInput) => value,\n});\n\nexport const PrismaUserSelect = new GraphQLScalarType,\n  Prisma.UserSelect\n>({\n  name: 'select',\n  serialize: (value: Prisma.UserSelect) => value,\n  parseValue: (value: Prisma.UserSelect) => value,\n});\n\nexport const PrismaUserWhereInput = new GraphQLScalarType({\n  name: 'where',\n  serialize: (value: Prisma.UserWhereInput) => value,\n  parseValue: (value: Prisma.UserWhereInput) => value,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/services/prisma-client.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bases/services/prisma-client.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaSingleQuery.html":{"url":"classes/PrismaSingleQuery.html","title":"class - PrismaSingleQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaSingleQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/PrismaQuery.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                where\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        where\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserWhereInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => PrismaUserWhereInput, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/PrismaQuery.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { Prisma } from '@prisma/client';\nimport { DefaultArgs } from '@prisma/client/runtime/library';\nimport { GraphQLScalarType } from 'graphql';\n\n@InputType()\nexport class PrismaQuery {\n  @Field((type) => Int, { nullable: true })\n  take: number;\n  @Field((type) => Int, { nullable: true })\n  skip: number;\n  @Field((type) => PrismaUserWhereUniqueInput, { nullable: true })\n  cursor: Prisma.UserWhereUniqueInput;\n  @Field((type) => PrismaUserScalarFieldEnum, { nullable: true })\n  distinct: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];\n  @Field((type) => PrismaUserOrderByWithRelationInput, { nullable: true })\n  orderBy: Prisma.UserOrderByWithRelationInput;\n  @Field((type) => PrismaUserSelect, { nullable: true })\n  select: Prisma.UserSelect;\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\n@InputType()\nexport class PrismaSingleQuery {\n  @Field((type) => PrismaUserWhereInput, { nullable: true })\n  where: Prisma.UserWhereInput;\n}\n\nexport const PrismaUserWhereUniqueInput = new GraphQLScalarType({\n  name: 'cursor',\n  serialize: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n  parseValue: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n});\n\nexport const PrismaUserScalarFieldEnum = new GraphQLScalarType({\n  name: 'distinct',\n  serialize: (value: Prisma.UserScalarFieldEnum) => value,\n  parseValue: (value: Prisma.UserScalarFieldEnum) => value,\n});\n\nexport const PrismaUserOrderByWithRelationInput = new GraphQLScalarType({\n  name: 'orderBy',\n  serialize: (value: Prisma.UserOrderByWithRelationInput) => value,\n  parseValue: (value: Prisma.UserOrderByWithRelationInput) => value,\n});\n\nexport const PrismaUserSelect = new GraphQLScalarType,\n  Prisma.UserSelect\n>({\n  name: 'select',\n  serialize: (value: Prisma.UserSelect) => value,\n  parseValue: (value: Prisma.UserSelect) => value,\n});\n\nexport const PrismaUserWhereInput = new GraphQLScalarType({\n  name: 'where',\n  serialize: (value: Prisma.UserWhereInput) => value,\n  parseValue: (value: Prisma.UserWhereInput) => value,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaUsersService.html":{"url":"injectables/PrismaUsersService.html","title":"injectable - PrismaUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.prisma.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ChangeActivationUsers\n                            \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                GetAllUsersByQuery\n                            \n                            \n                                    Async\n                                GetUserByQuery\n                            \n                            \n                                    Async\n                                GetUserInfo\n                            \n                            \n                                    Async\n                                HardDeleteUsers\n                            \n                            \n                                    Async\n                                HasUserActionPermission\n                            \n                            \n                                    Async\n                                ManageUserAvatar\n                            \n                            \n                                    Async\n                                RevertDeletedUsers\n                            \n                            \n                                    Async\n                                SoftDeleteUsers\n                            \n                            \n                                    Async\n                                UpdateUser\n                            \n                            \n                                    Async\n                                UpdateUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.prisma.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ChangeActivationUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    ChangeActivationUsers(activationUsers: ToggleActiveUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                activationUsers\n                                            \n                                                            ToggleActiveUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(user: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetAllUsersByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetAllUsersByQuery(queries: PrismaQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            PrismaQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetUserByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserByQuery(query: PrismaSingleQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PrismaSingleQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GetUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserInfo(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        HardDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    HardDeleteUsers(deleteUsers: DeleteUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deleteUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        HasUserActionPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    HasUserActionPermission(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ManageUserAvatar\n                        \n                    \n                \n            \n            \n                \n                        \n                    ManageUserAvatar(fileUpload: FileUpload, context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileUpload\n                                            \n                                                        FileUpload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        RevertDeletedUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    RevertDeletedUsers(deleteUsers: DeleteUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deleteUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        SoftDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    SoftDeleteUsers(deleteUsers: DeleteUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deleteUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        UpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUser(user: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        UpdateUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUserRoles(updateModel: UpdateRolesToUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.prisma.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateModel\n                                            \n                                                            UpdateRolesToUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Roles, User } from '@prisma/client';\nimport {\n  CreateUserDto,\n  UpdateUserDto,\n  DeleteUserDto,\n  ToggleActiveUserDto,\n  UpdateRolesToUserDto,\n} from './users.model.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport path, { join } from 'path';\nimport { createWriteStream, mkdirSync } from 'fs';\nimport { FileUpload } from 'graphql-upload-ts';\nimport { HttpStatus, Injectable, NotFoundException } from '@nestjs/common';\nimport { UserOutput } from './users.model';\nimport { PrismaQuery, PrismaSingleQuery } from '@base/PrismaQuery';\nimport { GraphQlBadRequestException } from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class PrismaUsersService {\n  constructor(\n    private prismaService: PrismaService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  //#region ------------- GetAllUsersByQuery --------------\n  async GetAllUsersByQuery(queries: PrismaQuery): Promise {\n    return {\n      items: await this.prismaService.user.findMany(queries),\n      pageNumber: queries.skip,\n      pageSize: queries.take,\n      totalCount: await this.prismaService.user.count(),\n    };\n  }\n  //#endregion\n\n  //#region ------------- GetUserByQuery ------------------\n  async GetUserByQuery(query: PrismaSingleQuery): Promise {\n    return this.prismaService.user.findFirst(query);\n  }\n  //#endregion\n\n  //#region ------------- CreateUser ----------------------\n  async CreateUser(user: CreateUserDto): Promise {\n    let existUser = await this.prismaService.user.findFirst({\n      where: {\n        OR: [\n          { userName: user.userName },\n          { email: user.email },\n          { phone: user.phone },\n          { nationalCode: user.nationalCode },\n        ],\n      },\n    });\n    if (existUser) {\n      throw new GraphQlBadRequestException(\n        Consts.Duplicated,\n        HttpStatus.CONFLICT,\n      );\n    } else {\n      user.password = await Tools.hash(user.password);\n      return this.prismaService.user.create({\n        data: { ...user, createDate: new Date().toISOString() },\n      });\n    }\n  }\n  //#endregion\n\n  //#region ------------- UpdateUser ----------------------\n  async UpdateUser(user: UpdateUserDto): Promise {\n    user.updateDate = new Date().toISOString();\n    let userResult: UpdateUserDto = JSON.parse(JSON.stringify(user));\n    return await this.prismaService.user.update({\n      data: userResult,\n      where: { id: user.id },\n    });\n  }\n  //#endregion\n\n  //#region ------------- SoftDeleteUsers -----------------\n  async SoftDeleteUsers(deleteUsers: DeleteUserDto) {\n    let FindAdminFromIds = await this.prismaService.user.findMany({\n      where: { AND: { id: { in: deleteUsers.ids }, roles: { has: 'Admin' } } },\n    });\n    if (FindAdminFromIds.length) {\n      throw new GraphQlBadRequestException(\n        Consts.youCanNotRemoveAdminUsers,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return this.prismaService.user.updateMany({\n      data: { isDeleted: true, deleteDate: new Date().toISOString() },\n      where: { id: { in: deleteUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- RevertDeletedUsers --------------\n  async RevertDeletedUsers(deleteUsers: DeleteUserDto) {\n    return this.prismaService.user.updateMany({\n      data: { isDeleted: false, revertDate: new Date().toISOString() },\n      where: { id: { in: deleteUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- HardDeleteUsers -----------------\n  async HardDeleteUsers(deleteUsers: DeleteUserDto) {\n    return this.prismaService.user.deleteMany({\n      where: { id: { in: deleteUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- ChangeActivationUsers -----------\n  async ChangeActivationUsers(activationUsers: ToggleActiveUserDto) {\n    return this.prismaService.user.updateMany({\n      data: {\n        isActive: activationUsers.state,\n        updateDate: new Date().toISOString(),\n      },\n      where: { id: { in: activationUsers.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- UpdateUserRoles -----------------\n  async UpdateUserRoles(updateModel: UpdateRolesToUserDto) {\n    return this.prismaService.user.updateMany({\n      data: {\n        roles: updateModel.Roles,\n        updateDate: new Date().toISOString(),\n      },\n      where: { id: { in: updateModel.ids } },\n    });\n  }\n  //#endregion\n\n  //#region ------------- UserAvatarManager ---------------\n  async ManageUserAvatar(fileUpload: FileUpload, context: any) {\n    try {\n      if (context.req && context.req.cookies && context.req.cookies['jwt']) {\n        let userId = this.jwtService.decode(context.req.cookies['jwt']).sub;\n        if (!userId) {\n          throw new NotFoundException(Consts.userNotExist);\n        }\n        let localPath = path.dirname(join(__dirname, '/images/users/avatars'));\n        if (!localPath) {\n          mkdirSync(join(__dirname, '/images/users/avatars'), {\n            recursive: true,\n          });\n        }\n        localPath.concat(`/${userId}`);\n        fileUpload.createReadStream().pipe(createWriteStream(localPath));\n        return await this.prismaService.user.update({\n          data: {\n            avatarPath: localPath,\n          },\n          where: { id: userId },\n        });\n      }\n    } catch (error) {}\n  }\n  //#endregion\n\n  //#region ------------- User Info -----------------------\n  async GetUserInfo(context: any) {\n    let userAuth = await Tools.GetUserInfoFromContext(\n      context,\n      this.jwtService,\n      this.prismaService,\n    );\n\n    return await this.prismaService.user.findUnique({\n      where: { id: userAuth.userId },\n    });\n  }\n  //#endregion\n\n  //#region ------------- has Permission -----------------------\n  async HasUserActionPermission(context: any) {\n    const headerInfo = this.jwtService.decode(\n      context.req.cookies['jwt'].trim(),\n    );\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    return Tools.matchs(userRoles.roles, [\n      Roles.Admin,\n      Roles.User_Management,\n      Roles.User_Global,\n      Roles.Demo,\n    ]);\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/jwt.strategy.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, jwtService: JwtService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:108\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt.strategy.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayLoad } from './auth.model';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Context } from 'vm';\nimport { Roles } from '@prisma/client';\nimport { PrismaAuthService } from './auth.prisma.service';\nimport {\n  GraphQlForbiddenException,\n  GraphQlUnauthorizedException,\n} from '@base/services/error-handler';\nimport { PrismaService } from '@base/services/prisma-client';\nimport { Consts } from '@utils/consts';\nimport { Tools } from '@utils/tools';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: JwtPayLoad) {\n    return { userId: payload.sub, username: payload.userName };\n  }\n}\n\n@Injectable()\nexport class JWTRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (context: Context) => {\n          const { req } = context;\n          let jwt = null;\n          if (req && req.cookies) jwt = req.cookies['jwt'];\n          return jwt;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESHTOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  validate(context: Context, payload: any) {\n    const { req } = context;\n    if (req && req.cookies['jwt']) {\n      const refreshToken = req.cookies['jwt'].trim();\n      return { ...payload, refreshToken };\n    } else {\n      return null;\n    }\n  }\n}\n\n@Injectable()\nexport class GqlAuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    if (req && !req.cookies['jwt']) {\n      throw new GraphQlUnauthorizedException(\n        Consts.unAuthorized,\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    try {\n      let isAuth = await this.jwtService.verifyAsync(req.cookies['jwt'], {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (isAuth) return true;\n    } catch (error) {\n      return new PrismaAuthService(\n        this.prismaService,\n        this.configService,\n        this.jwtService,\n      ).IsAuthenticated(ctx.getContext());\n    }\n    return true;\n  }\n}\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private prismaService: PrismaService,\n  ) {}\n  async canActivate(context: ExecutionContext) {\n    const decoratorRoles = this.reflector.get(HasRoles, context.getHandler());\n    const decoratorNotRoles = this.reflector.get(\n      HasNotRoles,\n      context.getHandler(),\n    );\n    if (!decoratorRoles && !decoratorNotRoles) {\n      return true;\n    }\n    let ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    const headerInfo = this.jwtService.decode(req.cookies['jwt'].trim());\n    let userRoles = await this.prismaService.user.findFirst({\n      where: { id: headerInfo.sub },\n    });\n    if (\n      decoratorNotRoles\n        ? !Tools.matchs(\n            userRoles.roles,\n            Object.values(Roles).filter(\n              (x) => !decoratorNotRoles.some((y) => y === x),\n            ),\n          )\n        : !Tools.matchs(userRoles.roles, decoratorRoles)\n    ) {\n      throw new GraphQlForbiddenException(\n        Consts.ForbiddenMessage,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return decoratorNotRoles\n      ? Tools.matchs(\n          userRoles.roles,\n          Object.values(Roles).filter(\n            (x) => !decoratorNotRoles.some((y) => y === x),\n          ),\n        )\n      : Tools.matchs(userRoles.roles, decoratorRoles);\n  }\n}\nexport const HasRoles = Reflector.createDecorator();\nexport const HasNotRoles = Reflector.createDecorator();\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/tasks.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreatePagesForInitialDeployment\n                            \n                            \n                                    \n                                    Async\n                                SendLimitationSpaceDiskFromAdminToManagersAndUsers\n                            \n                            \n                                    Async\n                                SetAdminForInitialDeployment\n                            \n                            \n                                    \n                                    Async\n                                SetAsDefaultAuthTable\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, mailService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/tasks.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CreatePagesForInitialDeployment\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreatePagesForInitialDeployment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/tasks.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        SendLimitationSpaceDiskFromAdminToManagersAndUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    SendLimitationSpaceDiskFromAdminToManagersAndUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_1AM)\n                \n            \n\n                    \n                        \n                            Defined in src/utils/tasks.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        SetAdminForInitialDeployment\n                        \n                    \n                \n            \n            \n                \n                        \n                    SetAdminForInitialDeployment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/tasks.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        SetAsDefaultAuthTable\n                        \n                    \n                \n            \n            \n                \n                        \n                    SetAsDefaultAuthTable()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_1AM)\n                \n            \n\n                    \n                        \n                            Defined in src/utils/tasks.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaService } from '@base/services/prisma-client';\nimport { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { Consts } from './consts';\nimport { MailerService } from './mail-server';\nimport { Tools } from './tools';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    private prismaService: PrismaService,\n    private mailService: MailerService,\n  ) {\n    this.SetAdminForInitialDeployment();\n    this.CreatePagesForInitialDeployment();\n  }\n\n  //======================= Normal Tasks ==========================\n  //#region  Initial Deployment\n  async CreatePagesForInitialDeployment() {\n    let existpages = await this.prismaService.page.count();\n    if (existpages === 0) {\n      this.prismaService.page\n        .createMany({\n          data: [\n            {\n              name: 'Home',\n              persianName: 'خانه',\n              parentId: null,\n              isReadOnly: false,\n              link: '/Shell',\n            },\n            {\n              name: 'UsersManagement',\n              persianName: 'مدیریت کاربران',\n              parentId: null,\n              isReadOnly: false,\n              link: '/Shell/UsersManagement',\n              children: [\n                {\n                  name: 'UsersList',\n                  persianName: 'لیست کاربران',\n                  isReadOnly: false,\n                  description: 'لیست کاملی از کاربران را در اختیار شما میگذارد',\n                  link: '/Shell/UsersManagement/UsersList',\n                },\n                {\n                  name: 'UserClassification',\n                  persianName: 'مجوز دسترسی صفحات',\n                  isReadOnly: false,\n                  description:\n                    'مجوز دسترسی به صفحات موجود در نرم افزار را میتوانید در این قسمت مدیریت نمایید',\n                  link: '/Shell/UsersManagement/UserClassification',\n                },\n              ],\n            },\n          ],\n        })\n        .then();\n    }\n  }\n  async SetAdminForInitialDeployment() {\n    let existData = await this.prismaService.user.count();\n    if (existData === 0) {\n      this.prismaService.user\n        .create({\n          data: {\n            nationalCode: process.env['ADMIN_NATIONALCODE'],\n            email: process.env['ADMIN_EMAIL'],\n            phone: process.env['ADMIN_PHONE'],\n            password: await Tools.hash(process.env['ADMIN_PASSWORD_SYSTEM']),\n            userName: process.env['ADMIN_USERNAME'],\n            createDate: new Date().toISOString(),\n            roles: ['Admin'],\n            isActive: true,\n            isDeleted: false,\n          },\n        })\n        .then();\n    }\n  }\n  //#endregion\n\n  //========================= Scheduled Tasks ==================================\n  //#region ------------- Set Auth ExtraInfo ToDefault Daily\n  @Cron(CronExpression.EVERY_DAY_AT_1AM)\n  async SetAsDefaultAuthTable() {\n    this.prismaService.auth\n      .updateMany({\n        data: {\n          dailyloginCounter: 0,\n          isLogin: false,\n          logoutTime: new Date().toISOString(),\n          refreshToken: '',\n          token: '',\n        },\n      })\n      .then();\n  }\n  //#endregion\n  //#region ------------- send email from admin to managers and users for inform about free space\n  @Cron(CronExpression.EVERY_DAY_AT_1AM)\n  async SendLimitationSpaceDiskFromAdminToManagersAndUsers() {\n    let { total, free } = await Tools.getDriveSize();\n    if (free  {\n          await this.mailService.sendMail(\n            item.email,\n            Consts.freeDiskSpace,\n            Consts.limitationDiskSpaceWarning,\n          );\n        });\n    }\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToggleActiveUserDto.html":{"url":"classes/ToggleActiveUserDto.html","title":"class - ToggleActiveUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToggleActiveUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                ids\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'ids', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'state', nullable: false, defaultValue: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:96\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePageRolesDto.html":{"url":"classes/UpdatePageRolesDto.html","title":"class - UpdatePageRolesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePageRolesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'roles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region Login\n@InputType()\nexport class LoginDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region forgot password\n\n@InputType()\nexport class ForgotPasswordDto {\n  @Field(() => String, { name: 'userName', description: Consts.yourUserName })\n  userName: string = '';\n  @Field(() => String, { name: 'password', description: Consts.yourPassword })\n  password: string = '';\n}\n//#endregion\n\n//#region manage pages in menu\n@InputType()\nexport class UpdatePageRolesDto {\n  @Field(() => String, { name: 'id' })\n  id: string = '';\n  @Field(() => [Roles], { name: 'roles' })\n  roles: Roles[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesToUserDto.html":{"url":"classes/UpdateRolesToUserDto.html","title":"class - UpdateRolesToUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesToUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                ids\n                            \n                            \n                                    \n                                Roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'ids', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'Roles', description: undefined, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:116\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'id', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'updateDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\nimport { Field, InputType, OmitType, PartialType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\n\n//#region  ------------------  Create User -------------------------------\n@InputType()\nexport class CreateUserDto {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n}\n//#endregion\n\n//#region -------------------- Update User --------------------------------\n@InputType()\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['password', 'userName']),\n) {\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate: string;\n}\n//#endregion\n\n//#region ------------------------ Delete Users --------------------------\n@InputType()\nexport class DeleteUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n}\n//#endregion\n\n//#region ------------------------- Toggle  Active Users --------------------------\n@InputType()\nexport class ToggleActiveUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n  @Field(() => Boolean, { name: 'state', nullable: false, defaultValue: false })\n  state: boolean;\n}\n//#endregion\n\n//#region ---------------------------- Update Roles To User ---------------------------\n@InputType()\nexport class UpdateRolesToUserDto {\n  @Field(() => [String], {\n    nullable: false,\n    name: 'ids',\n    description: Consts.ids,\n  })\n  ids: string[];\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'Roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  Roles: Roles[];\n}\n//#endregion\n\n//#region ---------------------------- manage User Avatar ---------------------------\n@InputType()\nexport class ManageAvatarUserDto {\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatarImage',\n    description: Consts.avatarImage,\n  })\n  avatarImage?: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUsersResolver \n\nUsersResolver \n\n\n\nUserModule\n\nUserModule\n\nUsersResolver  -->\n\nUserModule->UsersResolver \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nPrismaUsersService\n\nPrismaUsersService\n\nUserModule -->\n\nPrismaUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            PrismaUsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersResolver\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaUsersService } from './users.prisma.service';\nimport { UsersResolver } from './users.graphql.controller';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from '@base/services/prisma-client';\n\n@Module({\n  imports: [],\n  exports: [UsersResolver],\n  providers: [\n    JwtService,\n    PrismaService,\n    ConfigService,\n    PrismaUsersService,\n    UsersResolver,\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOutput.html":{"url":"classes/UserOutput.html","title":"class - UserOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bases/base.ts\n        \n\n\n            \n                Description\n            \n            \n                output model for some graphql controlers\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                items\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {name: 'items', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bases/base.ts:96\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Users } from '@users/users.model';\nimport { Consts } from '@utils/consts';\n\n/**\n * for using custom enum in graphql we should register it first\n * @param enum\n */\nregisterEnumType(Roles, { name: 'EnumRoles' });\n\n/**\n * output model for some graphql controler\n * @param number\n */\n@ObjectType()\nexport class Counter {\n  @Field(() => Int, {\n    nullable: true,\n    name: 'count',\n    description: Consts.Count,\n  })\n  count: number;\n}\n\n/**\n * output model for pagination in queries\n * @param totalCount:number\n * @param pageSize:number\n * @param pageNumber:number\n */\n@ObjectType()\nexport class BaseQuery {\n  @Field(() => Int, {\n    nullable: false,\n    name: 'totalCount',\n    description: Consts.totalCount,\n  })\n  totalCount: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageSize',\n    description: Consts.pageSize,\n  })\n  pageSize: number;\n\n  @Field(() => Int, {\n    nullable: false,\n    name: 'pageNumber',\n    description: Consts.pageNumber,\n  })\n  pageNumber: number;\n}\n\n/**\n * model whitch permitted pages for Users\n * @param pageId:string\n * @param user:Users\n * @param userId:string\n */\n@ObjectType({ description: Consts.permittedPage })\nexport class PermittedPage {\n  @Field(() => String, {\n    nullable: false,\n    name: 'pageId',\n    description: Consts.pageId,\n  })\n  pageId: string;\n\n  @Field(() => Users, {\n    description: Consts.user,\n    name: 'user',\n    nullable: true,\n  })\n  user?: Users;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'userId',\n    description: Consts.userId,\n  })\n  userId: string;\n}\n\n/**\n * output model for some graphql controlers\n * @return users[]\n */\n@ObjectType()\nexport class UserOutput extends BaseQuery {\n  @Field(() => [Users], {\n    name: 'items',\n    nullable: true,\n  })\n  items: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                    Optional\n                                deleteDate\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                nationalCode\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                permittedPage\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                revertDate\n                            \n                            \n                                    \n                                    Optional\n                                roles\n                            \n                            \n                                    \n                                    Optional\n                                updateDate\n                            \n                            \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'avatar', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'createDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deleteDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'deleteDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'email', description: undefined})@IsEmail()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'id', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'isActive', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'isDeleted', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nationalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'nationalCode', description: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'password', description: undefined})@IsStrongPassword({minLength: 2}, {message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        permittedPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermittedPage[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'roles', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'phone', description: undefined})@IsPhoneNumber('IR', {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revertDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'revertDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false, name: 'roles', description: undefined, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true, name: 'updateDate', description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: false, name: 'userName', description: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.model.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PermittedPage } from '@base/base';\nimport { ObjectType, Field } from '@nestjs/graphql';\nimport { Roles } from '@prisma/client';\nimport { Consts } from '@utils/consts';\nimport {\n  IsNotEmpty,\n  IsEmail,\n  IsPhoneNumber,\n  IsStrongPassword,\n} from 'class-validator';\n\n//#region --------------------- Users ---------------------\n@ObjectType()\nexport class Users {\n  @Field((type) => String, {\n    nullable: false,\n    name: 'nationalCode',\n    description: Consts.yourNationalCode,\n  })\n  @IsNotEmpty()\n  nationalCode: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'email',\n    description: Consts.yourRealEmail,\n  })\n  @IsEmail()\n  @IsNotEmpty({ message: Consts.emailRequiredMessage })\n  email: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'phone',\n    description: Consts.yourRealPhone,\n  })\n  @IsPhoneNumber('IR', { message: Consts.phoneRequiredMessage })\n  phone: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'userName',\n    description: Consts.yourUserName,\n  })\n  @IsNotEmpty({ message: Consts.usernameRequiredMessage })\n  userName: string;\n\n  @Field((type) => String, {\n    nullable: false,\n    name: 'password',\n    description: Consts.yourPassword,\n  })\n  @IsStrongPassword({ minLength: 2 }, { message: Consts.minLengthOfPassword })\n  @IsNotEmpty({ message: Consts.passwordRequiredMessage })\n  password: string;\n\n  @Field(() => String, {\n    nullable: false,\n    name: 'id',\n    description: Consts.yourUserIdentifier,\n  })\n  @IsNotEmpty({ message: Consts.UserIdIsRequired })\n  id: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'createDate',\n    description: Consts.createDate,\n  })\n  createDate: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'updateDate',\n    description: Consts.updateDate,\n  })\n  updateDate?: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'deleteDate',\n    description: Consts.deleteDate,\n  })\n  deleteDate?: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'revertDate',\n    description: Consts.revertDate,\n  })\n  revertDate: string;\n\n  @Field(() => String, {\n    nullable: true,\n    name: 'avatar',\n    description: Consts.avatarPath,\n  })\n  avatar?: string;\n\n  @Field(() => Boolean, {\n    nullable: true,\n    name: 'isActive',\n    description: Consts.isActive,\n  })\n  isActive: boolean;\n\n  @Field(() => Boolean, {\n    nullable: true,\n    name: 'isDeleted',\n    description: Consts.isDeleted,\n  })\n  isDeleted: boolean;\n\n  @Field(() => [Roles], {\n    nullable: false,\n    name: 'roles',\n    description: Consts.Roles,\n    defaultValue: [Roles.Demo_Viewer],\n  })\n  roles?: Roles[];\n\n  @Field(() => [PermittedPage], {\n    nullable: false,\n    name: 'roles',\n    description: Consts.permittedPage,\n  })\n  permittedPage?: PermittedPage[];\n}\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersResolver.html":{"url":"classes/UsersResolver.html","title":"class - UsersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.graphql.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                ChangeActivation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                CreateUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                GetUserByQuery\n                            \n                            \n                                    \n                                    Async\n                                GetUserInfo\n                            \n                            \n                                    \n                                    \n                                    Async\n                                GetUsersByQuery\n                            \n                            \n                                    \n                                    \n                                    Async\n                                HardDeleteUsers\n                            \n                            \n                                    \n                                    Async\n                                HasUserActionPermission\n                            \n                            \n                                    \n                                    \n                                    Async\n                                ManageUserAvatar\n                            \n                            \n                                    \n                                    \n                                    Async\n                                RevertDeletedUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                SoftDeleteUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                UpdateUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                UpdateUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaRequestService: PrismaUsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.graphql.controller.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaRequestService\n                                                  \n                                                        \n                                                                        PrismaUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        ChangeActivation\n                        \n                    \n                \n            \n            \n                \n                        \n                    ChangeActivation(activationUsersIds: ToggleActiveUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'ChangeActivation'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                activationUsersIds\n                                            \n                                                            ToggleActiveUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(userModel: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'CreateUser'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userModel\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        GetUserByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserByQuery(query: PrismaSingleQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Query(undefined, {name: 'getUserByQuery'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PrismaSingleQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        GetUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUserInfo(context: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getUserInfo'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:202\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        GetUsersByQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUsersByQuery(query: PrismaQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Query(undefined, {name: 'GetAllUsersWithQuery'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PrismaQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        HardDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    HardDeleteUsers(deletedUsers: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'DeleteUserPermanently'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deletedUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        HasUserActionPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    HasUserActionPermission(context: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'hasPermission'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        ManageUserAvatar\n                        \n                    \n                \n            \n            \n                \n                        \n                    ManageUserAvatar(context: any, fileUpload: FileUpload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'manageUserAvatar'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileUpload\n                                            \n                                                        FileUpload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        RevertDeletedUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    RevertDeletedUsers(deletedUsers: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'RevertUsers'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deletedUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        SoftDeleteUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    SoftDeleteUsers(deletedUsers: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'DeleteUsers'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deletedUsers\n                                            \n                                                            DeleteUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        UpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUser(userModel: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'UpdateUser'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userModel\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        UpdateUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    UpdateUserRoles(activationUsers: UpdateRolesToUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HasRoles(['undefined', 'undefined', 'undefined', 'undefined'])@Mutation(undefined, {name: 'UpdateUserRoles'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.graphql.controller.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                activationUsers\n                                            \n                                                            UpdateRolesToUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport {\n  CreateUserDto,\n  DeleteUserDto,\n  ToggleActiveUserDto,\n  UpdateRolesToUserDto,\n  UpdateUserDto,\n} from './users.model.dto';\nimport { PrismaUsersService } from './users.prisma.service';\nimport { UseGuards } from '@nestjs/common';\nimport { UserOutput, Users } from './users.model';\nimport { FileUpload } from 'graphql-upload-ts';\nimport { Roles } from '@prisma/client';\nimport { Counter } from '@base/base';\nimport { PrismaQuery, PrismaSingleQuery } from '@base/PrismaQuery';\nimport { GqlAuthGuard, HasRoles } from '@auth/jwt.strategy';\n\n@UseGuards(GqlAuthGuard)\n@Resolver(() => [Users])\nexport class UsersResolver {\n  constructor(private prismaRequestService: PrismaUsersService) {}\n\n  //#region ------------- GetAllUsersByQuery --------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Demo_Viewer,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Inspector_Viewer,\n    Roles.Security,\n    Roles.Security_Viewer,\n  ])\n  @Query(() => UserOutput, { name: 'GetAllUsersWithQuery' })\n  async GetUsersByQuery(\n    @Args('queries', { nullable: true, type: () => PrismaQuery })\n    query: PrismaQuery,\n  ): Promise {\n    return await this.prismaRequestService.GetAllUsersByQuery(query);\n  }\n  //#endregion\n\n  //#region ------------- GetUserByQuery ------------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Demo_Viewer,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Inspector_Viewer,\n    Roles.Security,\n    Roles.Security_Viewer,\n  ])\n  @Query(() => Users, { name: 'getUserByQuery' })\n  async GetUserByQuery(\n    @Args('query', { nullable: true, type: () => PrismaSingleQuery })\n    query: PrismaSingleQuery,\n  ): Promise {\n    return await this.prismaRequestService.GetUserByQuery(query);\n  }\n  //#endregion\n\n  //#region ------------- CreateUser ----------------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Security,\n  ])\n  @Mutation(() => Users, { name: 'CreateUser' })\n  async CreateUser(\n    @Args({ nullable: false, name: 'userModel', type: () => CreateUserDto })\n    userModel: CreateUserDto,\n  ): Promise {\n    return await this.prismaRequestService.CreateUser(userModel);\n  }\n  //#endregion\n\n  //#region ------------- UpdateUser ----------------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Security,\n  ])\n  @Mutation(() => Users, { name: 'UpdateUser' })\n  async UpdateUser(\n    @Args({ nullable: false, name: 'userModel', type: () => UpdateUserDto })\n    userModel: UpdateUserDto,\n  ): Promise {\n    return await this.prismaRequestService.UpdateUser(userModel);\n  }\n  //#endregion\n\n  //#region ------------- SoftDeleteUsers -----------------\n  @HasRoles([\n    Roles.Demo,\n    Roles.Admin,\n    Roles.User_Global,\n    Roles.User_Management,\n    Roles.Inspector,\n    Roles.Security,\n  ])\n  @Mutation(() => Counter, { name: 'DeleteUsers' })\n  async SoftDeleteUsers(\n    @Args({\n      nullable: false,\n      name: 'deleteUsersIds',\n      type: () => DeleteUserDto,\n    })\n    deletedUsers: DeleteUserDto,\n  ) {\n    return await this.prismaRequestService.SoftDeleteUsers(deletedUsers);\n  }\n  //#endregion\n\n  //#region ------------- RevertDeletedUsers --------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'RevertUsers' })\n  async RevertDeletedUsers(\n    @Args({\n      nullable: false,\n      name: 'deleteUsersIds',\n      type: () => DeleteUserDto,\n    })\n    deletedUsers: DeleteUserDto,\n  ) {\n    return await this.prismaRequestService.RevertDeletedUsers(deletedUsers);\n  }\n  //#endregion\n\n  //#region ------------- HardDeleteUsers -----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'DeleteUserPermanently' })\n  async HardDeleteUsers(\n    @Args({\n      nullable: false,\n      name: 'deleteUsersIds',\n      type: () => DeleteUserDto,\n    })\n    deletedUsers: DeleteUserDto,\n  ) {\n    return await this.prismaRequestService.HardDeleteUsers(deletedUsers);\n  }\n  //#endregion\n\n  //#region ------------- ChangeActivation ----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'ChangeActivation' })\n  async ChangeActivation(\n    @Args({\n      nullable: false,\n      name: 'ToggleActiveUser',\n      type: () => ToggleActiveUserDto,\n    })\n    activationUsersIds: ToggleActiveUserDto,\n  ) {\n    return await this.prismaRequestService.ChangeActivationUsers(\n      activationUsersIds,\n    );\n  }\n  //#endregion\n\n  //#region ------------- UpdateUserRoles -----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => Counter, { name: 'UpdateUserRoles' })\n  async UpdateUserRoles(\n    @Args({\n      nullable: false,\n      name: 'UpdateRolesToUser',\n      type: () => UpdateRolesToUserDto,\n    })\n    activationUsers: UpdateRolesToUserDto,\n  ) {\n    return await this.prismaRequestService.UpdateUserRoles(activationUsers);\n  }\n  //#endregion\n\n  //#region ------------- ManageUserAvatar ----------------\n  @HasRoles([Roles.Demo, Roles.Admin, Roles.User_Global, Roles.User_Management])\n  @Mutation(() => String, { name: 'manageUserAvatar' })\n  async ManageUserAvatar(\n    @Context() context: any,\n    @Args({ nullable: false, name: 'MangeUserAvatar', type: () => String })\n    fileUpload: FileUpload,\n  ) {\n    return await this.prismaRequestService.ManageUserAvatar(\n      fileUpload,\n      context,\n    );\n  }\n  //#endregion\n\n  //#region-------------- get User Info -------------------\n  @Query(() => Users, { name: 'getUserInfo' })\n  async GetUserInfo(@Context() context: any) {\n    return await this.prismaRequestService.GetUserInfo(context);\n  }\n  //#endregion\n\n  //#region-------------- hasPermission -------------------\n  @Query(() => Boolean, { name: 'hasPermission' })\n  async HasUserActionPermission(@Context() context: any) {\n    let reuslt =\n      await this.prismaRequestService.HasUserActionPermission(context);\n    return reuslt;\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/bases/PrismaQuery.ts\n            \n            class\n            PrismaQuery\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/bases/PrismaQuery.ts\n            \n            class\n            PrismaSingleQuery\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserOrderByWithRelationInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserScalarFieldEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserSelect\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserWhereInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bases/PrismaQuery.ts\n            \n            variable\n            PrismaUserWhereUniqueInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bases/base.ts\n            \n            class\n            BaseQuery\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/bases/base.ts\n            \n            class\n            Counter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/bases/base.ts\n            \n            class\n            PermittedPage\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/bases/base.ts\n            \n            class\n            UserOutput\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlBadGatewayException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlBadRequestException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlConflictException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlForbiddenException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlInternalServerErrorException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlMethodNotAllowedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlNotAcceptableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlNotImplementedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlPayloadTooLargeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlRequestTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlUnauthorizedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/error-handler.ts\n            \n            class\n            GraphQlUnsupportedMediaTypeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bases/services/kafka.hr.ts\n            \n            injectable\n            KafkaHumanResourceService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bases/services/prisma-client.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.dto.ts\n            \n            class\n            UpdatePageRolesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            ForgotPasswordModel\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            JwtPayLoad\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            LoginModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            LoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            MenuStructureModel\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.prisma.service.ts\n            \n            injectable\n            PrismaAuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JWTRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JWTStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            guard\n            GqlAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/jwt.strategy.ts\n            \n            variable\n            HasNotRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/jwt.strategy.ts\n            \n            variable\n            HasRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.graphql.controller.ts\n            \n            class\n            UsersResolver\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            ManageAvatarUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            ToggleActiveUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            UpdateRolesToUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.model.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/users/users.prisma.service.ts\n            \n            injectable\n            PrismaUsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/utils/consts.ts\n            \n            variable\n            Consts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/date-time.ts\n            \n            variable\n            DateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            class\n            AllExceptionsToGraphQLErrorFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            injectable\n            GraphQLLoggingMiddleware\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/mail-server.ts\n            \n            injectable\n            MailerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/tasks.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/utils/tools.ts\n            \n            variable\n            Tools\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.11.2\n        \n            @nestjs/apollo : ^12.2.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/devtools-integration : ^0.1.6\n        \n            @nestjs/graphql : ^12.2.2\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/microservices : ^10.4.9\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^4.1.2\n        \n            @prisma/client : ^6.4.1\n        \n            @types/graphql-upload : ^17.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            express : ^4.21.2\n        \n            graphql : ^16.9.0\n        \n            graphql-tools : ^9.0.9\n        \n            graphql-type-json : ^0.3.2\n        \n            graphql-upload : ^17.0.0\n        \n            graphql-upload-ts : ^2.1.2\n        \n            kafkajs : ^2.2.4\n        \n            nodemailer : ^6.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GraphqlModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_KafkaModule\n\n\n\ncluster_KafkaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthResolver \n\nAuthResolver \n\nAuthResolver  -->\n\nAuthModule->AuthResolver \n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\nKafkaModule\n\nKafkaModule\n\nAppModule -->\n\nKafkaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersResolver \n\nUsersResolver \n\nUsersResolver  -->\n\nUserModule->UsersResolver \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nAppModule -->\n\nCustomLogger->AppModule\n\n\n\n\n\nMailerService\n\nMailerService\n\nAppModule -->\n\nMailerService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\nJWTRefreshTokenStrategy\n\nJWTRefreshTokenStrategy\n\nAuthModule -->\n\nJWTRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nPrismaAuthService\n\nPrismaAuthService\n\nAuthModule -->\n\nPrismaAuthService->AuthModule\n\n\n\n\n\nKafkaHumanResourceService\n\nKafkaHumanResourceService\n\nKafkaModule -->\n\nKafkaHumanResourceService->KafkaModule\n\n\n\n\n\nPrismaUsersService\n\nPrismaUsersService\n\nUserModule -->\n\nPrismaUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    37 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : prisma with kafkajs\n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Consts   (src/.../consts.ts)\n                        \n                        \n                            DateTime   (src/.../date-time.ts)\n                        \n                        \n                            HasNotRoles   (src/.../jwt.strategy.ts)\n                        \n                        \n                            HasRoles   (src/.../jwt.strategy.ts)\n                        \n                        \n                            PrismaUserOrderByWithRelationInput   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserScalarFieldEnum   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserSelect   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserWhereInput   (src/.../PrismaQuery.ts)\n                        \n                        \n                            PrismaUserWhereUniqueInput   (src/.../PrismaQuery.ts)\n                        \n                        \n                            Tools   (src/.../tools.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/consts.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Consts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  yourNationalCode: 'کدملی اجباریست',\n  emailRequiredMessage: 'ایمیل اجباریست',\n  phoneRequiredMessage: 'شماره همراه به درستی وارد نشده است',\n  usernameRequiredMessage: 'نام کاربری اجباریست',\n  passwordRequiredMessage: 'رمزعبور اجباریست',\n  passwordIsNotStrongMessage: 'رمز قدرتمند نیست',\n  minLengthOfPassword: 'حداقل طول رمز عبور برابر 2 است',\n  UserIdIsRequired: 'شناسه کاربر اجباریست',\n  yourRealEmail: 'ایمیل واقعی',\n  yourRealPhone: 'شماره همراه',\n  yourUserName: 'نام کاربری',\n  yourPassword: 'رمزعبور',\n  yourUserIdentifier: 'شناسه کاربر',\n  createDate: 'تاریخ ایجاد',\n  updateDate: 'تاریخ بروزرسانی',\n  deleteDate: 'تاریخ حذف',\n  revertDate: 'تاریخ برگشت از حذف موقت',\n  Roles: 'سطوح دسترسی',\n  isActive: 'وضعیت فعال بودن کاربر',\n  isDeleted: 'وضعیت حذف بودن کاربر',\n  ids: 'شناسه ها',\n  items: 'لیست رکوردها',\n  DataNotFound: 'داده ای برای نمایش یافت نشد',\n  Count: 'تعداد انجام شده',\n  totalCount: 'تعداد کل رکوردها',\n  pageSize: 'تعداد در هر نمایش',\n  pageNumber: 'شماره صفحه',\n  loginParamsIsNotValid: 'مقادیر وارد شده معتبر نیستند',\n  accessToken: 'توکن',\n  refreshToken: 'توکن تازه سازی',\n  Duplicated: 'تکراری',\n  unAuthorized: 'مجوزی وجود ندارد',\n  successfullyLogOut: 'با موفقیت از برنامه خارج شدید.',\n  wrongIncomingParameters: 'پارامترهای ورودی قابل شناسایی نیست',\n  LockDownUser:\n    'کاربری شما به دلیل تکرار اشتباه در ورود اطلاعات برای مدت 3 دقیقه قفل شده است',\n  ForbiddenMessage: 'مجوز دسترسی به این عملیات/داده را ندارید',\n  badRequestMessage: 'پارامترهای ورودی دارای مشکل هستند.',\n  notAcceptableMessage: 'فرمت داده های ورودی قابل قبول نیست',\n  requestTimeoutMessage: 'درخواست منقضی شده است',\n  conflictMessage: 'دارای تداخل',\n  payloadTooLargeMessage: 'حجم درخواست زیاد است',\n  unsupportedMediaTypeMessage: 'مقادیر سربرگ درخواست قابل شناسایی نیست',\n  internalServerMessage: 'خطای داخلی سمت سرور',\n  notImplementedException: 'برخی از پارامترهای اجباری ارسال نشده است',\n  methodNotAllowedMessage: 'نوع ارسال درخواست اشتباه است',\n  badGatewayMessage: 'ارتباط با درگاه سرویس برقرار نشده است',\n  userNotExist: 'کاربری با این مشخصات یافت نشد',\n  menuParent: 'نام والد',\n  menuLink: 'آدرس صفحه',\n  menuName: 'عنوان صفحه',\n  menuParentId: 'شناسه والد صفحه',\n  menuRoles: 'نقش های دارای دسترسی به این صفحه',\n  menuSelfId: 'شناسه شخصی صفحه',\n  menuChildren: 'زیرمجموعه های یک صفحه',\n  menuPersianName: 'نام فارسی صفحه',\n  menuDescription: 'توضیحات تکمیلی از کارکرد صفحه',\n  tokenExpired: 'توکن منقضی شده است',\n  avatarPath: 'مسیر ذخیره عکس کاربر',\n  avatarImage: 'عکس کاربر',\n  userId: 'شناسه کاربر',\n  limitationDiskSpaceWarning:\n    'فضای ذخیره سازی شما به حداقل کاهش یافته است. لطفا برای مدیریت و افزودن فضای بیشتر هرچه سریعتر اقدام فرمایید. در صورت نادیده گرفتن این هشدار اطلاعات تاریخچه اقدامات انجام شده در سیستم برای ماههای گذشته پاک خواهند شد.',\n  freeDiskSpace: 'هشدار مدیریت فضای ذخیره سازی',\n  youCanNotRemoveAdminUsers: 'شما نمیتوانید کاربر ادمین سیستم را حذف نمایید.',\n  pageId: 'شناسه صفحه',\n  permittedPage: 'صفحات مجاز برای کاربر',\n  user: 'کاربر',\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/date-time.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  IncrementDecrement: (\n    date: Date | string,\n    num: number,\n    type: 'y' | 'mo' | 'h' | 'mi' | 'd',\n  ) => {\n    let newDate = new Date(date);\n    switch (type) {\n      case 'y':\n        return new Date(date).setFullYear(newDate.getFullYear() + num);\n      case 'mo':\n        return new Date(date).setMonth(newDate.getMonth() + num);\n      case 'd':\n        return new Date(date).setDate(newDate.getDate() + num);\n      case 'h':\n        return new Date(date).setHours(newDate.getHours() + num);\n      case 'mi':\n        return new Date(date).setMinutes(newDate.getMinutes() + num);\n    }\n  },\n  getDiffTime: (date_1: Date | string, date_2: Date | string) => {\n    let dateItem_1 = new Date(date_1).getUTCMinutes();\n    let dateItem_2 = new Date(date_2).getUTCMinutes();\n    return Math.abs(dateItem_2 - dateItem_1);\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/jwt.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HasNotRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HasRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n    src/bases/PrismaQuery.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PrismaUserOrderByWithRelationInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'orderBy',\n  serialize: (value: Prisma.UserOrderByWithRelationInput) => value,\n  parseValue: (value: Prisma.UserOrderByWithRelationInput) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserScalarFieldEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'distinct',\n  serialize: (value: Prisma.UserScalarFieldEnum) => value,\n  parseValue: (value: Prisma.UserScalarFieldEnum) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserSelect\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType,\n  Prisma.UserSelect\n>({\n  name: 'select',\n  serialize: (value: Prisma.UserSelect) => value,\n  parseValue: (value: Prisma.UserSelect) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserWhereInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'where',\n  serialize: (value: Prisma.UserWhereInput) => value,\n  parseValue: (value: Prisma.UserWhereInput) => value,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PrismaUserWhereUniqueInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new GraphQLScalarType({\n  name: 'cursor',\n  serialize: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n  parseValue: (\n    value: Prisma.UserWhereUniqueInput | Prisma.UserScalarFieldEnum[],\n  ) => value,\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/tools.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Tools\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  encript: async (text: string) => {\n    let iv = randomBytes(16);\n    let password = 'we do encript to secure out text';\n    let key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\n    let cipher = createCipheriv('aes-256-cbc', key, iv);\n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return iv.toString('hex') + ':' + encrypted;\n  },\n  decript: async (text: string) => {\n    let iv = randomBytes(16);\n    let password = 'we do encript to secure out text';\n    let key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\n    let decipher = createDecipheriv('aes-256-ctr', key, iv);\n    let decryptedText = Buffer.concat([\n      decipher.update(Buffer.from(text, 'hex')),\n      decipher.final(),\n    ]);\n    return decryptedText.toString();\n  },\n  hash: async (password: string) => {\n    return await bcript.hash(password, await bcript.genSalt(10));\n  },\n  compareHash: async (password: string, hash: string) => {\n    return bcript.compareSync(password, hash);\n  },\n  getNumberFromString: (str: string) => {\n    return str.replace(/[^\\d]/g, ' ').trim().split(/\\s+/).map(Number);\n  },\n  matchs: (item1: string[], item2: string[]) => {\n    return item1.some((x) => item2.some((y) => y === x));\n  },\n  equal: (item1: string, item2: string) => {\n    return item1.toLowerCase() === item2.toLowerCase();\n  },\n  getDriveSize(): Promise {\n    return new Promise((resolve, reject) => {\n      const platform = os.platform();\n      const driveLetter = __dirname.charAt(0).toUpperCase();\n\n      let cmd = '';\n\n      if (platform === 'win32') {\n        cmd = `powershell -command \"Get-PSDrive -Name ${driveLetter} | Select-Object Used,Free,UsedCapacity,FreeCapacity\"`;\n      } else if (platform === 'darwin' || platform === 'linux') {\n        cmd = `df -k ${__dirname} | tail -1`;\n      }\n\n      exec(cmd, (error, stdout) => {\n        if (error) {\n          return reject(error);\n        }\n\n        let total, free;\n        if (platform === 'win32') {\n          const output = stdout.trim().split(/\\s+/);\n          free = Math.ceil((Number(output[9]) - Number(output[8])) / 1000000); // Free space in bytes\n          total = Math.ceil(Number(output[9]) / 1000000); // Total space in bytes\n        } else {\n          const data = stdout.trim().split(/\\s+/);\n          total = Number(data[1]) * 1024;\n          free = Number(data[3]) * 1024;\n        }\n        resolve({ total, free });\n      });\n    });\n  },\n  //#region ------------- IsAuthenticated ------------------\n  async GetUserInfoFromContext(\n    ctx: Context,\n    jwtService: JwtService,\n    prismaService: PrismaService,\n  ) {\n    if (ctx.req && ctx.req.cookies && ctx.req.cookies['jwt']) {\n      let userId = jwtService.decode(ctx.req.cookies['jwt']).sub;\n      let existUserAuth = await prismaService.auth.findFirst({\n        where: { userId: { equals: userId } },\n      });\n      if (existUserAuth) {\n        return existUserAuth;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  },\n  //#endregion\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
